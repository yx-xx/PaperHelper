=== PDF文件: Certifiably-Correct Mapping for Safe Navigation Despite Odometry Drift.pdf ===
=== 时间: 2025-07-22 09:59:19.823237 ===

请你只输出如下JSON，所有字段都必须有，且每个“关键词”字段只允许输出一个中文词语（不能是英文，不能是多个，不能是短语，不能有逗号、分号、空格），否则视为不合格。不要输出任何解释或正文，只输出JSON。
{
  "论文标题": "",
  "研究主题关键词": "",
  "应用场景关键词": "",
  "主要方法关键词": "",
  "创新点关键词": "",
  "主要结论关键词": ""
}
内容：Certifiably-Correct Mapping for Safe Navigation
Despite Odometry Drift
Devansh R. Agrawal, Taekyung Kim, Rajiv Govindjee, Trushant Adeshara,
Jiangbo Yu, Anurekha Ravikumar, and Dimitra Panagou
University of Michigan, Ann Arbor
AbstractAccurate perception, state estimation and mapping
are essential for safe robotic navigation as planners and con-
trollers rely on these components for safety-critical decisions.
obstacle maps and therefore collisions. This paper introduces a
framework for certifiably-correct mapping that ensures that the
obstacle map correctly classifies obstacle-free regions despite the
odometry drift in vision-based localization systems (VIOSLAM).
By deflating the safe region based on the incremental odometry
error at each timestep, we ensure that the map remains accurate
and reliable locally around the robot, even as the overall odom-
etry error with respect to the inertial frame grows unbounded.
Our contributions include two approaches to modify popular
obstacle mapping paradigms, (I) Safe Flight Corridors, and
(II) Signed Distance Fields. We formally prove the correctness
of both methods, and describe how they integrate with existing
planning and control modules. Simulations using the Replica
dataset highlight the efficacy of our methods compared to state-
of-the-art techniques. Real-world experiments with a robotic
rover show that, while baseline methods result in collisions with
previously mapped obstacles, the proposed framework enables
the rover to safely stop before potential collisions.
Code1 and Video2
I. INTRODUCTION
Accurate state estimation and mapping are essential for
safe robotic navigation, as planners and controllers rely on
perception outputs to ensure the safety of planned trajectories
or control actions. Various methods have been developed
to certify that controllers meet predefined safety specifica-
tions [1, 2], and when real-time obstacle detection is neces-
planner [3, 4, 5]. These methods typically assume perfect
A perception module provides a pose estimates and con-
structs maps of the obstacle geometry, and can take a variety of
7], polytopic Safe Flight Corridors (SFCs) , occupancy
achieved significant accuracy improvements [11, 12, 13, 14,
15], formal error analysis is often lacking. Without quantified
error bounds, guaranteeing the safety of a closed-loop robotic
system remains a challenge.
Ground Truth
Ideal Map at time
Baseline map is unsafe
due to odometry drift
Certied map is safe
despite odometry drift
Baseline Map
Certied Map
without odometry drift
with odometry drift
Overview of notation and objectives. (a) depicts the operating
obstacles O. The robot does not know F or O. It starts at B0, and follows
the gray trajectory to Bk building the map as it goes. (b) depicts the ideal
mapping output, where at the k-th timestep, the map Mk is composed of the
known safe region Sk, the unknown space Uk and the known obstacle set Rk.
(c) depicts the map produced by current state-of-the-art methods, where due
to odometry drift the map is erroneous: notice that the safe region (according
to the constructed map) is not a subset of the free space, Sk F. (d) depicts
the desired behavior of the certified maps, where although the safe region is
This paper introduces a framework for certifiably correct
mapping ensuring that obstacle-free regions of a map remain
correct despite odometry drift. The challenge is illustrated
in Figure 1. Consider an environment W  F O, repre-
senting free and obstacle spaces, respectively (Figure 1a). As a
robot navigates, at the k-th time step it has created a map Mk,
comprising the supposedly safe space Sk, the unknown space
Uk and the recognized obstacles Rk (Figure 1b). However, due
to odometry drift, maps can misclassify obstacles as free space,
leading to potential safety violations as indicated in Figure 1c.
We address this by deflating safe regions in order to ensure
Sk F at all times (Figure 1d).
Our main contributions are as follows:
The theoretical framework to construct and deflate the
free space in obstacle maps to ensure their correctness
despite odometry drift. Assuming the odometry algorithm
reports the pose and the covariance of the incremental
gion (Sk1 is deflated relative to Sk) to ensure that it
remains a subset of the free region F.
We prove the correctness and applicability of this frame-
work on two popular and state-of-the-art mapping frame-
Beyond providing the theoretical analysis and proofs
of correctness, we validate and compare our approach
with state-of-the-art baseline methods through extensive
simulations on the Replica dataset .
experiment on a robotic rover. A human teleoperates the
rover using only the First Person View (FPV) feed and
the obstacle map constructed and streamed to the operator
in real-time. The rover uses an onboard safety filter to
prevent collisions. Unlike baseline methods which result
in collisions, our approach prevents crashes by deflating
the safe regions appropriately.
It is critical that we deflate Sk rather than inflate known
obstacles Rk. If the obstacles are inflated based on the accu-
mulated odometry error, these obstacles can only grow in size,
and might eventually occupy the entire domain W. Instead,
by deflating a safe region Sk, the region that is certifiably
safe shrinks, eventually becomes an empty set, and is removed
from memory (i.e., the region becomes part of Uk). When the
region is observed by a sensor again, it can again be added to
Sk again. Computationally, this reduces memory requirements,
and mathematically this allows us to treat deflated obstacles
as unknown regions and plan paths accordingly. The certified
maps can be used together with the uncertified maps for
practical applications: the uncertified maps can be used to
plan trajectories for example for exploration or for navigating
towards a goal location, while the certified map can be used
for local obstacle avoidance.
Our paper is organized as follows. After a brief literature
review in Section II, in Section III we provide a mathematical
background and setup the problem formally. In Section IV
and V we introduce the deflation mechanism for both map
representations. In Section VI we propose methods to use
the certified maps to acheive safe navigation. Finally in Sec-
tion VII and Section VIII we present the simulation and
experimental results.
II. LITERATURE REVIEW
Perception methods have seen significant advancements
over the past few decades, driven by improvements in algo-
primary goals of these advancements have been to enhance
localization and mapping accuracy, improve robustness under
diverse environmental conditions, and develop algorithms with
lower computational costs. For instance, modern Simultaneous
Localization and Mapping (SLAM) systems now report trans-
lation error rates below 1 [19, 20], enabling more reliable
navigation in real-world scenarios.
With these improvements, robots have been deployed in
increasingly complex environments, relying heavily on Visual
Inertial Odometry (VIO)SLAM pose estimates and obstacle
maps to navigate safely. As exemplified by the DARPA SubT
of navigating subterranean environments [21, 22, 23]. In
these systems, raw measurements are typically processed by a
frontend into a more compact representation, while a backend
uses nonlinear optimization methods to compute the robots
trajectory and map estimate . Most of these optimization
methods are based on factor graphs, which, although effective,
become computationally expensive as the map size increases.
A common approach to manage this computational com-
plexity is to use local submaps, connected through a graph of
traversable regions or submap connections . These meth-
ods reduce odometry drift by optimizing each submap within
its own coordinate frame. When a robot revisits a previously
mapped region, the submap can be reused, provided that the
robot is correctly localized within it. However, even within
a submap, odometry drift can still lead to localization errors.
errors within these submaps. The approach proposed in this
paper aims to ensure correctness at the submap level, i.e., in
the presence of incremental localization errors.
Recent work has explored techniques for ensuring the
correctness of perception systems. For example,  achieve
global optimization in pose graph optimization problems
through a convex reformulation, while  provide error-
bounded localization within 2D convex environments. Addi-
tration and visual odometry methods. Similarly,  showed
that bounded attitude errors lead to bounded position errors. In
contrast to , this paper assumes that the incremental pose
estimate is bounded in a Lie-algebraic sense, which allows
our methods to be applied to a broader range of odometry
considered in . In cases where certification of correctness
is not feasible, estimating or quantifying the error can still
provide valuable insights, for example using the methods
in [29, 30] which estimate the error in point-cloud matching.
Other approaches have been proposed to address mapping
consistency in the presence of odometry drift.  utilize
overlapping Truncated Signed Distance Field (TSDF) voxels,
which are only fused once the consistency of certain regions
has been verified. These ideas share similarities with the work
of [32, 33], which also emphasize the importance of ensuring
consistency before merging obstacle estimates from different
times. These methods propose constructing a manifold map,
only merging them when correctness can be guaranteed. In
different strategy: regions where correctness cannot be assured
are forgotten, ensuring that only reliable, consistent parts of
the map are used for navigation and decision-making.
III. PRELIMINARIES AND PROBLEM STATEMENT
Notation
N  {0, 1, 2, ...} is the set of natural numbers. R, R0, R>0
denote reals, non-negative reals, and positive reals. In Rnn
is the n  n identity matrix. The subscript is dropped when
clear from context. SO(n) is the n-d special orthogonal group.
SE(n) is the n-d special Euclidean group. Sn
is the set
of symmetric positive-definite matrices in Rnn. The matrix
square root of positive definite matrix A Sn
is the matrix
A12 Rnn such that A12A12  A. For v Rn,
vdenotes the 2-norm, vp, (p [1, ]) denotes the p-
vT Pv for P Sn
. All eigenvectors
are assumed to be unit-norm. (A) is the set of eigenvalues
of A Rnn, and max(A) is the largest eigenvalue of
. [p] R33 is the skew-symmetric matrix such
that a  b  [a]b for any a, b R3.
Matrix Lie Groups
Here we present a brief review of Matrix Lie Groups
in the context of this paper, with additional equations and
details in Appendix A. We refer the reader to the excellent
references [34, 35, 36] for a more complete description.
The Lie group SO(3) defines 3D rotations, and the group
SE(3) defines 3D rigid transformations. Both SO(3) and
SE(3) are Matrix Lie groups, i.e., group elements are matrices,
and composition operator is the standard matrix multiplication
operator. In SE(3) the group action  : SE(3)  R3 R3
transforms a point p from its representation in frame A to that
in frame B. Given T B
A  pA RpA  t.
The Lie algebra of a group is a vector space of all possible
directions a group element can be perturbed locally. The Lie
algebras of SO(3) and SE(3) are so(3) and se(3) respectively.
These vector spaces are isomorphic to R3 and R6 respectively.
The operator converts the Euclidean vector to an element
of the Lie Algebra, and does the inverse.
Consider a Lie group G with an associated Lie algebra g
that is isomorphic to the Euclidean vector space Rn. Given
an element x g, we can convert it to the corresponding
group element using the exponential map, exp : g G. For
the Euclidean vector space to the group directly, Exp : Rn
these operations have analytic expressions [34, Appendix].
Uncertain Poses and Transforms
An uncertain pose or transform T B
A SE(3) is denoted
A N( bT B
where bT B
A SE(3) is the mean estimate, and T S6
covariance matrix. This indicates T B
A is the transform
where  R6 is a random sample drawn from  N(0, T ).
Recall the group action pB T B
A pA. If the transform T B
is uncertain, pB follows a distribution and, to first order, is a
normal distribution [34, 36]:
N(pB, p)
where the mean and covariance are
pB  bT B
A  pAR3,
p  JT JT S3
For the remainder of the paper, we truncate the distribution
making the following assumption:
Assumption 1. Let T B
A N( bT B
Then for any pAR3, the point pBR3 satisfies
where E R3 is the ellipsoid
A  pA 1
p  JJT S3
for some  > 0.3
In other words, the assumption is that when a point p is
transformed from its representation in frame A to that in frame
the estimated point bT B
A  pA, as defined in (5). The size and
principal axes of the ellipsoid are defined by the estimated
transform bT B
A and the covariance matrix . This allows us
to bound the error of mapping points between frames, and
the bound can be made tighter if  is increased, or if higher
order approximations are used, as in . The higher order ap-
proximations yield tighter covariance ellipsoids, at the expense
of increased computation. Since we focus on rototranslations
between successive body frames, the transforms T B
A should be
close to identity where first order approximations work well.
Reference Frames
This paper uses the inertial frame I, a mapping frame M,
and the body-fixed frame at the k-th timestep, Bk. Usually, M
and I are equivalent, and M is defined such that at M  B0.
relative to I. We assume that I is the true inertial frame (in
which the obstacles are static), and M is the reference frame
used to construct the state estimate and the map.
Problem Statement
Let O represents the obstacle geometry in a static environ-
ment W R3. Both O and F  WO are assumed initially
3 chooses the probability the bound contains the point. For a d-
dimensional normal distribution, x
N(, ), the probability that
1 is p [0, 1] such that   2
d(p), where 2
d is the
quantile function of the chi-squared distribution with d degrees of freedom.
For 3D points,   2 corresponds to p  97.
unknown. We assume F does not contain any isolated points,
and that O is closed. As with points, a set can be represented
in a frame, i.e., we say that OBkR3 is the set of all obstacle
points represented in frame Bk.
To avoid obstacles, we must build a map of the environ-
ment. At the k-th timestep the map is Mk, consisting of
the (claimed) free-space Sk, the unknown space Uk, and the
(claimed) obstacle space Rk. A map is correct if the claimed
free space is a subset of the true free space.4 More formally,
Definition 1. A map M  S U R is the union of
the (claimed) safe region S, the unknown region U, and the
(claimed) obstacle region R. At the k-th timestep, the map
Mk is correct if for all pBkR3,
pBkSkBk pBkFBk.
In words, Mk is correct if Sk is a subset of the free space
F when represented in the k-th body-fixed frame.
The definition above is intentionally explicit about which
reference frame various points and sets are represented in since
this is the source of the main problem tackled in this paper.
Due to the odometry drift, there are two types of error common
in state-of-the-art mapping algorithms:
(A) Errors in constructing the map: In current state-of-the-
art implementations, the map is often represented computa-
tionally in the mapping frame M. Suppose at some time tk
the robot detects an obstacle (relative to its body-fixed camera)
at a position pBk. It will update the map to remove this point
from the claimed free space:
Sk1MSkM{ bT M
Bk  pBk}.
used instead of the true transform T M
an obstacle can be wrong. This problem is exacerbated since
usually the line connecting the camera origin and the point
pBk is marked free, and therefore the wrong locations are
marked as part of Sk1.
(B) Errors in querying the map:
Now suppose the robot
wants to navigate the environment. It must therefore (at time
tk) check whether a point pBk relative to the body-fixed frame
is free. To the best of our knowledge, all implementations will
then check whether the corresponding estimated point in the
Bk  pBk SkM.
However notice again, since the estimated transform is used,
this can lead to inconsistencies. In particular, owing to the
odometry drift, the inconsistency will be worse when the
obstacle point was inserted into the map many frames ago.5
4Since O is closed, F is open. The (claimed) safe region S can be either
an open or closed subset of F. Below, S will be a closed set.
5It will also becomes clear that time is not the only factor - points
insertedqueried further from the robot will also be more inaccurate due to the
larger moment arm that amplifies rotation errors. This is also why common
heuristic algorithms of time- or distance-based forgetting cannot guarantee
the correctness of the map. The methods proposed in this paper will directly
address such issues.
We overcome both such issues, by ensuring the map is
always correct in the body-fixed frame. An equivalent per-
spective is that despite using the estimated transform bT M
map will be constructed and queried correctly.
The problem statement therefore is as follows:
Problem 1. Consider a robotic system equipped with an
RGBD camera operating in a static environment with obstacles
O R3. Suppose an odometry module provides at each frame
k the estimated odometry bT B0
Bk SE(3), the relative odometry
Bk1 SE(3) and a covariance of the relative odometry
. Suppose a mapping module can construct the
best estimate map of the free space in the environment. Design
a framework to correct the best-estimate map such that at each
despite the odometry drift.
We also assume that if an obstacle point is within the
cameras Field of View (FoV), it will be detected as an
obstacle. This is a common implicit assumption in the mapping
literature. Infrared depth cameras often fail to detect transpar-
ent obstacles (e.g., windows and glass doors) or obstacles with
minimal texture (where the stereo block-matching algorithm
fails). Such issues are beyond the scope of this paper.
In the next two sections, we demonstrate how to construct
correct maps by modifying existing baseline mapping algo-
rithms. In particular we extend (A) a mapping algorithm
which uses polytopes to represent the map of free space, and
(B) the mapping algorithm  which uses signed distance
fields to represent the free space. See Figure 2.
IV. APPROACH 1: CERTIFIED SAFE FLIGHT CORRIDORS
A. Background
In the first approach, the obstacle-free region Sk at frame
k is the union of n polytopes,6
where each polytope is a compact set of the form
k  {p R3 : Al
This is often called the H-representation, since the polytope is
defined by a set of half-space constraints . An example of
a polytope extracted from a depth image is shown in Figure 2c.
As the robot transitions from frame Bk to frame Bk1, we
can map each polytope from the previous frame to the new
In the absence of odometry drift, one can directly compute
the new polytopes:
k1  {p R3 : Al
6n can be different at each k.
Depth Image  Pointcloud
RGB Image
Sensor Outputs
union of polytopes
represents the free space
set of voxels with positive ESDF
represents the free space
surface level set of ESDF
represents obstacles
Mapping output: Approach 2
Mapping output: Approach1
Two approaches to constructing an obstacle map. (Top row) An RGBD camera provides (a) the first person RGB image, and (b) the depth
imagepointcloud constructed from stereo images. (Bottom row) The SFC approach represents the free space as a union of polytopes, one of which is
depicted in (c). The ESDF approach represents the world using voxels, where each voxel stores the signed distance to the nearest obstacle. From this, both the
(d) ESDF at specific voxels or (e) obstacle surface locations can be extracted and used for safe navigation. To aid the reader, in (c) and (d) the raw pointcloud
is also visualized, and in (d) the colorscheme is such that voxels are marked green if d > 0, and red otherwise. This makes the map look binary, although it
contains continuous values. Furthermore, note both methods operate in 3D - the 2D slice is used for visualization.
using the estimated transforms
In the presence of odometry drift, however, the estimated
transform bT Bk1
is inexact, and this method fails to guarantee
k1 F. Therefore, Mk is not guaranteed to be correct.
B. Proposed Approach
In the presence of odometry drift, since the transform T Bk1
is uncertain, the method in (11) does not work. Extending this
approach to uncertain transforms is also not straightforward,
since in the H-representation, an uncertain perturbation to
a half-space does not result in a new half-space. Here, we
propose a novel method that uses the V-representation of the
polytope to circumvent this issue. In the V-representation, the
polytope is the convex-hull of a set of vertices. Denote the set
of vertices by
Vi  {vi,j}mi
where vi,j R3 is the j-th vertex on the i-th face of a
polytope.
We will use the V-representation to compute a new (de-
flated) polytope Pk1 from Pk. The algorithm is described by
the next Lemma and Theorem.
Lemma 1. Suppose T Bk1
N( bT Bk1
, k), where
Consider a polytope Pk that is obstacle free,
Pk  {p R3 : Akp bk}
where Ak RN3, bk RN. Denote the i-th row as ak,i
R3. For each vertex vi,j Vi(Pk) on the i-th face of the
as in Assumption 1. Let each element of  RN be
Define a new polytope as
Pk1  {p R3 : Ak1p bk1},
Ak1  AkRT ,
bk1  bk  AkRT t .
Given Assumption 1, Pk FBk Pk1 FBk1, i.e., if
Pk is obstacle-free, so is Pk1.
Proof Sketch:
[See Appendix B for the full proof.] It
suffices to show that any obstacle potentially on the boundary
of Pk will not be in Pk1 after the rigid transform. To
do so, we consider a potential obstacle on the i-th face of
the polytope, and compute the ellipsoid the obstacle could
be in after the transform. We compute the tangent plane of
the ellipsoid normal to the i-th hyperplane, and compute the
minimum shift necessary such that the shifted hyperplane does
not contain the ellipsoid. We use the convexity of the polytope
to show that the necessary shift on the i-th hyperplane is i, the
maximum of the shifts necessary at each of the vertices on the
i-th hyperplane of the polytope. This deflaion, when applied
to each hyerplane of the polytope, guarantees that Pk1 does
not contain the obstacle points.
Theorem 1. Suppose the transform between frame is T Bk1
N( bT Bk1
, k). Given the k-th map is defined as in (9), define
the (k  1)-th map as
where each polytope is defined using Lemma 1. Then, given
Assumption 1,
Sk F Sk1 F,
that is, if Mk is correct by Definition 1, the updated map
Mk1 will also be correct.
In words, the theorem shows that when each polytope
in the map Mk is shrunk using
Lemma 1, the new safe
region Sk1 also remains certifiably obstacle-free. Once a
given polytope has shrunk to zero volume, it can be forgotten
entirely. Recall that as new camera frames are received,
new polytopes can be constructed to define the free space
in the operating environment and added to the set Sk1.
We empirically study how quickly an environment deflates
in Table III and in Section VIII. Naturally, if the odometry
covariance is smaller, the deflation rate is smaller Appendix G.
Remark 1. Compare (11) with (17). The two are identical
except for the  vector in (17c). Each element i 0, and
is that we transform the polytope by the estimated transform,
but then shrink the polytope based on the odometry error
covariance. Notice that this shrinking operation is tight: since
there could exist an obstacle on the face of the polytope
(indeed this is how they are constructed), the shrinking factor
is the smallest allowable factor, by construction.
Remark 2. In implementation, notice that one needs to
compute Vi(Pk), the set of vertices, and then update the poly-
hedron by (17c). Although this operation scales exponentially
with the number of faces , efficient implementations exist,
especially for 3D polytopes . Empirically, we observe each
polytope has on the order of 10-20 faces when using , and
can be handled in real-time.
V. APPROACH 2: CERTIFIED ESDFS
A. Background
The Euclidean Signed Distance Field (ESDF) is defined as
the function d : R3 R,
dist(p, O),
dist(p, O),
where O R3 is the boundary of the obstacles. The dist
measures the minimum distance of a point to a set, i.e.,
dist(p, O)  minoO p o. Thus, for any point in free-
d(p)  min
A 2D slice of the ESDF is depicted in Figure 2d.
To evaluate (21), o and p must be expressed in a common
is done in the mapping frame, it is denoted as the function
Sk  {p R3 : dM(p) 0}
For safety-critical path planning and control, we need the
ESDF at points relative to the body-fixed frame. The common
approach is to assume the odometry estimate is exact, and
determine d(pBk) by expressing it in the map frame and
evaluating dM:
d(pBk) dM( bT M
Bk  pBk)
Bk is inexact, this method can
lead to over- or under-estimates. Overestimated distances are
unsafe since they could lead to collisions.
B. Proposed Approach
The goal is to construct an ESDF that is safe, i.e., underesti-
mates the distance to obstacles. Using Definition 1, a Certified-
ESDF is defined as
Definition 2. Let the obstacle set be O R3, assumed static
in frame I. Let the ESDF of O be d : R3 R. A Certified-
ESDF (C-ESDF) at timestep k is a function dk
such that for all points pBkR3,
d(pBk) dk
Bk  pBk)
where bT M
Bk SE(3) is the estimated rototranslation between
Bk and M.
Comparing (23) with (24), the goal of certification is to
change the into . That is, a Certified-ESDF is one where
for any body-fixed point pBk, if the point is expressed in the
mapping frame using the estimated rototranslation, we have
underestimated the distance to the nearest obstacle:
d(pBk)  min
true ESDF
dM( bT M
Bk  pBk)
estimated ESDF
7We use (21) instead of (20) for the remainder of the section for brevity.
The points with d(p) < 0 will be removed from memory.
To accomplish this, we propose a strategy of deflating the
ESDF. We derive a recursive guarantee to ensure the ESDF
remains certified for all k.
Theorem 2. Suppose at timestep k N, the ESDF dk
R3 R is a Certified-ESDF. Let the rototranslation between
frames be T Bk
Bk1 N( bT Bk
be defined by
M (pM)  dk
for all pMR3, where
R[ bT Bk1
p  JkJT .
and  > 0 is as defined in Assumption 1. Given Assumption 1,
is also a Certified-ESDF at timestep k  1.
Proof Sketch:
[See Appendix C for the full proof.]
Consider any point pBk1 and evaluate the potential positions
it could correspond to in frame Bk. This is an ellipsoid as
in Assumption 1, and therefore the ESDF at pBk1 must be
the minimum of all of the ESDF values for the corresponding
points in the ellipsoid. Since, by definition, the Lipschitz
constant of an ESDF is one, this minimum ESDF can be
lower bounded by the ESDF at the center minus the radius
of the smallest sphere containing the ellipsoid. We use the
eigenvalues of the ellipsoid to compute the radius of sphere,
arriving at the expression.
Remark 3. Notice that the correction is
max(p) in (26)
(different for each p). As with the certified SFCs, this is a
deflation operation that decreases the estimated distance to
an obstacle.
Remark 4. The implementation of this deflation operation is
remarkably simple and easily parallelized on a GPU. In our
to the code in . At each frame, when the relative odometry
with covariance is received, we can compute the deflation at
each voxel in parallel using (26).
VI. SAFE NAVIGATION WITH CERTIFIED MAPS
Here we summarize the key ideas presented in this paper,
and suggest strategies to achieve safe navigation.
A fundamental principle of our approach is ensuring that
maps remain correct with respect to the body-fixed frame. To
achieve this, we deflate the safe regions of the map based on
the incremental odometry error at each timestep. The required
deflation has an analytic expression.
Our implementation is as follows. When the (k  1)-th
camera frame is received from the sensor, we compute the
odometry estimate, and its relative covariance. Next, we apply
the deflation step using the proposed algorithms. Finally, we
incorporate new safe regions identified by the depth image to
assimilate new information while discarding regions that can
no longer be certifiably correct.
One can also maintain both the baseline and certified maps
in memory simultaneously. While the memory usage increases,
the certified maps tend to be smaller than the full map, main-
taining both maps offers significant advantages. In particular,
our certified mapping methods can integrate naturally with
existing safety filtering methods like [5, 4]. These methods
generate nominal trajectories to achieve mission objectives,
but use a backup trajectory to ensure that the robot can
safely stop based on the currently available information. In
our framework, one can use the baseline map for nominal
trajectory planning, but use the certified map for collision and
safety checks. This combination enables agile motion while
strictly guaranteeing safety.
VII. SIMULATIONS
We present results on the accuracy and correctness of
both approaches for certified mapping presented above. As
a reminder, the goal is to demonstrate that despite odometry
free space is indeed obstacle-free. First, we evaluate the per-
formance of both the Certified SFCs and the Certified ESDFs
methods on the Replica dataset (described below) and com-
pare it to various baselines. Second, we have run hardware
experiments with a rover, and show that by considering the
certification bound the rover can avoid collisions. Additional
results are reported in Appendix F and Appendix G.
Evaluation Method
We evaluated the performance of our implementations on
the Replica dataset , with ground-truth trajectories gener-
ated as in . From the ground-truth trajectory the RGBD
image sequence was generated. We perturbed the trajectory to
generate the estimated trajectory from a simulated odometry
system as follows:
Bk1  T Bk
Bk1 Exp(),
where T Bk
Bk1 SE(3) is the transform between subsequent
frames of the ground-truth trajectory of the camera and
Bk1 SE(3) is the estimated transform between sub-
sequent frames used in the mapping algorithms. We used
{105I, 106I}. Evaluating the Absolute Translation
Error (ATE) as in , the generated trajectories had between
1 3 ATE, inline with the performance of state-of-the-art
VIO methods. Each trajectory has 2000 frames at 30 FPS.
Baselines
We compared our proposed certified approaches to the
following mapping methodologies:
(A) Baseline SFC - At each camera frame, the depth map
is used to construct a pointcloud of obstacles within the
current field of view. From this a convex polyhedron is
The union of these polyhedrons is considered the safe
Ground truth (oce0)
Baseline SFC Method
Certied SFC Method
Violations!
External View
Internal View
Fig. 3. Visualization of a snapshot of the office0 environment mapped using the baseline and certified SFC methods. (a, d) shows the office0 environment,
while (b, e) and (c, f) show the respective S sets at the 500-th timestep from an external and an internal view. The baseline map claims a larger volume to be
safe compared to the certified method (red volume is larger than green volume). However, we can also see numerous regions where the red region intersects
with the ground truth mesh, indicating that the claimed safe region contains obstacle points. In the certified method, we see no violations.
flight region. We used the library  to perform the
convex decomposition.
(B) Heuristic SFC - This is the same algorithm as in
(A), except that a time-based forgetting mechanism is
tations. In particular, we only keep the last 60 frames
(2 seconds) of polyhedrons when constructing the safe
flight region.
(C) Baseline ESDF - At each camera frame, the depth
map is used to update the TSDF of the environment.
At regular intervals a wave propagation algorithm con-
structsupdates the ESDF of the environment. Regions
with positive ESDF are considered part of the safe flight
region. We used the library  to construct the TSDF
and ESDF.
(D) Heuristic ESDF - This is the same algorithm as in (C),
except that a distance-based forgetting mechanism is
introduced. In particular, we forget any TSDF and ESDF
voxels that are more than 3 m away from the camera.
These are compared to the proposed certified methods:
(E) Certified SFC - This is the same algorithm as in (A),
except that at each frame, each polytope is deflated as
described in Section IV.
(D) Certified ESDF - This is the same algorithm as in (C),
except that at each frame, the ESDF is deflated as
described in Section V.
To evaluate the performance, we consider three metrics:
(I) Violation Rate: The violation rate measures the percent-
age of ground-truth mesh points that (incorrectly) lie
within the claimed free space. The violation rate should
be close to 0.
(II) Maximum Violation Distance:
For any violating point
we measure the maximum distance of the violation, i.e.,
how far into the claimed free space is an obstacle point.
The violation distance should be close to 0 mm. If there
are no violating points, the violating distance is 0 mm.
(III) Free-Space Volume: This measures the total volume of
the space that is claimed to be free. The free-space
volume should be as large as possible.
Tables I, II, and III summarize the results from the sim-
ulations. Figure 3 and Figure 4 visualize the results and
qualitatively show the behavior of the proposed methods.
Figure 3 visualizes one of the runs from the office0
environment. Figures (a, d) shows the ground-truth mesh of
the environment from two different views. In (b, e) we see the
safe flight polytopes in the baseline method visualized as the
red region. One can see that the red region clearly intersects
with the ground-truth mesh, and each intersection represents a
violation. The violations are particularly noticeable for regions
that were mapped further in the past, and from non-convex
and thin obstacles like the chair or table surfaces. In contrast,
in (c, f) we see the safe flight polytope from the proposed
certified algorithms, drawn as the green region. We can see that
the green region is smaller than the red polytope, but it also
Certied ESDF
Baseline ESDF
Frame 500
Frame 1000
Frame 2000
Ground Truth
Baseline ESDF Method
Certied ESDF Method
Fig. 4. Visualization of the maps gener
