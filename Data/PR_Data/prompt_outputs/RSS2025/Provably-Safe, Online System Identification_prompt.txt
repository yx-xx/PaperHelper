=== PDF文件: Provably-Safe, Online System Identification.pdf ===
=== 时间: 2025-07-22 15:42:45.261054 ===

请你只输出如下JSON，所有字段都必须有，且每个“关键词”字段只允许输出一个最核心的最有代表性的中文关键词（不能是英文，不能是多个，不能有逗号、分号、空格），否则视为不合格。不要输出任何解释或正文，只输出JSON。
{
  "论文标题": "",
  "研究主题关键词": "",
  "应用场景关键词": "",
  "主要方法关键词": "",
  "创新点关键词": "",
  "主要结论关键词": ""
}
内容：Bohao Zhang1, Zichang Zhou1 and Ram Vasudevan1
AbstractPrecise manipulation tasks require accurate knowl-
edge of payload inertial parameters. Unfortunately, identifying
these parameters for unknown payloads while ensuring that the
robotic system satisfies its input and state constraints while avoid-
ing collisions with the environment remains a significant chal-
lenge. This paper presents an integrated framework that enables
robotic manipulators to safely and automatically identify payload
parameters while maintaining operational safety guarantees. The
framework consists of two synergistic components: an online tra-
jectory planning and control framework that generates provably-
safe exciting trajectories for system identification that can be
tracked while respecting robot constraints and avoiding obstacles
and a robust system identification method that computes rigorous
overapproximative bounds on end-effector inertial parameters
assuming bounded sensor noise. Experimental validation on a
robotic manipulator performing challenging tasks with various
unknown payloads demonstrates the frameworks effectiveness in
establishing accurate parameter bounds while maintaining safety
throughout the identification process. The code is available at our
project webpage:
I. INTRODUCTION
Robotic arms have widespread applications in cooperative
human-robot environments, including manufacturing, package
delivery services, and in-home care. These scenarios fre-
quently involve manipulating payloads with uncertain proper-
ties while operating under physical constraints. To ensure safe
to the safe deployment of robotic arms handling unknown
payloads.
The first challenge lies in bridging the gap between safe
planning and safe control. Current research in motion plan-
ning and manipulation often overlooks controller tracking
between desired and actual trajectories. These deviations may
lead to obstacle collisions or torque limit violations. The
second challenge involves accurate estimation of model un-
certainties. For unknown payloads, online system identification
becomes necessary to estimate the range of inertial parameters.
troller behavior to guarantee tracking performance, resulting
in conservative motion planning which can limit performance.
crucial for ensuring satisfactory task performance. The third
challenge concerns safety assurances during system identifi-
cation. While extensive research exists on exciting trajectory
design for data collection and identification accuracy, these
studies primarily focus on industrial robots without payloads
1Robotics Institute, University of Michigan, Ann Arbor, MI <jimzhang,
This work was supported by AFOSR MURI FA9550-23-1-0400.
Fig. 1: This figure illustrates how the method proposed in this paper. (a)
of heavy dumbbells that are close to the design limit of the robot. The inertial
parameters of this payload are unknown. (b) The robot then performs online
system identification to estimate an interval bound using the method developed
in this paper. The interval estimate of the inertial parameters generated by the
algorithm is guaranteed to include the true inertial parameters of the dumbbell.
a manner that is guaranteed to be collision free while satisfying joint and
torque limits. The inertial parameter bound is then used to update the planner
and the controller, which allows the robot to (c) safely move all dumbbells
to the other side around the obstacles and then (d) stack them vertically in
order of increasing weight, which requires high precision. Our experiments
illustrate that state-of-the-art methods that do not incorporate such provably
overapproximative estimates of the inertial parameters result in a failure to
complete the task safely, due to exceeding the torque limits, colliding with
and do not consider operational safety during data collection.
Current approaches rarely address obstacle avoidance or torque
limit compliance during the identification process. This is par-
ticularly important when considering online operation wherein
the model parameters of a payload may not be known before
it is manipulated.
This paper presents a provably-safe and real-time system
identification framework that addresses these three challenges.
As illustrated in Figure 2, the proposed framework comprises
two integrated components. Initially, the approach assumes
an overapproximated bound on the inertial parameters of
the robot end-effector with unknown payloads. A trajectory
planning and control framework then generates a provably-
this initial bound. This exciting trajectory can be tracked in
a provably safe manner. Using this collected data, the robust
system identification method generates a new, tighter, prov-
ably overapproximative bound on the end-effectors inertial
parameters. This process iterates continuously, with additional
Execute exciting trajectories using robust controller
Collect measurements
Robust Online Payload Identication
Provably-Safe Exciting Trajectory Planner
Joint limits
Torque limits
Collision avoidance
true data
observed data
sensor noise
Theorem 17: Interval Bound Estimation
through perturbation analysis
inertial
parameters
residual
[sensor noise]
Theorem 15: Nonlinear Least Squares Formulation
to identify inertial parameters
Update planner and controller with new estimates
Theorem 11: Log-Cholesky Parameterization
to enforce physical consistency
Theorem 6: Momentum-based Dynamics
to avoid acceleration estimation
Fig. 2: This figure summarizes the proposed framework. Initially, the approach assumes an overapproximated bound on the inertial parameters of the robot
end-effector with unknown payloads. A trajectory planner (Section V) then generates a provably-safe, locally exciting desired trajectory in real-time based
on this initial bound. A robust controller, modified from [28, Section VII], tracks this exciting trajectory while collecting robot data including joint positions,
on the end-effectors inertial parameters. This process iterates continuously, with additional data enabling more precise parameter estimation and improved
planner and controller performance.
data enabling more precise parameter estimation and improved
planner and controller performance.
The key contributions of this paper are two-fold: First,
a real-time, provably-safe trajectory optimization framework
that generates locally exciting trajectories for system identi-
fication while respecting robot limits and avoiding obstacles.
an overapproximated bound of the end-effectors inertial pa-
rameters given an overapproximated bound of sensor noise.
The remainder of this paper is organized as follows: Sec-
tion II reviews related work. Section III introduces relevant
namics. The paper then presents the frameworks components
in reverse order: Section IV proposes the system identification
method based on momentum regressor, sensitivity analysis,
and interval arithmetic. Section V details the trajectory op-
timization problem formulation. Finally, Section VI demon-
strates the methods efficacy through real-world experiments
and comparisons with state-of-the-art approaches.
II. RELATED WORK
The identification of uncertain payloads attached to the
end-effector of robotic manipulators leverages the fundamen-
tal property that inertial parameters exhibit linearity in the
equations of motion , enabling the use of least-squares
estimation methods  and, more robustly, weighted least-
squares techniques [6, 50]. Estimated payload parameters are
widely applied in various domains, including precise control
and collision detection . Recent advancements have
explored alternative formulations of system dynamics based
on momentum  or energy , avoiding estimation of
acceleration. Beyond joint encoders, proprioceptive sensors
mounted on the end-effector have been employed to esti-
mate payload properties using filtering-based methods .
leveraging neural networks to learn system dynamics directly
from system state data [10, 17] or from pure vision input .
Another important direction relevant to both identification
and control of unknown systems is adaptive control. Early
adaptive controllers aimed to compensate for nonlinear dynam-
ics while decoupling joint interactions [42, 53]. Subsequent
theoretical developments leveraged the linear parameterization
of robot dynamics and Lyapunov-based stability analysis to
ensure convergence guarantees . The introduction of pa-
rameter error dynamics through dynamic filtering and torque
prediction  enabled online parameter adaptation with
global stability properties. More recent work further advanced
this approach by leveraging momentum-based regressors ,
thereby eliminating the need for acceleration estimation. De-
spite these advancements, adaptive control still faces important
limitations. Performance remains highly dependent on per-
sistent excitation, which affects both the convergence speed
and steady-state accuracy. More critically, classical adaptive
control methods typically do not offer explicit guarantees
on convergence rate for tracking errors. Additionally, they
are unable to enforce state and input constraints. Although
recent research  has attempted to address these issues, the
proposed solutions are limited to systems with just a single
linear actuators and does not generalize to robots governed by
nonlinear rigid body dynamics.
For all of these aforementioned methods, the design of
proper experiments for data collection, known as exciting
trajectory design, has emerged as a critical aspect of system
identification [13, 45, 4, 33, 7]. Early methods focused on
minimizing the condition number of the regressor matrix
, though later work demonstrated greater effectiveness in
optimizing the condition number of sub-regressors . Most
approaches employ trigonometric series (Fourier series)  or
B-splines  as trajectory bases to facilitate the enforcement
of state and velocity limits, while some methods explore deep
learning-based techniques to maximize the Fisher information
of the payload properties . However, safety guarantees
during the identification process are largely unexplored and
can be categorized into two main challenges: (1) Generating
a safe exciting trajectory and (2) safely tracking a given
trajectory. To address the first challenge, state of the art
approaches enforce only joint and velocity limits. This may
still produce trajectories that violate torque limits. To the
authors best knowledge only  addresses the challenge
of generating an exciting trajectory while satisfying safety
constraints. However,  employs sampling-based planners
to generate collision-free trajectories which are unable to guar-
antee safety between sampled points. To address the second
or manufacturer-embedded controllers . As a result,
trajectory or controller fine-tuning is often required to balance
the trade-off between respecting torque limits and achieving
low tracking errors.
To overcome these challenges, the concept of closed-loop
stateinput sensitivity metric was introduced in  to evaluate
the impact of model uncertainties on robot behavior. By
designing an optimized feedforward reference trajectory that
minimizes these sensitivity metrics, robustness against model
uncertainties is inherently embedded in the reference trajectory
This approach has been applied to UAVs  and quadrotors
[8, 48], providing a trajectory planning and control frame-
work that considers statetorque limits and obstacle avoidance.
Recent developments have extended this method to robotic
manipulators . However, this work only considers a narrow
range of payload parameters [41, Section IV] and has not yet
been integrated with collision avoidance.
III. PRELIMINARIES
This section establishes the mathematical foundations nec-
essary for developing the safe system identification framework.
A. Interval Arithmetic
To handle uncertainty in robot inertial parameters, this paper
employs multidimensional intervals and interval arithmetic.
For vectors in Rn, we first establish notation: xi denotes the
ith component of vector x, and for vectors x, y Rn, we write
x y when xi yi holds for all components i.
Definition 1 (Multidimensional Interval). For vectors x, x
[x, x] : {x Rn  x x x},
where x and x serve as the intervals infimum and supremum,
respectively.
The set of all n-dimensional intervals is denoted as IRn.
For analyzing functions over intervals, we introduce interval
Definition 2 (Interval Evaluation). For a function f : Rn
Rm and interval [x, x], the interval evaluation is defined as:
B. Robotic Manipulator Model and the Environment
1) Dynamics Parameters: For a fully-actuated robotic sys-
tem with n joints, let q : [0, ) Q denote the generalized
space. For convenience, we let Nq  {1, . . . , n}. The sys-
tems behavior is characterized by its dynamics parameters,
parameters and friction parameters. The inertial parameters
ip R10n describe the mass properties of each link j:
where mj represents mass, [px,j  mj, py,j  mj, pz,j  mj]
encodes the first moments of mass, and the remaining six com-
ponents define the inertia tensor. Here, pj  [px,j, py,j, pz,j]T
represents the center of mass for link j {1, . . . , n}. The fric-
tion parameters f R4n capture joint friction characteristics:
where these components model static friction, viscous friction,
transmission inertia, and bias for each joint j.
This work addresses the identification of end-effector dy-
namics parameters, including attached payloads, while ac-
counting for uncertainties in the complete robotic system. The
dynamic parameters naturally partition into two components:
the end-effector parameters e R10 and the remaining
robot parameters r R14n10. In practical applications,
our objective extends beyond point estimates to establishing
conservative bounds on the end-effectors dynamic parameters
that provably contain the true parameters. This challenge is
compounded by uncertainties in the base robots parameters,
leading to the following assumption:
Assumption 3 (Dynamics Parameter Bounds). The robot
dynamic parameters excluding the end-effector, r, lie within
a known finite interval [r] containing the true parameters
r. Furthermore, a nominal estimate r,0 [r] of these
parameters is available.
This assumption aligns with practical robotics applications, as
manufacturers typically provide baseline kinematic and inertial
parameters for each robot link, including the unloaded end-
effector. Friction parameters can be characterized through es-
tablished methods when the robot operates without a payload,
following approaches detailed in  and . The interval
bounds [r] can then be constructed by expanding around
the nominal parameters r,0 to account for manufacturing
uncertainties.
2) Equation of Motion: The classical equation of motion
takes the form:
H(q(t), )q(t)  C(q(t), q(t), ) q(t)  g(q(t), )
where H(q(t), ) Rnn is the positive definite inertia
mass matrix, C(q(t), q(t), ) Rnn is the Coriolis matrix,
g(q, ) Rn is the gravitational force vector, and (t) Rn
is applied joint torques all at time t. The friction model
F( q(t), q(t), ) Rn, follows [19, (2)]:
F( q(t), q(t), )  Fc sign( q(t))
Fv q(t)  Ia q(t)  ,
where Fc Rn is the static friction coefficients, Fv Rn is
the viscous friction coefficients, Ia Rn is the transmission
denotes the Hadamard product. In addition to this model, we
assume that the robot must satisfy several limits.
Assumption 4 (Workspace and Configuration Space). The
robots jth joint has position and velocity limits given by
for all j Nq, respectively. During online operation, the
robot has encoders that allow it to measure its joint posi-
tions and velocities. The robots input  has limits given by
The classical equations of motion (5) can be reformulated
using a momentum-based approach, which offers practical
advantages for system identification:
Theorem 5 (Momentum-Based Dynamics [31, (5)]). For a
robotic system with dynamics described by (5), define the
system momentum for any time t as:
p(q(t), q(t), )  H(q(t), ) q(t).
p(q(t), q(t), )  CT (q(t), q(t), ) q(t) g(q(t), )
and for any time interval [t1, t2] with 0 t1 < t2, the change
in momentum satisfies:
(CT (q(t), q(t), ) q(t) g(q(t), )
F( q(t), q(t), )  (t))dt,
This momentum-based dynamics formulation provides two
key advantages: it eliminates the need for acceleration mea-
and it expresses the dynamics in an integral form that filters
measurement noise.
3) Environment: We begin by defining obstacles:
Assumption 6 (Obstacles). The transformation between the
world frame of the workspace and the base frame of the robot
is known, and obstacles are expressed in the base frame of
the robot. At any time, the number of obstacles nO N
in the scene is finite (nO < ). Let O be the set of all
obstacles {O1, O2, . . . , OnO}. Each obstacle is bounded and
static with respect to time. The manipulator has access to a
zonotope overapproximation  of each obstacles volume
in workspace.
The manipulator is in collision with an obstacle if FOj(q(t))
for any j
Nq or i {1, . . . , nO}, where
FOj describes the forward occupancy of the jth link of the
manipulator. This work is concerned with planning and control
around obstacles while performing system identification, not
perception of obstacles. As a result, we have assumed for
convenience that the robot is able to sense all obstacles in
the workspace.
C. Dynamics Regressors
To enable system identification of the dynamics parameters
, we introduce two regressor formulations that each expose
the linear relationship between system dynamics and these
parameters. These regressors provide different perspectives on
the system dynamics and serve distinct purposes in controller
design and system identification.
Theorem 7 (Standard Dynamics Regressor [12, (12)]). For
any time t, the left hand side of the classical equation of
motion (5) can be expressed as a linear function of the dynamic
W(q(t), q(t), q(t))  (t).
We refer to W(q(t), q(t), q(t)) Rn14n as the standard
dynamics regressor .
With this linear relationship, a least squares problem can be
formulated based on (10) to identify the dynamic parameters
[19, (9)]. The momentum-based dynamics (Theorem 5) pre-
serves the similar linear relationship.
Theorem 8 (Momentum-Based Regressors [31, (8)] and [47,
Appendix]). The momentum dynamics admit two specialized
regressors for any time t:
I. The system momentum (9) can be expressed as:
p(q(t), q(t), )  Wm(q(t), q(t)),
where Wm(q(t), q(t)) Rn14n is the momentum re-
gressor.
II. The momentum derivative (8) without torque input can
be expressed as:
CT (q(t), q(t), ) q(t) g(q(t), ) F( q(t), q(t), )
Wc(q(t), q(t)) Ia q(t),
where Wc(q(t), q(t)) Rn14n.
Combining these regressors yields the integral form for t2 >
(Wm(q(t2), q(t2)) Wm(q(t1), q(t1)))
Wc(q(t), q(t))dt
Ia ( q(t2) q(t1))
(13) to identify the dynamic parameters [31, (16)]. However,
in this instance, one can rely on just position and velocity
measurements rather than acceleration measurements. Because
this work focuses on identification of the end-effector, we
separate the regressors into two parts. In other words, we
decompose Wm into two components, Wm,r(q(t), q(t))
Rn(14n10) and Wm,e(q(t), q(t)) Rn10, where Wm,r
corresponds to the columns of Wm associated with r and
We similarly decompose Wc into Wc,r and Wc,e.
D. Physical Consistency Constraints and Parameterization
Using the regressors described in the previous subsec-
as a linear regression task. However, to ensure the physical
consistency of the inertial parameters of each link of the
. These constraints, also known as LMI constraints and
defined in Definition 15, require that the pseudo-inertia matrix
(31), which encodes the inertial parameters of a robot link,
be positive-definite. Consequently, the system identification
problem becomes a constrained optimization problem [40,
(20)], where physical consistency is explicitly enforced.
An alternative approach to enforcing positive-definiteness
is to utilize the Cholesky decomposition of the pseudo-inertia
matrix . Specifically, this structure of ip,j can be fully
described by
where the log-Cholesky parameters  R10 are defined as
and the mapping P : R10 R10 is given by
s14s12  s24ed2
s14s13  s24s23  s34ed3
s12s13 s23ed2
Further details regarding this formulation and its properties are
provided in Appendix A.
IV. ROBUST, ONLINE IDENTIFICATION FOR PAYLOADS
This work focuses on the identification of the inertial
parameters of the end-effector link, including the payload
using the model and assumptions described in Section III-B.
The rest of the section discusses how to accurately estimate
true e through a system identification process.
A. System Identification Problem Formulation
This subsection develops the mathematical framework
for identifying end-effector parameters from measurement
data. The approach leverages momentum-based dynamics and
builds toward an optimization problem that ensures physical
consistency.
Definition 9 (Measurement Data). For system identification,
we consider N sequential measurements of the robot state,
collected at times ti 0 for i 1, . . . , N that we refer to as
the measurement data:
Using this measurement data and the momentum regressor
described in Theorem 8, one can prove the following corollary:
Corollary 10 (Momentum-Based Parameter Identification).
Let h N denote the forward integration horizon. If
one applies Forward Euler Intergration, then the momentum
dynamics over interval [ti, tih] yields a linear relationship
with respect to the end-effectors dynamics parameters:
where the regressor matrix Yi:ih captures the end-effector
and Ui:ih describes the rest of the systems dynamics:
Ia ( q(tih) q(ti))
(tj)(tj1 tj).
By applying this corollary, one can show that the system
identification problem can be formulated as the solution to
an optimization problem when there is no uncertainty in the
robot dynamics:
Theorem 11 (Uncertainty-Free System Identification). Let
h N denote the forward integration horizon, suppose
that measurement data was generated by the system dynamics
while satisfying forward Euler Integration, and suppose that
the robots dynamic parameters excluding the end-effector are
known exactly and are equal to r,0. Let the observation matrix
Y be defined as follows:
Y(q1:N, q1:N) :
Y1(Nh1)h:1Nhh
and let the observation response U be defined as follows:
U1(Nh1)h:1Nhh
where Nh  N
h is the total number of integration steps.
Consider the following optimization problem:
eR10Y(q1:N, q1:N)P(e) U(q1:N, q1:N,  1:N, r,0),
where P is the Log-Cholesky parameterization defined in
(16). Let
e denote any local minimizer to this optimization
problem and let
e), then Y(q1:N, q1:N)
the presence of no uncertainty, one can formulate the system
identification problem as:
Y(q1:N, q1:N)e U(q1:N, q1:N,  1:N, r,0)
LMI(e) 044,
where have applied Definition 15 and Corollary 10. The result
then follows by applying Corollary 17.
The aforementioned Theorem makes several assumptions
that make its practical application challenging. First, as men-
tioned in Section III-B, usually the robots dynamic parameters
excluding the end-effector are not known exactly. Second, the
measurement data may not be noise free. Finally, the mea-
surement data may not be generated by performing Forward
Euler Integration. The next subsection describes how we deal
with the first two challenges while generating a conservative
estimate of the end-effectors dynamics parameters.
B. Interval Bound Estimation via Perturbation Analysis
To construct a conservative bound on the end-effectors
dynamics parameters, we begin by making the following
assumptions regarding the noise in the measurement:
Assumption 12. The joint position and velocity measurements
are perfectly accurate. The torque measurement is noisy, but
its uncertainty can be bounded by an interval vector that we
denote by [ 1:N] IRNn.
To understand why this assumption is reasonable, recall that
the joint position and velocity of robotic arms are usually
captured by optical encoders . The measurement error for
such sensors arises due to the resolution of the coded disk
inside the sensor [24, Section 2.4]. The noise in such sensors
is small in modern robots [32, Section IV]. On the other hand,
the torque sensor is usually based on electrical and optical
techniques  that can introduce a non-negligible error. As
a result, our system identification techniques focus on dealing
with the measurement error of the torque sensor  1:N and the
uncertainty associated with the dynamics parameters of the
robot r,0 (excluding the end-effector).
The goal of this subsection is to understand how these
various forms of uncertainty impact the system identification
process. Using the aforementioned assumption, we simplify
our notation to focus on this objective. We concatenate the
variables  1:N and r,0 that affect the estimation and denote
this as a measurement vector m RNn14n10. We denote
the uncertainty associated with this measurement vector by
[m] IRNn14n10, which can be computed by applying
Assumptions 3 and 12. Because the focus of this subsection is
understanding how uncertainty in this measurement vector im-
pacts the estimation of the end-effectors dynamics parameters,
we denote the observation matrix by Y and the observation
response matrix by U(m).
Using these definitions, we can conservatively bound the
end-effectors dynamics parameter estimates that one generates
by applying Theorem 11:
Theorem 13. Let
e(m) be any local minimizer to (25). Let
e(m)  P(
e(m)), where P is the Log-Cholesky parame-
terization defined in (16). Then the true dynamics parameters
of the end-effector satisfy the following inclusion
The proof to Theorem 13 and the formula for
m (m) are
provided in Appendix C.
Algorithm 1 describes how to perform system identification
using Theorem 13 given data and an initial estimate for the
dynamics parameters of the robot excluding the end-effector.
Note that the output of the algorithm does not require an initial
estimate of the dynamics parameters of the end-effector. The
algorithm outputs an estimate for the dynamics parameters of
the entire robot along with a conservative interval-based bound
on the dynamics parameters of the entire robot.
V. PROVABLY-SAFE LOCALLY EXCITING TRAJECTORY
GENERATION
The objective of this paper is to perform system identi-
fication during online operation while ensuring safety. The
previous section describes how to apply optimization to the
collected data to conservatively identify the dynamics param-
eters of the end-effector. However, it does not describe how
to collect the data in a safe manner. To solve this problem,
this paper relies on Autonomous Robust Manipulation via Op-
timization with Uncertainty-aware Reachability (ARMOUR)
, which is an optimization-based motion planning and
control framework that can ensure the safety of synthesized
Algorithm 1 (0, [])  SysID(q, q, , r,0, [r], h, [m])
e(m) P((m))
m ([m])([m] m) using Theorem 13
trajectories even in the presence of model uncertainty. This
section provides a brief overview of ARMOUR and how it
must be modified to design trajectories that can make the
identification of the true dynamics parameters of the end-
effector occur more rapidly.
A. An Overview of ARMOUR
ARMOUR plans safe trajectories in a receding horizon
fashion that minimize a user-specified cost. To accomplish this
trajectories that are chosen from a prespecified continuum of
k K. During each planning iteration, ARMOUR selects a
trajectory parameter that can be followed without collisions
despite tracking error and model uncertainty while satisfying
joint and input limits. To ensure that ARMOUR is capable
of planning in real time, each desired trajectory is followed
while the robot constructs the next desired trajectory for
the subsequent step. Next, we summarize how ARMOUR
accomplishes this goal by selecting a feedback controller and
a planning time and describing what trajectory optimization
problem it solves.
1) Feedback Controller: ARMOUR associates a feedback
control input over a compact time interval T  [0, tf] R
with each trajectory parameter k K. Here K represents a
parameterized space that includes a variety of behaviors of the
robot. This feedback control input is a function of the nominal
inertial parameters 0, the interval inertial parameters [], and
the state of the robot; however, it cannot be a function of
the true inertial parameters of the robot because these are not
known. To simplify notation, we denote the feedback control
input at time t T under trajectory k K by (t; k).
Applying this control input to the arm generates an associated
trajectory of the arm. These position and velocity trajectories
are functions of the true inertial parameters. We denote the
position and velocity trajectories at time t T under trajectory
k K under the true inertia model parameters  [] by
q(t; k, ) and q(t; k, ), respectively.
2) Timing: Because ARMOUR performs receding horizon
input and trajectory begin at time t  0 and end at a fixed
time tf. To ensure real-time operation, ARMOUR identifies
a new trajectory parameter within a fixed planning time of
tp seconds, where tp < tf. ARMOUR must select a new
trajectory parameter before completing its tracking of the
previously identified desired trajectory. If no new trajectory
parameter is found in time, ARMOUR defaults to a braking
maneuver that brings the robot to a stop at time t  tf.
3) Online Trajectory Optimization: During each receding-
horizon planning iteration, ARMOUR generates a trajectory
by solving a tractable representation of the following nonlinear
qj(t; k, ) [q
t T,  [], j Nq
qj(t; k, ) [ q
t T,  [], j Nq
j(t; k) [
t T,  [], j Nq
FOj(q(t; k, ))
t T,  [], j Nq
The cost function (28) specifies a user-defined objective, such
as bringing the robot close to some desired goal. Each of the
constraints guarantee the safety of any feasible trajectory pa-
rameter as we describe next. The trajectory must be executable
by the robot, which means the trajectory must not violate the
robots joint position, velocity, or input limits (i.e., the first
three constraints in the optimization problem, respectively).
These constraints must be satisfied for each joint over the
entire planning horizon despite model uncertainty; The robot
must not collide with any obstacles in the environment (i.e.,
the last constraint in the optimization problem). ARMOUR
solves this optimization problem in a provably safe fashion in
real-time despite model uncertainty [28, Lemma 22].
We make one final observation about ARMOUR. Recall that
during receding horizon planning, ARMOUR must select a
new trajectory parameter before completing its tracking of the
previously identified desired trajectory. Note that to do this,
naively one may assume that one needs to know the future
state of the manipulator to compute a trajectory parameter
using ARMOUR. Because there is uncertainty in the system
untenable. Fortunately, ARMOUR does not require knowledge
of the future state of the manipulator to ensure that the robot
stays persistently safe. In fact, to ensure that the manipulator
is persistently safe using ARMOUR in a receding horizon
ARMOUR trajectory parameter [28, Remark 12].
In the remainder of the paper, ARMOUR represents a function
that solves the optimization problem (28), denoted as:
k ARMOUR(kp, O, cost, tp, T, 0, []),
where krepresents the optimal trajectory parameters, and the
inputs specify the previously computed trajectory parameter
trajectory duration T, nominal dynamics parameters 0, and
dynamics parameter bounds []. Note during the first planning
robot instead of kp.
B. Modify Cost Function for Locally Exciting Trajectories
This subsection describes how to design ARMOURs cost
function to generate exciting trajectories which can expedite
the rate at which the dynamics parameters of the end-effector
are identified. To appreciate why this is important, note that
large model uncertainty may require an overly conservative
representation of the forward occupancy while necessitating
larger control effort to ensure safety. This could impede
completing subsequent planning tasks. We illustrate these
challenges with poor system identification in the experiments
as is described Section VI.
By looking at (27), one can determine that the size of [e]
depends on the measurements uncertainties. Besides, the size
of [e] also depends on the inverse of matrix 2J
which depends on the matrix YT Y, as shown in (42) and (43).
which yields a large bound for [e]. As a result, we would like
to generate trajectories for the robot to follow that minimize
the condition number of YT Y. Such desired trajectories are
usually referred to as exciting trajectories. To be more specific,
we consider the 2-norm condition number of YT Y, which
is essentially the ratio between the largest and the smallest
singular values of YT Y [5, (5)].
regressor Y described in (21), it is computationally expen-
sive to optimize the condition number of YT Y because the
gradient of the regressor matrix is required. In this work, we
instead minimize the condition number of the portion of the
Standard Dynamics Regressor (Theorem 7) associated with
the dynamics parameters of the end-effector. Note that this is
the approach taken by most prior work to generate exciting
trajectories [13, 45, 4, 33, 7].
To be specific, consider the following regressor matrix:
We(q(t1; k), q(t1; k), q(t1; k))
We(q(tNs; k), q(tNs; k), q(tNs; k))
where We is the collection of columns corresponding to the
dynamics parameters of the end-effector within (10), ti 0
for i {1, . . . , Ns} are the time instances of each sample of
the desired trajectory, and Ns is the number of samples. To
compute locally exciting trajectories, we set the cost function
in ARMOUR equal to the condition number of W(k).
To see why this works, recall that the original robot dynam-
ics (5) is equivalent to the momentum version of the dynamics
(13) by taking time derivatives on both sides. Hence, W can be
thought of as approximating the time derivative of Y, as they
contribute linearly to (5) and (13), respectively. Unfortunately,
it is non-trivial to analytically prove that minimizing the con-
dition numbers of these two regressor matrices is equivalent.
illustrate that minimizing the condition numbers of these two
regressor matrices generates approximately similar behavior.
C. Provably-safe Online System Identification Pipeline
Algorithm 2 Provably-Safe Online System Identification
0  ARMOUR(q0, O, cost, tp, T, 0, [])
0  NaN, then break
Line 6 executes simultaneously with Lines 7  10
Apply (t; k
j ) to robot for t [tj, tj  tp] and append
and q, respectively
j1  ARMOUR(k
j1  NaN, then break
Else tj1 tj  tp and j j  1
j ) to robot for t [tj, tj  tp]
This subsection describes how to combine ARMOUR with
the cost function described in the previous subsection with
the system identification procedure described in Theorem 13 to
create the provably-safe online system identification algorithm
described in Algorithm 2.
To begin, we assume that the robot has picked up a payload,
which is then rigidly attached to the end-effector of the robot.
We assume that the robot starts at rest from a known initial
specifies a planning time horizon, tp, provides an estimate
of the nominal dynamics parameters of the robot, 0 along
with a conservative interval based bound on the dynamics
parameters of the robot, [], selects a forward integration
horizon h N, and specifies a conservative error bound for
the measurement vector, [m]. Before performing any system
trajectory (Line 2). If no feasible solution is found, then NaN
is returned and the robot does not move (Line 3).
On the other hand if a feasible solution can be found, the
while loop begins. At this point, the previously computed op-
timal trajectory is tracked by ARMOURs feedback controller
and the behavior of the robot is saved in the measurement
varaibles (Line 6). While this is happening the next trajectory
to be tracked is computed by ARMOUR (Line 7) and then
system identification is performed using Algorithm 1 (Line
8). This is then repeated, unless ARMOUR is not able to find
a feasible solution at which point ARMOUR uses the braking
maneuver whose safety was verified in a previous planning
iteration to bring the robot to a stop (Line 12). In practice, the
while loop is terminated if the the size of the interval estimate
does not increase during subsequent iterations.
One can prove that Algorithm 2 generates provably safe
behavior while performing system identification. However,
before proving that result, we make one observation. Recall
that Theorem 13 allows us to estimate conservatively bound
the dynamics parameters of the end-effector without starting
from an initial conservative estimate of these parameters.
using ARMOUR, we must rely on ARMOURs feedback
controller. This controller requires a conservative estimate
of the dynamics parameters of the overall robot to ensure
safe behavior. However, note that generating a conservative
overapproximation of the range of the initial parameters of the
end-effector with payload is not challenging. For example, the
range for mass could be set from 0 to the maximum payload
weight defined by the manufacturer. The center of mass can
also be bounded within the geometry of the end-effector and
the payload. The range of inertia can also be overapproximated
given the range of mass and the center of mass.
Finally by applying [28, Lemma 22] and Theorem 13 one
can prove the following result:
Lemma 14 (Algorithm 2 Generates Safe Motion). Suppose q0
is collision free and [] is an overapproximation that includes
the true dynamics parameters of the robot, then the robot
motion generated by Algorithm 2 satisfies all the limits of the
robot while staying collision-free.
VI. EXPERIMENTS  COMPARISONS
This section describes experiments that we conducted to
evaluate the performance of the proposed algorithm. Our
implementation has been open-sourced1.
A. Robotic Platform
We performed hardware experiments on Kinova-gen3,
which is a 7 degree-of-freedom robotic arm. Encoders and
torque sensors are equipped on all joints. The joint encoder
position resolutions are 0.02 degrees for the first four joints
and 0.011 degrees for the last three. Consequently, this work
ignores the joint encoder measurement error and focuses only
on the torque sensor (Assumption 12). The frequency of
control and data collection on Kinova-gen3 is not constant, but
around 3.5-4 kHz. The robot end-effector (the last link and the
gripper) weighs about 1.28 kg. The maximum payload weight
of Kinova-gen3 is 2 kg for full-range continuous motion and
4 kg for mid-range continuous motion. For safety reasons, in
the hardware experiment, we restrict the payload weight to
less than 4 kg. All elements of Algorithm 2 are implemented
in C and executed on a desktop computer with an AMD
Ryzen Threadripper 7980X CPU and 256 GB RAM.
B. Experiment Settings
We evaluate our method across three hardware experiments:
(a) Five dumbbells are placed on one side of the robot. The
robot must place the lightest dumbbell on a 3D-printed
in ascending order of weight, all while avoiding obstacles
in the environment, particularly with one low obstacle in
the way, as illustrated at the top of Fig. 3.
(b) The same stacking task is repeated with the platform
positioned at 0.50m in front of the robot, particularly with
one high obstacle in the way, as illustrated at the bottom
of Fig. 3.
(c) The robot must pick up the heaviest dumbbell (8lb) and
then follow a trajectory while avoiding obstacles in a
more challenging setting, as illustrated in Fig. 4.
Throughout these experiments, we aim to demonstrate that
our provably-safe online system identification framework is
able to accomplish a variety of complex manipulation tasks
with a higher success rate because it is able to provide
the robust controller with a more accurate model estimate
while guaranteeing safety during the system identification
process. Experiments (a) and (b) evaluate the accuracy of
each method while performing manipulation of a variety of
unknown payloads. Experiment (c) evaluates the accuracy of
trajectory tracking for collision avoidance. Experiment (c)
is the most challenging task because the desired trajectory
is close to the obstacles to minimize the path length. The
dumbbells weigh 4, 5, 6, 7, and 8lb (about 1.81, 2.27, 2.72,
3.18, and 3.63kg, respectively). The robot has no access to
their inertial parameters in prior.
Inertial parameters
nominal e,0
interval [e]
px  m (kgm)
py  m (kgm)
pz  m (kgm)
XX (kgm2)
Y Y (kgm2)
ZZ (kgm2)
XY (kgm2)
Y Z (kgm2)
XZ (kgm2)
TABLE I: The conservative nominal parameters and interval uncertainties of
the end-effector assigned to the planner and the controller at the beginning of
the identification phase, which serve as initial estimates for Algorithm 2 before
identifying each dumbbell. The interval [e] covers the inertial parameters of
the end-effector with any of the 5 dumbbells, while the nominal e,0 lies
around the middle of [e].
C. Comparisons
For the hardware experiments, we evaluate a variety of
comparison methods, summarized in TABLE II. These com-
parisons fall into two main categories.
category
consists
the task directly without an additional identification phase
(wrong, conservative, adap-12, grav-pid). Among
but assumes no payload is attached to the end-effector, while
conservative uses a conservative estimate in TABLE I that
encompasses all possible dumbbells.
The second category includes methods that perform iden-
tification of the payloads inertial parameters before execut-
ing the task (ours, random, adap-12-excit, grav-pid-
oursexcit). The random baseline serves as an ablation
sen trajectories rather than the most exciting ones. The grav-
pid-excit method utilizes a classical approach  based on
Fourier series to generate exciting trajectories, considering
Fig. 3: This figure illustrates a complex pick-and-place task used in the hardware experiment. Five dumbbells are placed on one side of the robot, whose
inertial parameters are unknown to it (first image in both rows). The robot is required to move each dumbbell around the obstacles, place the lightest dumbbell
on a 3D-printed platform in front of it, and stack the remaining dumbbells vertically in ascending order of weight (fourth image in both rows). We design
two experiments with different settings: (a) The 3D-printed platform is positioned 0.25 m from the robot, with one low obstacle in the way, as shown in the
images in the first row. (b) The 3D-printed platform is positioned 0.50 m from the robot, with one high obstacle in the way, as shown in the images in the
second row.
controller
robot model
robot model uncertainties
exciting trajectories
ARMOUR robust
0 from Algorithm. 1
[] from Algorithm. 1
Algorithm. 2
ARMOUR robust
assume no payload at end-effector
conservative
ARMOUR robust
nominal in TABLE I
interval in TABLE I
ARMOUR robust
0 from Algorithm. 1
[] from Algorithm. 1
adaptive
identified by adaptive controller
adap-1-excit
adaptive
identified by adaptive controller
Algorithm. 2
adaptive
identified by adaptive controller
adap-2-excit
adaptive
identified by adaptive controller
Algorithm. 2
grav-pid
gravity compensated PID [37, (6.19)]
assume no payload at end-effector
grav-pid-ours
gravity compensated PID [37, (6.19)]
0 from Algorithm. 1
Algorithm. 2
grav-pid-excit
gravity compensated PID [37, (6.19)]
0 from Algorithm. 1
TABLE II: All comparisons evaluated in the hardware experiments, categorized by the controller type, the robot model used in the controller, the robot model
uncertainties used in the controller, and whether exciting trajectories were used for system identification prior to task execution. Methods marked NA in
the exciting trajectories column skip the identification phase and directly execute the task.
Identify
8 lb dumbbell
Fig. 4: An illustration of the third real-world experiment. The robot is required
to pick up and perform system identification with an 8lb dumbbell and then
follow a trajectory to avoid obstacles.
only velocity and acceleration limits. However, these con-
straints may be insufficient for ensuring safety in terms of
collision avoidance or torque limits when handling unknown
payloads. adap-12-excit applies the adaptive controllers
from [38, 1] while following the same exciting trajectories
as ours before executing the task, allowing the adaptive
controllers additional time to estimate the end-effector inertial
parameters.
D. Implementation Details
1) System Identification Implementation: The system iden-
tification solver (Algorithm 1) is also implemented using Ipopt
. The analytical gradient and analytical hessian are also
provided to improve computational efficiency. The forward
integration horizon h is chosen to be 400, which implies
a forward integration time of 100-120 ms on Kinova-gen3.
The maximum amount of uncertainties over the measurements
[m] is set to 5 maximum uncertainty for both robot
dynamics parameters [r] (without end-effector) and 2.5 for
applied torque measurement .
2) Exciting Trajectory Planner Implementation: The trajec-
tory planner (28) is implemented using Ipopt , an open
source interior point optimizer for nonlinear programming.
The duration of the exciting trajectories tf is chosen to be
3.0 s. The total computation time of the trajectory planner is
limited to tp  1.5 s. Ns  128 samples are uniformly dis-
tributed along the trajectory to formulate the inverse dynamics
regressor W (30). We quit the while loop in Algorithm 2
after generating 4 exciting trajectories, implying a total time
of (4 1)  1.5  3.0  7.5 s during the identification phase.
Algorithm 2 requires initial estimates of the nominal pa-
rameters e,0 and uncertainties [e] of the end-effector inertial
parameters. TABLE I reports the initial nominal parameters
of the identification phase. We select a range for mass that
includes both the robot end-effectors mass and any dumbbells
mass. Assuming the robot consistently picks up the dumbbell
at its center, the center of mass of the end-effector remains
near the z-axis of its inertial frame. Thus, we select a relatively
narrow range centered on 0 for px  m and py  m. For other
inertia parameters, we determine the ground truth using CAD
estimation and select a range that includes the results of all
dumbbells. Note that the distribution that we use in TABLE I
is much wider than that of the existing work [41, Section IV].
For the random comparison, we run a different version
of Algorithm 2. Instead of optimizing for the most exciting
trajectories in line 7, we randomly sample the trajectory
parameter k
j1 in the parameter space K.
3) Trajectory for Executing Tasks: For all three experi-
to follow a pre-defined trajectory to move the payload at a
user-specified terminal location. We compute this trajectory
offline by minimizing the jerk while avoiding obstacles and
satisfying joint and torque limits. This is done by using RAP-
with the estimated 8lb dumbbell model attached to the end-
effector. The fast trajectory spans 2s and consists of two 1-
second piecewise-continuous degree-5 Bezier curves.
E. Results
We repeat all the experiments 5 times using the method pro-
posed in this paper and each of the aforementioned comparison
methods in TABLE II. The results of all the experiments were
consistent across all 5 trials and are summarized in TABLE III.
Only the method proposed in the paper (ours) is able to suc-
cessfully complete all three experiments. For safety reasons,
we only ran grav-pid-excit in simulation because, in contrast
to the trajectories generated by our approach, the trajectories
from  violate safety constraints and torque limits, even
with the lightest dumbbell. The tracking performance and the
commanded torque inputs of placing the dumbbells after the
identification phase are illustrated in Figure 11 for Experiment
(a) and Figure 12 for Experiment (b) in Appendix E.
Figure 5 shows the evolution of the estimated end-effector
mass over time as the robot picks up and places the 4lb
dumbbell in Experiment (b), providing further insight into the
performance of methods that perform system identification of
the payloads inertial parameters before executing the task.
For both ours and random, inertial parameter estimates
are updated only after completing each trajectory during the
identification phase (line 8 in Algorithm 2), due to the receding
horizon nature of their strategy. In contrast, adap-1 and
adap-1-excit continuously update their parameter estimates
Experiment (a)
Experiment (b)
Experiment (c)
fail at 8lb
fail at 8lb
conservative
fail at 8lb
fail at 8lb
fail at 8lb
fail at 8lb
adap-1-excit
fail at 8lb
fail at 4lb
adap-2-excit
fail at 8lb
fail at 4lb
grav-pid
fail at 6lb
grav-pid-ours
grav-pid-excit
fail at 4lb
fail at 4lb
TABLE III: Results of our method and baseline comparisons across three
hardware experiments. Each experiment was repeated five times and returned
consistent results.
from the very beginning of the experiment. Notably, ours is
more accurate while converging faster than all tested methods.
It does this before the execution of the move-and-place task,
which results in a higher success rate across all experiments.
Without overburdening the readers, the results for adap-2
and adap-2-excit are omitted from this figure.
time (sec)
mass (kg)
move and place
adap-1-excit
Fig. 5: This figure illustrates the evolution of the estimated end-effector mass
over time as the robot picks up and places the 4lb dumbbell in Experiment
(b). For both ours and random, we only plot the nominal estimate e,0.
For both ours and adap-1-excit, an additional identification phase (from
4 to 11.5 seconds) is included, during which the robot tracks four exciting
trajectories from Algorithm 2 to identify the end-effector inertial parameters.
In contrast, random follows four randomly generated trajectories during this
phase instead of exciting ones. For adap-1, since the identification phase
is skipped entirely and the robot directly executes the task (i.e., moving and
stacking the dumbbells onto the platform), the identification phase (4-11.5
second) is denoted as a dotted line. We observe that ours achieves more ac-
curate estimation of the end-effector parameters than random, demonstrating
the effectiveness of using exciting trajectories. Additionally, adap-1-excit
benefits from both extended identification time and proper data excitation,
resulting in improved estimation accuracy and thus, a higher success rate in
the experiments compared to adap-1.
Figure 6 reports the interval bound estimates after iden-
tifying the inertial parameters of the end-effector while ma-
nipulating the 4lb dumbbell. Because both our method and
random utilize Algorithm 1 they are guaranteed to generate
conservative interval estimates for all relevant inertial param-
given a conservative measurement noise bound, (27) can
always generate overapproximated bounds that include the
true inertial parameters e. In addition, note that the interval
bounds generated using the proposed method are smaller than
the ones generated by selecting random trajectories for almost
all inertial parameters, which illustrates that the cost function
described in (30) is able to generate exciting trajectories. The
identification results of 5, 6, 7, and 8lb dumbbells can be found
in Appendix E. We also report the condition numbers of the
observation matrix Y corresponding to these results in TABLE
Fig. 6: This figure illustrates the interval bound estimates of the 10 inertial
parameters of the end-effector along with the 4lb dumbbell after the identifica-
tion phase. Note that by following the most exciting trajectories, our method is
able to achieve more accurate results and tighter interval estimates, compared
to random, which does not optimize for the most exciting trajectories.
VII. LIMITATIONS
There exist several limitations in bot
