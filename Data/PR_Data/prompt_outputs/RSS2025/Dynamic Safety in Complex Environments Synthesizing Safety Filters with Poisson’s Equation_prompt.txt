=== PDF文件: Dynamic Safety in Complex Environments Synthesizing Safety Filters with Poisson’s Equation.pdf ===
=== 时间: 2025-07-22 16:07:21.976156 ===

请你只输出如下JSON，所有字段都必须有，且每个“关键词”字段只允许输出一个最核心的最有代表性的中文关键词，要中文关键词，如果是英文关键词就尝试翻译成中文（不能是英文，不能是多个，不能有逗号、分号、空格），否则视为不合格。不要输出任何解释或正文，只输出JSON。
{
  "论文标题": "",
  "研究主题关键词": "",
  "应用场景关键词": "",
  "主要方法关键词": "",
  "创新点关键词": "",
  "主要结论关键词": ""
}
内容：Dynamic Safety in Complex Environments:
Synthesizing Safety Filters with Poissons Equation
Gilbert Bahati, Ryan M. Bena, and Aaron D. Ames.
Department of Mechanical and Civil Engineering,
California Institute of Technology,
AbstractSynthesizing safe sets for robotic systems oper-
ating in complex and dynamically changing environments is
a challenging problem. Solving this problem can enable the
construction of safety filters that guarantee safe control actions
most notably by employing Control Barrier Functions (CBFs).
This paper presents an algorithm for generating safe sets from
perception data by leveraging elliptic partial differential equa-
smooth guidance vector field, which encodes gradient information
required for safety. The result is a variational problem for which
the unique minimizera safety functioncharacterizes the safe
set. After establishing our theoretical result, we illustrate how
safety functions can be used in CBF-based safety filtering. The
real-time utility of our synthesis method is highlighted through
hardware demonstrations on quadruped and humanoid robots
navigating dynamically changing obstacle-filled environments.
I. INTRODUCTION
Deploying robotic systems in real-world environments au-
tonomously requires that they operate in complex, dynamic en-
vironments while avoiding collisions with multiple objects of
arbitrary geometry. Achieving this level of dynamic safety ne-
cessitates a quantifiable description of the safety requirement,
i.e. a functional representation of the environment via a safety
constraint. Additionally, this representation must be integrated
with the dynamics of the system to produce safe inputs, i.e.,
inputs that ensure satisfaction of the safety requirements. To
achieve this, numerous methods for enforcing dynamic safety
constraints have been investigated, including Hamilton-Jacobi
reachability [13], Model Predictive Control [4, 5], Artificial
Potential Fields (APFs) [6, 7], and Control Barrier Functions
(CBFs) . This paper seeks to fuse the synthesis of safety
constraints with controllers that yield safe behaviors, coupling
functional representations of dynamic environments with the
generation of safe controllers.
Safety constraints are typically synthesized using heuris-
tic approaches for simple environments, or through general
methods that are non-constructive. While heuristic methods
work for environments with simple geometries [9, 10], they
struggle when generalized to more complex environments.
functions (SDFs) [1113] have been proposed as a method
for generating safety descriptors in the context of collision
avoidance. However, SDFs possess gradient discontinuities
Fig. 1: Safe set synthesis from perception data via Poissons equation.
Hardware experimental footage:
which present challenges in synthesizing safe controllers.
problem in its own rightmade even more challenging by the
need to couple safety constraints with system dynamics.
Given a description of the environment in the context of
a goal location subject to obstacles, a popular method for
enforcing safe behavior is the APF. Originally introduced in
, APFs are a heuristic technique for achieving dynamic
safety by encoding repulsive gradients on obstacle surfaces
and attractive gradients to a desired goal. This coupling
between the dynamics of the system (via gradients) and
specifications (via attractive and repulsive potentials) allows
for the problem to be framed as one of constructing an
APF. One approach to constructing APFs is to frame them
as solutions to elliptic partial differential equations (PDEs)
[14, 15]. This has been employed in the context of navigation
and path planning [1618] and is useful for complex geometry
. Despite the success of APFs, this method assumes single
integrator dynamics, i.e., a kinematic model. Additionally,
APFs couple goal-reaching (stability) and collision avoidance
(safety), limiting their ability to provide a description of safety
that is independent of control objectives.
A decoupled approach to synthesizing safe controllers for
general nonlinear systems is through CBFs [8, 20]. In this
superlevel set of a function, and this function is a CBF if
there exists inputs that render the safe set forward invariant.
CBFs have been shown to generalize APFs , in that they
decouple safety from stability, and apply to general nonlinear
systems. Specifically, given a CBF, one can synthesize a safety
filter [21, 22] framed as a quadratic program with the stability
objectives as a cost and safety objective as a constraint.
Methods such as [2325] offer a systematic approach for
constructing CBF-based safety filters for robotic systems via
reduced-order models with real-time realizations on hardware.
constructive design of functions encoding safety objectives,
i.e., the synthesis of safe sets and the corresponding CBFs,
remains a challenging task.
In this paper, we show that elliptic PDEs can be used
to synthesize safety functionsfunctional representations of
complex environments that characterize safety. We demon-
strate that the process of constructing safe sets can be formu-
lated as solving a Dirichlet problem for Poissons equation.
In particular, given an occupancy map, we solve Poissons
equation subject to Dirichlet boundary conditions, where the
the boundary conditions encode desired level-set values on
obstacle surfaces. We propose several methods for constructing
the forcing function within Poissons equation, including an
average flux method and a guidance field method  that
provides additional degrees of freedom for defining safety.
The solution has desirable differentiability (i.e., regularity)
synthesis of safety filters.
The key observation of this paper is that safety functions
obtained from Poissons equation can be used to synthesize
CBFs and, therefore, safety filters. The main contributions are
safe sets for complex environments from perception data
via Poissons equation, (2) we illustrate and prove how the
resulting safety functions can be used to synthesize CBF-based
safety filters, and (3) we demonstrate the real-time efficiency
of our approach with hardware experiments on quadruped and
humanoid robots in static and dynamically changing environ-
ments. Importantly, we show that safety function synthesis
(1) can be done in real-time via perception data to enable
safe behaviors (2) on highly dynamic robotic systems (3).
A continuous function  : R R is an extended class K,
) if  is monotonically increasing, (0)
For a function w : Rn R where x 7w(x)
w(x1,    , xn), let Dw denote the gradient and D2w
denote the Hessian. More generally, for k N0, Dkw is
the collection of all partial derivatives of order k. Given
a multi-index   (1,    , n) Nn
0 with   k:
is an open, bounded and connected set with smooth
boundary such that  is the closure of .
Ck() is the set of functions: {w : R
w is k-times
continuously differentiable}.
Ck()  {w Ck()  Dw is uniformly continuous
on bounded subsets of for all  k}, that is, Dw
continuously extends to .
w is k-times contin-
uously differentiable} with the similar respective defini-
tions for Ck(; R>0), Ck(; R0), Ck(; R<0) and vec-
tor or matrix-valued functions Ck(; Rn), Ck(; Rnn).
function spaces: see Appendix A.
II. BACKGROUND: SAFETY-CRITICAL CONTROL
This section reviews safety for nonlinear systems in the con-
text of CBFs. We consider a nonlinear control-affine system:
x  f(x)  g(x)u,
where x Rn is the state and u Rm is the control input.
The function f : Rn Rn denotes the drift dynamics and
locally Lipschitz continuous. A locally Lipschitz continuous
controller k : Rn Rm yields the closed-loop system:
x  fcl(x)  f(x)  g(x)k(x).
Because the functions f, g, and k are locally Lipschitz contin-
any initial condition x(0)  x0 Rn, there exists a unique
continuously differentiable solution t 7x(t) on the maximal
time interval Imax(x0)  [0, tmax(x0)) .
A. Control Barrier Functions and Safety Filters
The concept of safety can be formalized by requiring that
all system trajectories t 7x(t) remain within a set S Rn,
characterized by the notion of forward invariance.
Definition 1. (Forward Invariance) A set S is forward invari-
ant with respect to (2) if for every initial condition x0 S,
the resulting trajectory t 7x(t) S for all t Imax(x0).
We consider a system safe with respect to a user-defined
safe set S if S is forward invariant. In particular, we consider
safe sets defined as the 0-superlevel set of a continuously
differentiable function hS : Rn R:
x Rn  hS(x) 0
Forward invariance of such sets can be guaranteed by
Nagumos theorem , which requires the derivative of hS
along the trajectories of the closed-loop system (2) to be non-
negative on the boundary of S, that is:
hS(x)  DhS(x)  f(x)
Lf hS(x)
DhS(x)  g(x)
for all x S. This ensures that on the set boundary S,
the vector field of (2) points towards the interior of S or is
tangent to S. The condition DhS(x)  0 when hS(x)
0 is necessary to ensure the existence of a locally Lipschitz
continuous controller k for the system (2) that satisfies (4).
CBFs are a tool for synthesizing controllers and safety filters
that enforce the safety of the system (1) on S.
Definition 2. (Control Barrier Function (CBF) ) Let S
Rn be the 0-superlevel set of a continuously differentiable
function hS : Rn R satisfying DhS(x)  0 when hS(x)
0. The function hS is a Control Barrier Function (CBF) for
(1) on S if there exists  Ke
such that for all x Rn:
hS(x, u)LfhS(x)  LghS(x)u > (hS(x))
Given a CBF hS and , the set of feasible point-wise control
values satisfying (5) is given by:
u Rm  hS(x, u) (hS(x))
such that any locally Lipschitz controller x 7k(x)
KCBF(x) enforces the forward invaraince of S , estab-
lishing the safety of (1) on S. Given a desired (potentially
unsafe) nominal controller knom : Rn Rm, the following
optimization-based controller filters knom by minimally ad-
justing it to the nearest safe action:
k(x)  arg min
u knom(x)2
(Safety-Filter)
LfhS(x)  LghS(x)u (hS(x)).
The next subsection discusses systems with properties that
enable a systematic approach to constructing CBFs.
B. Outputs and Relative Degree
In this paper, we focus on systems for which safety spec-
ifications are expressed using a set of desired outputs. To
facilitate the construction of CBFs, we recall the notion of
relative degree, which represents the layer of differentiation
at which the control inputs affects the outputs.
Definition 3 (Relative Degree r ). A function y : Rn
Rp has relative degree r N for (1) if:
fy(x) 0,
rank(LgLr1
y(x))  p,
Given an output y with relative degree r, we define a new
set of partial coordinates:
y(r1)(x)
where y(r)  dry
f y(x)  LgLr1
where (11) is an input to (10). When y has relative degree r,
the controller w  k(y) designed for (10) can be transferred
back to the controller for (1) as follows1:
u  LgLr1
k(y(x)) Lr
This partial coordinate transformation is a full coordinate
transformation if pr  n. The output dynamics (10) are a
chain of integrators, allowing for using techniques such as
[24, 25] and [30, 31] to construct CBFs, including for classes
of systems with outputs of nonuniform relative degree.
Given an output y, the success of the techniques in [24, 25,
a safety specification for a desired safe set C. For simple
characterize the safe set with a smooth function h; however,
for more complex environments, such as those with multiple
obstacles of aribtrary geometry, obtaining a single smooth h is
challenging without introducing excess conservatism . In
what follows, we demonstrate how Poissons equation can be
leveraged to overcome these challenges and generate a single
smooth function h for environments with arbitrary geometries.
III. SAFE SET SYNTHESIS VIA POISSONS EQUATION
In this work, we consider systems with spatial safety
Our primary focus is the construction of safe sets purely in
spatial coordinates (13); therefore, our construction is geomet-
ric and independent of system dynamics (1). Given occupancy
data in the coordinates (13), we consider an open domain
R3 representing unoccupied regions, with its boundary
corresponding to obstacle surfaces. Our goal is to design
a safe set defined as the 0-superlevel set of a safety function.
Definition 4. (Safety Function) Let y  (x, y, z) R3
represent three-dimensional spatial coordinates. We call a
function h : R3 R a safety function of order k on
if h is k-times differentiable, Dh(y)  0 when h(y)  0
and the 0-superlevel set of h defines a safe-set C satisfying:
y  h(y) 0
set with piecewise smooth boundary . That is, we assume
1Condition (8) implies the right psuedo-inverse LgLr1
y(x) exists.
to be a finite union of closed, smooth obstacle surfaces:
where each i is an open, bounded and connected set defining
an obstacle interior, and i is its smooth boundary. The
term nobs denotes the total number of obstacles, i.e., isolated
occupied regions, in the environment.
We propose a method for synthesizing safe sets from envi-
ronmental boundary data by solving a boundary value problem
for Poissons equation, a second-order linear elliptic partial
differential equation (PDE). In particular, we consider safe
sets characterized by safety functions which satisfy Poissons
equation subject to Dirichlet boundary conditions:
h(y)  f(y)
z2 is the Laplacian and f : R
is a given forcing function. From classical elliptic regularity
stated in Theorem 4 in Appendix A, a sufficient condition for
(16) to admit a twice continuously differentiable solution, h
C2(), is that f is Holder continuous, that is, f Ck,() for
some k N0 and 0 <  < 1. Furthermore, a smooth forcing
to (16). To assist the reader, we review key concepts from
elliptic PDEs, including Holder continuity, in Appendix A.
From the weak minimum principle in Theorem 3, a function
h C2() attains its minimum on if it is superharmonic,
i.e., h(y) 0, in the interior . To ensure h is not a constant
h(y) < 0 holds in . Then, from Hopfs lemma, (Lemma 2),
the outward directional derivatives on the boundary satisfy:
Dh(y)  n(y) < 0 on .
A function h satisfying h(y) < 0 in can be obtained by
solving (16) with a negative forcing function, i.e., f(y) < 0 for
all y . In particular, if f : R<0 is Holder continuous
Theorem 1. (Poisson Safety Function) Let be an open,
bounded and connected set with piecewise smooth boundary
. Suppose f Ck,(; R<0) for some k N0 and
(0, 1). Then the solution h : R to the Dirichlet problem
for Poissons equation (16) is a safety function of order 2k.
regularity presented in Theorem 3 and 4 respectively, we have
that f Ck,(; R<0) implies that h C2k,(; R0),
which defines a compact 0-superlevel set satisfying (14) with
piecewise smooth as in (15), the interior sphere property i.e.,
Def. 6 in Appendix A holds. Thus from Hopfs lemma, we
have that (17) holds, implying Dh(y)  0 when h(y)  0.
The above theorem provides conditions to ensure a solu-
tion h to (16) characterizes safe regions. Unsafe regions are
typically defined by regions where h(y) < 0. By letting i
(i.e., occupied region corresponding to the interior of each
obstacle) define an unsafe region, one can verify from the
weak maximum principle in Theorem 3, that solving Poissons
equation (16) on i with f Ck,(i; R>0) ensures the
solution h is subharmonic in each i, resulting in h(y) < 0
for all y i. Combining this with Theorem 1, the safety
function characterizes both safe and unsafe regions.
Remark 1. (Smooth Boundary) By assuming a smooth bound-
ary in (15), where each i is smooth for all i, any sharp
corners on obstacles are assumed to be smoothed out. This
ensures that the regularity properties (see Appendix A) in
the interior of the domains i and can be extended to the
boundaries. Our results still hold for non-smooth boundaries,
provided that they satisfy the interior sphere property in
Def. 6 with the appropriate (possibly non-classical) definition
of the boundary derivative [3236]. We present Theorem 1
for smooth boundaries to avoid technical details beyond the
scope of this paper, and (as will be discussed later) due to the
observed benefits in the performance of synthesized safety-
filters near smooth corners.
In summary, the differentiability (i.e., regularity) of f in
(16) ensures that the solution h to (16) inherits the desired
regularity properties which provide the necessary differentia-
bility guarantees for h. Furthermore, the negativity of f in
guarantees that h characterizes the safe set (14) and satisfies
(17), by enforcing the superharmoniticity of h in . Thus,
h is a safety function on with guaranteed differentiability.
The next section provides methods of constructing forcing
functions that satisfy these conditions, facilitating the practical
implementation of the resulting safety functions.
IV. FORCING FUNCTION CONSTRUCTION
In this section, we present methods of designing forcing
functions that ensure the solution to the boundary value
problem for Poissons equation (16) is a safety function.
A. Direct Assignment
1) Distance Metric: An approach to constructing a Holder
continuous forcing function f C0,(; R<0) for  (0, 1)
is based on the distance to obstacles:
dist(y, )
yobsy yobs,
dist(y, )
dist(y, )
for all y . One can verify that (19) is Holder continuous
on by leveraging [37, Proposition 1.1.2]. Following from
Theorem 1, the forcing function (19) yields a safety function
h C2,(; R0) that lacks orders of differentiability higher
than 2. This limitation makes this choice of f unsuitable for
control design for systems with outputs of relative degree
r > 1 as defined in Def. 3.
Fig. 2: [From left to right] Solutions to Poissons equation (16) with the following forcing functions: [left] a Holder continuous function
(19) with   0.1; [mid-left] an average flux forcing function with b  1 in (23); [mid-right] a smooth forcing function (29) constructed
using the guidance field (26) under a uniform boundary flux b(y)  1 for all y ; and [right] the same forcing function with a
non-uniform boundary flux b : R<0, allowing different flux values across regions of the boundary, corresponding to different obstacles.
2) Constant Value: An alternative, straightforward choice
of a forcing function is a constant negative value f R<0,
which guarantees that h C(; R0). However, this ap-
proach indirectly assigns arbitrary flux values (encoding the
magnitude of repulsive gradients) on without precise
knowledge of the resulting flux magnitude. The notion of flux
is detailed in Appendix A. While this approach yields the
desired safe set properties (14), it may be beneficial to relate
the flux on to the geometric properties of the domain.
One way to achieve this is by designing a forcing function that
enforces a desired average flux on . To do this, we leverage
Gausss divergence theorem presented in Appendix A, which
dictates that all forcing functions must satisfy2:
Dh(y)  n(y) dA,
where dV : dxdydz denotes the volume element of and
dA is the surface element of . Let b R<0 denote the
desired average flux on , defined as:
Dh(y)  n(y) dA,
where Area() denotes the surface area of , representing
the surface area of all obstacles. Assuming f R, we define:
Dh(y)  n(y) dA
b Area()
where Vol() denotes the volume of the domain . It then
follows that the forcing function (23) is a constant negative
value that yields a smooth solution, h C(; R0), to
(16) with the average flux b on . Fig 2 shows the resulting
Poisson safety functions leveraging the above methods.
2Note is the 0-level set, so Dh is normal (i.e., perpendicular) to .
Fig. 3: Smooth guidance field generation via Laplaces equation (26).
[left] Boundary conditions v  bn encoding the desired negative flux
on obstacle surfaces; and [right] solution to Laplaces equation for
each component in v  (vx, vy).
B. Indirect Assignment  Variational Approach
Another approach of constructing a forcing function is by
designing a guidance vector field v : R3, which
encodes the desired flux on , and seeking a function h
whose gradient approximates v in . Specifically, let h be the
minimizer of the cost functional:
2Dh(y) v(y)2 dV,
among all functions h : R with prescribed boundary
conditions h(y)  0 on . This infinite-dimensional min-
imization problem provides a solution h whose gradient is
the least-squares approximation to the guidance field v. A
twice differentiable minimizer of (24), h C2(), satisfies
the associated Euler-Lagrange equation, given by:
h(y)   v(y)
where f(y)  v(y) denotes the divergence of the guidance
on Euler-Lagrange equations and the fact that solutions to
Poissions equation can be realized as unique minimizers of
variational problems in Appendix A, specifically, Theorem 5.
A smooth guidance field, v C(; R3), implies  v
C() in (25), and following from Theorem 4, this leads to
a smooth solution, h C(). We obtain a smooth guidance
field by solving Laplaces equationthe homogenous version
of Poissons equation. Specifically, consider the vector field
v  (vx, vy, vz) : R3, with each component satisfying
Laplaces equation subject to Dirichlet boundary conditions:
vi(y)  0
vi(y)  b(y)ni(y)
for i {x, y, z}. The terms nx, ny, nz represent the compo-
nents of the outward unit normal vector n  (nx, ny, nz) :
R3 such that v(y)  b(y)n(y) on . The term
encoding the desired boundary flux:
v(y)  n(y) dA
b(y)n(y)  n(y) dA
b(y) dA.
Following from the mean value theorem, solutions to (26) are
v C(; R3)
v(y)  b(y)n(y) on
Fig. 3 depicts an example a guidance field generated via (26).
Due to the decoupled nature of its components, v may not
be conservative, meaning it may not correspond to the gradient
of a scalar potential function [39, 40]. To address this, (25)
ensures we find h C() whose gradient best approximates
v by using the divergence,  v, as the forcing function. The
boundary flux error is given by Dh(y)  n(y) b(y) on .
for all y , which is sufficient to guarantee h(y) > 0 in .
To remedy this, we introduce the forcing function3 :
1  ev(y)
with  > 0. This defines a smooth, negative forcing function
f C(; R<0), which yields a solution h C(; R0)
to (16) as established in Theorem 1. It further follows from
Theorem 5 that this solution is the unique minimizer of the
variational problem (dropping dependency on y for brevity):
Example safety functions generated with the approach are
depicted in Fig. 2. Our next goal is to establish the forward
invariance of the safe set C, characterized by the safety
function h as in (14), for time-parameterized curves t 7y(t)
describing the evolution of a dynamical system.
3Inspired by the softplus function, this preserves the smoothness and
negativity of f, ensuring the solution to (16) remains superharmonic in .
V. SAFETY-CRITICAL CONTROL VIA POISSON SAFETY
FUNCTIONS
In this section, we show that a safety function h constructed
from Theorem 1 can be used to define a CBF. We establish
that C can be rendered forward invariant for first-order systems
while a subset of C can be rendered forward invariant for
high-order systems. We focus on systems defined by integrator
chains as (10), with the input appearing at the last layernote
that our method can be extended to classes of systems with
outputs of nonuniform relative degree, such as those in [24,
25]. For the spatial outputs (13), we have p  3 in (10). We
begin by discussing forward invariance for first-order systems.
A. First Order Systems
Consider the following system of relative degree r  1:
where the state y : y R3. The following proposition
establishes the forward invariance of C with respect to (32).
Proposition 1. (Forward Invariance for First-Order Systems)
Let R3 be an open, bounded and connected set with
piecewise smooth boundary . Consider the system (32) and
a safe set C defined as the 0-super level set of a function
there exists a locally Lipschitz continuous controller w  k(y)
such that for any  > 0:
h(y)  Dh(y)  k(y) h(y)
implies that h C2,(; R0) defining a safe set C  as
described in (14). Furthermore, we have that Dh(y)  0 when
h(y)  0, that is, when y  C. Given the system (32)
with initial condition y(0)  y0 C, the following locally
Lipschitz continuous controller [41, 42]:
k(y) : k(y, h(y), Dh(y))
(h(y), Dh(y)2)Dh(y)
with  > 0 satisfies (33) for all y C such that when
h(y)  0, we have k(y)
2 Dh(y)yielding in h(y)
2 Dh(y)2 > 0. Thus, from Nagumos theorem, the set C
is a rendered forward invariant and h is a CBF for (32).
B. CBF Backstepping
Given a safety function h satisfying Theorem 1, we now
establish safety for high-order systems (10) of relative degree
r 2 by leveraging finite-dimensional backstepping to con-
struct a CBF . CBF backstepping is a design technique that
recursively constructs auxiliary controllers for each layer of the
full-order system dynamics, providing a systematic approach
to designing CBFs for linear systems modeled as integrator
chains . For convenience, we begin by considering systems
of relative degree r  2. These results can be extended to
relative degree r N, as demonstrated in Appendix B.
Consider the state y
R6 and dynamics:
satisfying Theorem 1. Define the following function:
hB(y)  h(y)
y k1(y, h(y), Dh(y))2,
with 1 > 0 where k1 C2(R3 RR3; R3) is an auxiliary
controller satisfying:
Dh(y)  k1(y, h(y), Dh(y)) > h(y),
for all y C and some  > 0 such as (34). The 0-superlevel
set of the function hB defines the shrunken set:
y R6  hB(y) 0
Since hB(y) h(y) for all y C, we can ensure that all
trajectories that start in CB also remain in C by rendering CB
safe. This is possible because y CB C implies that y
k1(y, h(y), Dh(y)) and therefore, the condition (37) ensures
that h(y, y)  Dh(y)  y > 0 at this point y. Taking the time
derivative of (36) yields:
hB(y, w)  Dh(y)  y 1
where k1()  k1
y () y : 1(y, y, Dh(y), D2h(y)) with:
i{x,y,z}
To construct a locally Lipschitz continuous controller w
k(y) that enforces safety, we require the second partial
derivatives of h, denoted by the Hessian D2h to be Lipschitz
continuous i.e., D2h C0,1(; R33). The following lemma
establishes conditions for this property to hold.
Lemma 1. (Lipschitz Regularity of Drh) Let r N and f
solution h C2k,() to (16) satisfies Drh C0,1(; R3r).
partial derivatives Drh C2kr,(; R3r). For the case
when r  k  1, we have that C1, C0,1. Thus, it follows
that C2kr, C0,1 for r k  1, which implies that Drh
is Lipschitz continuous on the set .
The above lemma relies on the inclusion of continu-
ously differentiable functions in Lipschitz continuous function
spaces . Leveraging the above result, it follows from [43,
Theorem 4] that there exists a locally Lipschitz continuous
controller that renders CB forward invariant. Specifically, if
y0  (y0, y0) CB, then y(t) CB for all t Imax(y0),
Remark 2. (Holder Regularity and Control Design) The
results in [24, 43] rely on the assumption that h is smooth,
i.e., h C(), which holds if f C() as established in
Theorem 4. In this paper, we relax this assumption and only
require Holder continuity, h C2k,(), therefore, allowing
for a wider range of methods for constructing forcing functions
that may not be smooth but are instead Holder continuous,
f Ck,(). This relaxed regularity assumption motivates
the use of Lemma 1 to guarantee the existence of a Lipschitz
continuous controller on .
VI. DEMONSTRATIONS
To demonstrate the proposed algorithms effectiveness in
synthesizing safety filters for autonomous systems in complex
experiments. We solve Poissons equation (16) numerically on
a discrete spatial grid by employing a finite difference scheme,
specifically the Successive Overrelaxation (SOR) method .
A. Simulations: Double Integrator
We define a 2D occupancy map defined by an open,
bounded and connected domain where characterizes
obstacle surfaces, and consider the 2D double integrator model
of the form (35) with state y
We consider the task of stabilizing (35) to a goal position,
from various initial conditions, with a nominal PD controller
knom(y), while avoiding collisions with the obstacle surfaces
on . To achieve this, we consider the solution h to (16) with
the forcing function (29) and construct a CBF via backstepping
(36). Using this CBF, we synthesize a safety filter to adjust
knom to ensure safety. The resultant trajectories for various
initial conditions are depicted in Fig 4. We compare the
behavior of this safety filter to one constructed via an SDF:
dist(y, ),
dist(y, ),
where we also employ backstepping to construct a CBF.
Traditional SDFs have fixed gradient magnitudes, leading
to flat surfaces (i.e., without curvature) in the resulting safety
discontinuous gradients (of opposite sign) within unoccupied
regions of the domain, which, unlike Poisson safety functions,
result in undesirable chattering behavior when employed in
safety filter synthesis. Additionally, Poisson safety functions
constructed using the forcing function (29) and the guidance
field (26) enable the assignment of arbitrary boundary flux
values b via the boundary conditions in (26). Consequently,
different flux values can be specified across regions of the
boundary associated with different obstacles. This provides
the flexibility to manipulate gradients around obstacles, which,
among other benefits, aids in yielding trajectories that avoid
undesired equilibria as demonstrated in Fig. 4.
Remark 3. (Distance Functions via Elliptic PDEs) While
prior work has approximated SDFs using elliptic PDEs ,
often relying on semilinear equations such as the screened
Fig. 4: Double integrator simulations using safety filters synthesized from: [left] Signed Distance Function (40); and [middle and right] the
Poisson Safety Function, constructed with the forcing function (29) with the guidance field (26) where the boundary conditions use [middle]
a uniform boundary flux b(y)  1 for all y and [right] a non-uniform boundary flux b : R<0, assigning different flux values
across regions of the boundary associated with different obstacles. Sharp ridges in the SDF surface introduce gradient discontinuities, which
lead to oscillations in the resulting trajectoriesan issue which does not arise with Poisson safety functions due to their classical regularity
(i.e., differentiability) properties. Furthermore, in contrast to SDFs with fixed gradients, the guidance field promotes the manipulation of
boundary flux values via the assignment of b in (26), enabling the ability to encode gradients customized to specific obstacles, which we
are unable to do with traditional SDFs. This flexibility helps yield trajectories that avoid undesired equilibria i.e., deadlocks, in [right].
Poisson equation [47, Thm 2.3], our method intentionally does
not produce an SDF. Instead, we leverage linear elliptic PDEs
with classical regularity results as established in Theorem 4,
which are critical in the synthesis of safety filters.
B. Hardware Experiments
To demonstrate the practical performance of our proposed
algorithm in synthesizing safe sets, we applied it to several
collision avoidance scenarios using Unitrees Go2 quadruped
and G1 humanoid robots. We leverage a reduced order model
(ROM) hierarchical framework [23, 48] for these platforms
based on (32). These ROMs assume that the robotic system
has a sufficient low-level tracking controller, enabling the
assignment of safe velocity commands without modification
of unique low-level locomotion controllers.
fixed RGB camera and the Meta SAM2  segmentation
algorithm. Next, we generate a 2D occupancy map, buffered
for robot size. Finally, we solve (26) to generate a smooth
guidance field, and, using (29), we solve (16) for the Poisson
safety function. For dynamic environments, we improve the
computational speed of our PDE solver by warm-starting each
PDE solution with the previous safety function, producing
solve times of 0.2 0.3 ms. After considering the entire
processing chain, we update the Poisson safety function h
online at approximately 10 Hz.
We employ this safety function in a CBF-based safety filter
for a single integrator ROM (32) to produce safe velocity
commands that are tracked by a low-level controller. Robot
states are estimated by an OptiTrack motion capture system.
1) Complex Static Environment  Quadruped: For the
first experiment, we constructed a static environment. We
initialized the quadruped at three different starting locations
and commanded it to walk to a fixed goal point. In each case,
the nominal controller attempted to drive the system directly to
the goal without safety considerations. Meanwhile, the CBF-
based safety filter modified these nominal commands. The
results corresponding to this experiment are depicted in Fig 5.
From these results, it is clear that the Poisson safety function
enabled collision avoidance without hindering the nominal
objective. The control inputs (Fig 5 (bottom leftmiddle)) show
how the safety-filtered velocity commands deviated from nom-
positivity throughout the duration of all three experiments,
confirming that the robot never departed from the safe set C.
Fig. 5: Hardware experiments demonstrating Poisson safety functions for safety filtering. [Top Left] A timelapse showing the motion of the
Go2 quadruped during the 25-second tracking experiment, starting from three difference initial conditions (ICs). [Top Middle] The Poisson
safety function constructed from real-time segmented image data. [Top Right] The resultant safe trajectories for each IC. [Bottom LeftMiddle]
The nominal (orange) and CBF safety-filtered (blue) velocity commands, in ms, sent to the robot. [Bottom Right] The evaluated value of
the Poisson safety function over the course of each experiment. This value remains above zero, confirming that safety was maintained.
2) Dynamic
Environment
demonstrate the real-time utility of our approach, we consider
a dynamically changing environment. As mentioned earlier, we
compute the Poisson safety function online at approximately
10 Hz; however, this time we numerically incorporate the
temporal change in h to approximate its time derivative via:
t (t, y) h(tk, y) h(tk1, y)
We commanded a Go2 quadrupedal robot to track a nominal
sinusoidal position reference; meanwhile, we introduced two
obstacles (i.e., a desk chair and a yellow box) into the
environment. By dynamically rearranging these obstacles, we
tested the real-time efficacy of our safety-critical architecture.
Fig 6 shows the dynamic performance.
Examining the value of h during the experiment, it can be
observed that the robot effectively employed its safety filter to
avoid collisions. The value of h remained positive, confirming
that the safe set C was rendered forward invariant.
3) Dynamic Environment  Humanoid: We implemented
an identical safety-critical controller on the G1 humanoid to
show the versatility of our algorithm. We commanded a fixed
position reference and introduced a moving obstacle into the
environment. The results are presented in Fig 6.
During the humanoid experiment, the CBF-based safety
filter was effective in preventing collisions with the dynamic
obstacle; however, the robot experienced minor safety viola-
The difference in performance on the quadruped highlights the
importance of accurate ROMs when designing safety-critical
controllers . In both cases, we filtered velocity commands
(single-integrator 32) to enforce safe set forward invariance.
This is an accurate ROM for the quadruped, as the low-level
locomotion controller effectively tracks velocity inputs with
minimal error. Unfortunately, this ROM is less accurate for the
model mismatch. The lag in velocity tracking manifested in
modest departures from the safe set (i.e., brief moments when
h was negative).
Remark 4. (Real-time Computation) For the hardware exper-
iments in this paper, we consider a 3  3 m2 experimental
NN discretized grid with N  120. We apply a SOR finite
difference scheme , using checkerboard iterations for GPU
parallelization. Parallel SOR iterations scale with
computations per iteration scale with N 2 (N 3 in 3D). On a
GeForce RTX 4070 GPU, we solve the PDE in 0.2 0.3 ms
with 104 residual tolerance.
VII. LIMITATIONS
A fundamental limitation of the proposed algorithm (and
a limitation of all non-predictive safety filters) is that such
safety-critical controllers may introduce undesired equilibria.
These equilibria can manifest as deadlocks, where the sys-
tem becomes trapped by obstacles and fails to achieve nominal
tracking. Such problems are typically solved by introducing a
navigational layer to the nominal controller to avoid regions
Dynamic Experiment: Quadruped
Dynamic Experiment: Humanoid
Fig. 6: Hardware experiments demonstrating dynamic behavior on quadrupedal and humanoid robots. [Top Left] A timelapse showing the
Go2 quadruped successfully avoiding dynamic complex obstacles in real-time. [Bottom Left] The value of the Poisson safety function h
during the experiment. The positivity of h certifies that safety was maintained. [Top Right] A timelapse of the G1 humanoid during a dynamic
collision avoidance demonstration. [Bottom Right] The value of h. Although no collisions occurred, the robot briefly left the safe set C.
in the state-space that produce these undesired equilibria.
Another limitation of the proposed approach is that the
extension of the solution h, defined on , to the unsafe
regions i, via Poissons equation is guaranteed only to be
Lipschitz continuous across safe and unsafe regions (i.e.,
across the boundary). The reason is that solving Poissons
Dirichlet problem results in unique solutions in each region
ensuring h(y)  0 on (hence, continuity across ). As
a result, the directional derivatives from the safe and unsafe
regions are not guaranteed to be equal in magnitude on .
the same sign i.e., positive flux from each obstacle i and
negative flux into the safe region . Thus, if safety violations
enforcing attractivity to the safe set for a single integrator,
but may require a less regular controller  for higher order
systems. One way of obtaining a more regular h across these
two regions is by a smooth extension of the solution h defined
on into i. These extensions however, may require detailed
geometrical characterizations of obstacle interiors, whereas
Poissons equation itself only requires information about the
obstacle surfaces. Another approach is to employ mollifiers
to regularize h across these regions.
VIII. CONCLUSION
We have presented an algorithm for generating safe sets
for complex environments by solving Poissons equation. Our
method uses environmental perception data to define a domain,
on which we impose boundary conditions, and formulate a
boundary value problem for Poissons equation with a novel
forcing function. The resulting solution is a safety functiona
functional representation of the environment that characterizes
safety and defines the safe set. This safety function is also the
unique minimizer of a variational problem, and has desirable
regularity properties ideal for safety-critical control design in
robotic applications. The real-time efficacy of the proposed al-
gorithm enables its use in dynamically changing environments.
To validate this, we utilize the safety function to synthesize
CBF-based safety filters, and demonstrate their effectiveness
in achieving collision avoidance on quadruped and humanoid
robots navigating in complex, dynamic environments.
ACKNOWLEDGMENTS
This work was supported by BP. The authors thank Ryan K.
Cosner and Max H. Cohen for discussions and their insightful
perspectives in the development and presentation of this work,
and Lihzi Yang for the humanoid experimental setup.
REFERENCES
S. Bansal, M. Chen, S. Herbert, and C. J. Tomlin,
Hamilton-Jacobi reachability: A brief overview and re-
cent advances, in Proc. Conf. Decis. Control, pp. 2242
M. Chen, S. L. Herbert, H. Hu, Y. Pu, J. F. Fisac,
S. Bansal, S. Han, and C. J. Tomlin, Fastrack: A
modular framework for real-time motion planning and
guaranteed safe tracking, IEEE Trans. Autom. Control,
K. P. Wabersich, A. J. Taylor, J. J. Choi, K. Sreenath,
C. J. Tomlin, A. D. Ames, and M. N. Zeilinger, Data-
driven safety filters: Hamilton-jacobi reachability, control
barrier functions, and predictive methods for uncertain
F. Borrelli, A. Bemporad, and M. Morari, Predictive con-
trol for linear and hybrid systems. Cambridge University
K. P. Wabersich and M. N. Zeilinger, Predictive con-
trol barrier functions: Enhanced safety mechanisms for
learning-based control, IEEE Transactions on Automatic
O. Khatib, Real-time obstacle avoidance for manipu-
lators and mobile robots, The international journal of
robotics research, vol. 5, no. 1, pp. 9098, 1986.
A. Singletary, K. Klingebiel, J. Bourne, A. Browning,
P. Tokumaru, and A. Ames, Comparative analysis of
control barrier functions and artificial potential fields
for obstacle avoidance, in 2021 IEEERSJ International
Conference on Intelligent Robots and Systems (IROS),
A. D. Ames, X. Xu, J. W. Grizzle, and P. Tabuada,
Control barrier function based quadratic programs for
safety critical systems, IEEE Trans. Autom. Control,
P. Glotfelter, J. Cortes, and M. Egerstedt, Nonsmooth
barrier functions with applications to multi-robot sys-
T. G. Molnar and A. D. Ames, Composing control
barrier functions for complex safety specifications, IEEE
Control Systems Letters, 2023.
A. Singletary, W. Guffey, T. G. Molnar, R. Sinnet, and
A. D. Ames, Safety-critical manipulation for collision-
free food preparation, IEEE Robotics and Automation
H. Oleynikova, Z. Taylor, M. Fehr, R. Siegwart, and
J. Nieto, Voxblox: Incremental 3d euclidean signed
distance fields for on-board mav planning, in IEEERSJ
International Conference on Intelligent Robots and Sys-
tems (IROS), pp. 13661373, IEEE, 2017.
K. Long, C. Qian, J. Cortes, and N. Atanasov, Learning
barrier functions with memory for robust safe naviga-
D. Gilbarg and N. S. Trudinger, Elliptic partial differen-
tial equations of second order, vol. 224. Springer, 1977.
J. Jost, Partial Differential Equations, vol. 214. Springer
Science  Business Media, 3rd ed., 2012.
C. I. Connolly, J. B. Burns, and R. Weiss, Path plan-
ning using laplaces equation, in Proceedings., IEEE
International Conference on Robotics and Automation,
C. I. Connolly and R. A. Grupen, The applications
of harmonic functions to robotics, Journal of robotic
J.-O. Kim and P. Khosla, Real-time obstacle avoidance
using harmonic potential functions, IEEE Transactions
on Robotics and Automation, vol. 8, no. 3, pp. 338349,
D. Gingras, E. Dupuis, G. Payre, and J. de Lafontaine,
Path planning based on fluid mechanics for mobile
robots using unstructured terrain models, in 2010 IEEE
International Conference on Robotics and Automation,
A. D. Ames, J. W. Grizzle, and P. Tabuada, Control bar-
rier function based quadratic programs with application
to adaptive cruise control, in Proc. Conf. Decis. Control,
(Los Angeles,CA), pp. 62716278, Dec. 2014.
T. Gurriet, A. Singletary, J. Reher, L. Ciarletta, E. Feron,
and A. Ames, Towards a framework for realizable
safety critical control through active set invariance, in
2018 ACMIEEE 9th International Conference on Cyber-
Physical Systems (ICCPS), pp. 98106, IEEE, 2018.
A. D. Ames, S. Coogan, M. Egerstedt, G. Notomista,
K. Sreenath, and P. Tabuada, Control barrier functions:
theory and applications, in Proc. Eur. Control Conf.,
T. G. Molnar, R. K. Cosner, A. W. Singletary, W. Ubel-
trol for robotic systems, IEEE Robot. Aut. Lett., vol. 7,
M. H. Cohen, R. K. Cosner, and A. D. Ames, Construc-
tive safety-critical control: Synthesizing control barrier
functions for partially feedback linearizable systems,
IEEE Control Systems Letters, 2024.
G. Bahati, R. K. Cosner, M. H. Cohen, R. M. Bena,
and A. D. Ames, Control barrier function synthesis
for nonlinear systems with dual relative degree, arXiv
preprint arXiv:2504.00397, 2025.
P. Perez, M. Gangnet, and A. Blake, Poisson image
L. Perko, Differential equations and dynamical systems,
vol. 7. Springer Science  Business Media, 2013.
F. Blanchini, Set invariance in control, Automatica,
A. Isidori, Nonlinear control systems: an introduction.
A. J. Taylor, P. Ong, T. G. Molnar, and A. D. Ames,
Safe backstepping with control barrier functions, in
Proc. Conf. Decis. Control, pp. 57755782, 2022.
L. Doeser, P. Nilsson, A. D. Ames, and R. M. Murray,
Invariant sets for i
