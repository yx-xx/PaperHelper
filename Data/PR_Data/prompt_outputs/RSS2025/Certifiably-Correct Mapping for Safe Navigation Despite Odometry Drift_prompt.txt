=== PDF文件: Certifiably-Correct Mapping for Safe Navigation Despite Odometry Drift.pdf ===
=== 时间: 2025-07-22 09:42:04.852501 ===

请你只输出如下JSON，所有字段都必须有，且每个“关键词”字段只允许输出一个中文词语（不能是英文，不能是多个，不能是短语，不能有逗号、分号、空格），否则视为不合格。不要输出任何解释或正文，只输出JSON。
{
  "论文标题": "",
  "研究主题关键词": "",
  "应用场景关键词": "",
  "主要方法关键词": "",
  "创新点关键词": "",
  "主要结论关键词": ""
}
内容：Certifiably-Correct Mapping for Safe Navigation
Despite Odometry Drift
Devansh R. Agrawal, Taekyung Kim, Rajiv Govindjee, Trushant Adeshara,
Jiangbo Yu, Anurekha Ravikumar, and Dimitra Panagou
University of Michigan, Ann Arbor
AbstractAccurate perception, state estimation and mapping
are essential for safe robotic navigation as planners and con-
trollers rely on these components for safety-critical decisions.
obstacle maps and therefore collisions. This paper introduces a
framework for certifiably-correct mapping that ensures that the
obstacle map correctly classifies obstacle-free regions despite the
odometry drift in vision-based localization systems (VIOSLAM).
By deflating the safe region based on the incremental odometry
error at each timestep, we ensure that the map remains accurate
and reliable locally around the robot, even as the overall odom-
etry error with respect to the inertial frame grows unbounded.
Our contributions include two approaches to modify popular
obstacle mapping paradigms, (I) Safe Flight Corridors, and
(II) Signed Distance Fields. We formally prove the correctness
of both methods, and describe how they integrate with existing
planning and control modules. Simulations using the Replica
dataset highlight the efficacy of our methods compared to state-
of-the-art techniques. Real-world experiments with a robotic
rover show that, while baseline methods result in collisions with
previously mapped obstacles, the proposed framework enables
the rover to safely stop before potential collisions.
Code1 and Video2
I. INTRODUCTION
Accurate state estimation and mapping are essential for
safe robotic navigation, as planners and controllers rely on
perception outputs to ensure the safety of planned trajectories
or control actions. Various methods have been developed
to certify that controllers meet predefined safety specifica-
tions [1, 2], and when real-time obstacle detection is neces-
planner [3, 4, 5]. These methods typically assume perfect
A perception module provides a pose estimates and con-
structs maps of the obstacle geometry, and can take a variety of
7], polytopic Safe Flight Corridors (SFCs) , occupancy
achieved significant accuracy improvements [11, 12, 13, 14,
15], formal error analysis is often lacking. Without quantified
error bounds, guaranteeing the safety of a closed-loop robotic
system remains a challenge.
Ground Truth
Ideal Map at time
Baseline map is unsafe
due to odometry drift
Certied map is safe
despite odometry drift
Baseline Map
Certied Map
without odometry drift
with odometry drift
Overview of notation and objectives. (a) depicts the operating
obstacles O. The robot does not know F or O. It starts at B0, and follows
the gray trajectory to Bk building the map as it goes. (b) depicts the ideal
mapping output, where at the k-th timestep, the map Mk is composed of the
known safe region Sk, the unknown space Uk and the known obstacle set Rk.
(c) depicts the map produced by current state-of-the-art methods, where due
to odometry drift the map is erroneous: notice that the safe region (according
to the constructed map) is not a subset of the free space, Sk F. (d) depicts
the desired behavior of the certified maps, where although the safe region is
This paper introduces a framework for certifiably correct
mapping ensuring that obstacle-free regions of a map remain
correct despite odometry drift. The challenge is illustrated
in Figure 1. Consider an environment W  F O, repre-
senting free and obstacle spaces, respectively (Figure 1a). As a
robot navigates, at the k-th time step it has created a map Mk,
comprising the supposedly safe space Sk, the unknown space
Uk and the recognized obstacles Rk (Figure 1b). However, due
to odometry drift, maps can misclassify obstacles as free space,
leading to potential safety violations as indicated in Figure 1c.
We address this by deflating safe regions in order to ensure
Sk F at all times (Figure 1d).
Our main contributions are as follows:
The theoretical framework to construct and deflate the
free space in obstacle maps to ensure their correctness
despite odometry drift. Assuming the odometry algorithm
reports the pose and the covariance of the incremental
gion (Sk1 is deflated relative to Sk) to ensure that it
remains a subset of the free region F.
We prove the correctness and applicability of this frame-
work on two popular and state-of-the-art mapping frame-
Beyond providing the theoretical analysis and proofs
of correctness, we validate and compare our approach
with state-of-the-art baseline methods through extensive
simulations on the Replica dataset .
experiment on a robotic rover. A human teleoperates the
rover using only the First Person View (FPV) feed and
the obstacle map constructed and streamed to the operator
in real-time. The rover uses an onboard safety filter to
prevent collisions. Unlike baseline methods which result
in collisions, our approach prevents crashes by deflating
the safe regions appropriately.
It is critical that we deflate Sk rather than inflate known
obstacles Rk. If the obstacles are inflated based on the accu-
mulated odometry error, these obstacles can only grow in size,
and might eventually occupy the entire domain W. Instead,
by deflating a safe region Sk, the region that is certifiably
safe shrinks, eventually becomes an empty set, and is removed
from memory (i.e., the region becomes part of Uk). When the
region is observed by a sensor again, it can again be added to
Sk again. Computationally, this reduces memory requirements,
and mathematically this allows us to treat deflated obstacles
as unknown regions and plan paths accordingly. The certified
maps can be used together with the uncertified maps for
practical applications: the uncertified maps can be used to
plan trajectories for example for exploration or for navigating
towards a goal location, while the certified map can be used
for local obstacle avoidance.
Our paper is organized as follows. After a brief literature
review in Section II, in Section III we provide a mathematical
background and setup the problem formally. In Section IV
and V we introduce the deflation mechanism for both map
representations. In Section VI we propose methods to use
the certified maps to acheive safe navigation. Finally in Sec-
tion VII and Section VIII we present the simulation and
experimental results.
II. LITERATURE REVIEW
Perception methods have seen significant advancements
over the past few decades, driven by improvements in algo-
primary goals of these advancements have been to enhance
localization and mapping accuracy, improve robustness under
diverse environmental conditions, and develop algorithms with
lower computational costs. For instance, modern Simultaneous
Localization and Mapping (SLAM) systems now report trans-
lation error rates below 1 [19, 20], enabling more reliable
navigation in real-world scenarios.
With these improvements, robots have been deployed in
increasingly complex environments, relying heavily on Visual
Inertial Odometry (VIO)SLAM pose estimates and obstacle
maps to navigate safely. As exemplified by the DARPA SubT
of navigating subterranean environments [21, 22, 23]. In
these systems, raw measurements are typically processed by a
frontend into a more compact representation, while a backend
uses nonlinear optimization methods to compute the robots
trajectory and map estimate . Most of these optimization
methods are based on factor graphs, which, although effective,
become computationally expensive as the map size increases.
A common approach to manage this computational com-
plexity is to use local submaps, connected through a graph of
traversable regions or submap connections . These meth-
ods reduce odometry drift by optimizing each submap within
its own coordinate frame. When a robot revisits a previously
mapped region, the submap can be reused, provided that the
robot is correctly localized within it. However, even within
a submap, odometry drift can still lead to localization errors.
errors within these submaps. The approach proposed in this
paper aims to ensure correctness at the submap level, i.e., in
the presence of incremental localization errors.
Recent work has explored techniques for ensuring the
correctness of perception systems. For example,  achieve
global optimization in pose graph optimization problems
through a convex reformulation, while  provide error-
bounded localization within 2D convex environments. Addi-
tration and visual odometry methods. Similarly,  showed
that bounded attitude errors lead to bounded position errors. In
contrast to , this paper assumes that the incremental pose
estimate is bounded in a Lie-algebraic sense, which allows
our methods to be applied to a broader range of odometry
considered in . In cases where certification of correctness
is not feasible, estimating or quantifying the error can still
provide valuable insights, for example using the methods
in [29, 30] which estimate the error in point-cloud matching.
Other approaches have been proposed to address mapping
consistency in the presence of odometry drift.  utilize
overlapping Truncated Signed Distance Field (TSDF) voxels,
which are only fused once the consistency of certain regions
has been verified. These ideas share similarities with the work
of [32, 33], which also emphasize the importance of ensuring
consistency before merging obstacle estimates from different
times. These methods propose constructing a manifold map,
only merging them when correctness can be guaranteed. In
different strategy: regions where correctness cannot be assured
are forgotten, ensuring that only reliable, consistent parts of
the map are used for navigation and decision-making.
III. PRELIMINARIES AND PROBLEM STATEMENT
Notation
N  {0, 1, 2, ...} is the set of natural numbers. R, R0, R>0
denote reals, non-negative reals, and positive reals. In Rnn
is the n  n identity matrix. The subscript is dropped when
clear from context. SO(n) is the n-d special orthogonal gr
