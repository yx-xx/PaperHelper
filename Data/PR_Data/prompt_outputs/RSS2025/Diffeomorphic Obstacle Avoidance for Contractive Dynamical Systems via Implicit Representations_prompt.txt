=== PDF文件: Diffeomorphic Obstacle Avoidance for Contractive Dynamical Systems via Implicit Representations.pdf ===
=== 时间: 2025-07-21 15:11:56.171058 ===

请从以下论文内容中，按如下JSON格式严格输出（所有字段都要有，关键词字段请只输出一个中文关键词，一个中文关键词，一个中文关键词）：
{
  "论文标题": "",
  "研究主题关键词": "",
  "应用场景关键词": "",
  "主要方法关键词": "",
  "创新点关键词": "",
  "主要结论关键词": ""
}
内容：Diffeomorphic Obstacle Avoidance for Contractive
Dynamical Systems via Implicit Representations
Ken-Joel Simmoteit
Karlsruhe Institute of Technology
Ken-Joel.Simmoteitstudent.kit.edu
Philipp Schillinger
Bosch Center for Artificial Intelligence
Philipp.Schillingerde.bosch.com
Leonel Rozo
Bosch Center for Artificial Intelligence
Leonel.Rozode.bosch.com
AbstractEnsuring safety and robustness of robot skills is
becoming crucial as robots are required to perform increasingly
complex and dynamic tasks. The former is essential when
performing tasks in cluttered environments, while the latter is
relevant to overcome unseen task situations. This paper addresses
the challenge of ensuring both safety and robustness in dynamic
robot skills learned from demonstrations. Specifically, we build
on neural contractive dynamical systems to provide robust
extrapolation of the learned skills, while designing a full-body
obstacle avoidance strategy that preserves contraction stability
via diffeomorphic transforms. This is particularly crucial in
complex environments where implicit scene representations, such
as Signed Distance Fields (SDFs), are necessary. To this end, our
framework called Signed Distance Field Diffeomorphic Trans-
contraction-preserving obstacle avoidance. We thoroughly evalu-
ate our framework on synthetic datasets and several real-world
robotic tasks in a kitchen environment. Our results show that our
approach locally adapts the learned contractive vector field while
staying close to the learned dynamics and without introducing
highly-curved motion paths, thus outperforming several state-of-
the-art methods.
I. INTRODUCTION
Teaching robots skills has been a key challenge in robotics
research for over four decades . The dominant paradigm
involves learning robotic skills through expert examples,
commonly referred to as Learning from Demonstration
enabling
complex motion skills, LfD has led to numerous promising
applications
flexible
manufacturing [16, 59], household environments [51, 69],
human-robot collaboration [31, 57, 58], and robot-assisted
minimally invasive surgery , among many others.
For safe operation in human-centric and dynamic settings,
learned skills must be stable and reliable, avoiding unex-
pected movements under unseen situations such as different
task conditions or external perturbations. This highlights the
importance of stable LfD skills . Early efforts to ensure
stability in LfD focused on asymptotic stability criteria, of-
ten leveraging Lyapunov stability [12, 25, 51, 68]. While
Lyapunov stability primarily ensures asymptotic point-wise
relevant trajectories. To address this limitation, researchers
have conceptualized a more general stability criterion, namely
the contraction property of dynamical systems, which guar-
Neuronal Implicit
Distance Function
Neural Contractive
Dynamical System
Signed Distance
Field Diffeomorphic
Transform
Barrier Function
Infinitesimal
Generator
Joint Impedance
Figure 1: Overview of the proposed Signed Distance Field Diffeo-
morphic Transform: (1) A neural contractive dynamical system; (2)
A learned implicit distance function; (3) A barrier function, and (4)
a contraction-preserving diffeomorphic transform.
antees exponential convergence to a trajectory [38, 67]. This
concept has been recently leveraged in LfD frameworks, where
a robot skill, represented by a first-order dynamical system, is
endowed with a contractive behavior [4, 9, 54, 62].
In addition to stability, ensuring safety is paramount. This
often demands integrating obstacle avoidance into robot skills
while still providing stability guarantees. In the context of
contractive systems, Huber et al.  introduced the Mod-
ulation Matrix (MM) method to preserve contraction stability
during obstacle avoidance. Subsequently, Beik-Mohammadi
et al.  applied this approach to neural contractive dynamical
systems (NCDS), enabling stable collision-free motion in
the robots task space. Despite these advances, articulated
robotic arms require whole-body obstacle avoidance. While
traditional methods like artificial potential fields  and
recent approaches like Diffeomorphic Transforms (DT) ,
tackle this problem via robust joint-space obstacle avoidance
solutions that account for asymptotic stability, they do not
consider contraction stability guarantees. Therefore, preserving
contraction during whole-body obstacle avoidance remains
largely unexplored, posing a key challenge for robot motion
When considering cluttered and dynamic environments,
such as household settings, conventional obstacle representa-
tions using simple geometric primitives are insufficient [4, 19],
as they rely on coarse approximations and may not be easily
integrated with neural architectures. Instead, a differentiable
implicit distance representation is more advantageous as it
facilitates a fine-grained, real-time, and resource-efficient so-
network architectures. This has led to the rise of Signed
Distance Fields (SDF)s [15, 22, 45, 47], which have recently
been leveraged to learn articulated robot surfaces [11, 30, 36].
In these approaches, the SDF is a function of the robots joint
configuration space. Still, integrating implicit representations
with contraction-preserving obstacle avoidance remains an
open problem. To bride this gap, we propose to combine
the robustness of contraction stability with the precision of
implicit representations for efficient and safe whole-body
obstacle avoidance.
Signed Distance Field Diffeomorphic Transform (SDT),
for contraction-preserving obstacle avoidance based on an
implicit scene representation. The key contributions of this
work are:
1) Contraction-Preserving
Implicit
Obstacle
contraction-preserving obstacle avoidance in contrac-
tive dynamical systems by leveraging DT, SDF tech-
finitesimal generator derived from the robots implicit
representation and regulate it using barrier functions.
a flow that reshapes the contractive dynamics, either
differential
coordinate
applying a standard coordinate change via a pullback.
2) Obstacle Avoidance Metrics: We introduce a set of
quantitative metrics to assess obstacle avoidance per-
misalignment of the modulated contractive motion.
3) Experiments:
extensively
evaluated
framework
on two real-world tasks in a kitchen environment:
(1) EMPTYING A DISHWASHER; and (2) OPENING
A DISHWASHER. We also provide a comprehensive
comparison among various SDF methods and obstacle
avoidance approaches including Modulation Matrix
(MM), DT and artificial potential functions.
II. RELATED WORK
A. Learning Contractive Dynamical Systems
The use of contractive guarantees in learned dynamical
systems is a growing trend in robot motion skill learning. In
model via three methods: (i) As a regularizer or constraint on
the main skill learning objective [54, 55]; (ii) As a contraction
metric designed to stabilize a non-contractive skill [65, 66];
and (iii) By learning a skill model that is contractive by
design [1, 4, 23, 5]. The latter strategy is the one we follow in
our framework as it provides stronger theoretical and practical
guarantees. We review this set of works in more detail next.
Beik-Mohammadi et al.  introduced Neural Contractive
Dynamical System (NCDS), which inherently embeds the con-
traction property within a Neural Network (NN), thus avoiding
regularizers or a separate model for learning a contraction
metric. NCDS was later extended with regularizers controlling
the systems contraction rate, in addition to conditioning on
task variables and providing contraction-preserving obstacle
avoidance via pullback Riemannian metrics . Similarly,
Jaffe et al.  presented an inherently contractive model,
which leverages diffeomorphisms between the data space
and a latent space to provide global contraction guarantees.
Another approach is followed by Abyaneh et al. , who
propose learning an inherent contractive dynamical system
via recurrent equilibrium networks and coupling layers. We
build upon previous work to learn a contractive dynamical
system via NCDS. However, our approach can be seamlessly
integrated with any contractive dynamical system. Thereby, we
address the contraction-preserving obstacle avoidance prob-
except in [4, 18].
B. Stability-Preserving Obstacle Avoidance
Applying reactive obstacle avoidance in LfD settings re-
quires careful consideration to ensure safe and robust robot
stable dynamical systems. To address this, Khansari-Zadeh and
Billard  enhanced the Harmonic Potential Function ,
which uses potential flows from fluid mechanics for obstacle
tems maintain stability via an MM. Later, Huber et al.
demonstrated that this approach can also preserve contraction
et al.  primarily relied on simple geometric primitives
for obstacle avoidance, Fourie et al.  employed learned
obstacle representations of the entire robot configuration space
combined with MM. Their work, conducted in parallel to our
contraction stability guarantees.
Building on prior work in learning stable dynamical systems
via diffeomorphisms [44, 51, 68, 70], Zhi et al.  introduced
the DT method, which defines an obstacle-avoidance diffeo-
morphism via a flow field. This diffeomorphism transforms
the learned dynamics while providing asymptotically-stable
obstacle avoidance. Importantly, the DT method also accounts
for joint-space stable skills using the Moore-Penrose inverse
and the robots forward kinematics. This work, however,
shared a limitation with some of the foregoing approaches:
A focus on asymptotic stability rather than the more general
contraction property. In summary, whole-body obstacle avoid-
ance methods that preserve contraction, especially in complex
remains unresolved.
C. Implicit Robot Representations
Capturing the robots spatial structure is essential for
enabling
effective
obstacle
preventing
implicit representations provide a powerful way to model a
robots shape and volume. For example, SDFs provide an
representation. Studies by Li et al.  and Chen et al.
demonstrate that SDFs offer significant advantages over
geometric primitives by providing a higher level of detail,
facilitating precise interaction.
The use of implicit representations for articulated kinematic
chains is particularly challenging as the configuration of the
robots structure in the workspace varies as a function of the
robot joint position. In this case, each robot link can be mod-
eled by separate SDFs using architectures such as NNs
and Bernstein polynomial basis functions (BP) , or the
entire robot body can be represented using a single model ,
all of which yielding smooth surfaces. Notably, Li et al.
observe that learning the Euclidean distance between the
robot surface and a workspace query point is highly non-
linear in configuration space. To mitigate this, they propose
computing the distance in configuration space, leading to the
Configuration Space Distance Fields (CDF) method. While Li
et al.  and Marticorena et al.  made obstacle avoidance
for point-to-point motion possible using SDFs and a QP solver,
no existing approaches, to the best of our knowledge, perform
contraction-preserving obstacle avoidance with SDFs.
III. BACKGROUND
A. Contraction Stability
We are interested in learning contractive robot motion
certificate for robust generalization. Intuitively, contraction
stability studies the evolution of two trajectories of a dynam-
ical system given different initial conditions . In other
its initial conditions rapidly, with the distance between any
two trajectories decreasing exponentially over time. Formally,
consider two trajectories i and j generated by a dynamical
system of the form xt  f(xt), where xt RD is the system
placement x  j i, the squared distance between the tra-
jectories corresponds to xx . Contraction theory cares
about the evolution of this distance, i.e., its rate of change,
dt(xx)  2x x  2xJf(x)x,
where  x  Jf(x)x, with Jf(x)  fx. Lohmiller and
Slotine  show that a dynamical system exhibits contraction
if the largest eigenvalue max of the symmetric part of its
Jacobian is uniformly and strictly negative. Therefore,
dt(xx) 2maxxx xx0et,
displacement
decreases
exponentially to zero with contraction rate  .
Definition 1 (Contraction stability ). A dynamical system
xt  f(xt) is contractive if its Jacobian Jf  f
x is uniformly
negative definite for all x Rn and at all times t 0. This
means that,
Definition 1 can be generalized to account for a more
general distance definition, namely xG(x)x, where G(x)
is a Riemannian metric [32, 61]. This also allows us to analyze
the contractive behavior of a dynamical system under a coor-
dinate change via a smooth diffeomorphism y  (x). The
corresponding differential change in coordinates is given by
y  Jx, where J is the Jacobian of the diffeomorphism
. Manchester and Slotine  demonstrated that contraction
is invariant under such coordinate changes.
Theorem 1 (Invariance under coordinate change ). If
Definition 1 is satisfied for a dynamical system, then it is
preserved under the following transformations:
1) Affine feedback transformations u(x, v)  a(x)
B(x)v, with B(x) being a smooth nonsingular n  n
matrix function;
2) Differential coordinate changes y  J(x)x, where
J(x) is a nonsingular matrix for all x, and induces
a new contraction metric,
Gy(x) : J(x)G(x)J(x);
3) Coordinate changes y  (x), where  is a diffeo-
Given a contraction metric as stated in Theorem 1, we
can also determine whether a given system is contractive by
following the results in .
(Contraction
conditions
that a uniformly positive definite matrix G(x, t)
J(x)J(x) 0 exists, x, t, where J(x) defines a
smooth coordinate transformation of the differential x, i.e.,
y  J(x)x. The following equivalent condition holds
for  R>0 and x, t,
then all solution trajectories of the system converge ex-
ponentially fast to a single trajectory, irrespective of their
initial conditions, with an exponential convergence (con-
traction) rate .
B. Flow-based Diffeomorphisms
As contraction is preserved under a change of coordinates,
we leverage this to design obstacle-avoidance behaviors based
on diffeomorphic mappings, which we revise next. A diffeo-
smooth inverse, thereby providing a coordinate transformation
between two differentiable manifolds Y and X. According
to Lee [33, Theorem 9.12], any such diffeomorphism can be
realized as a flow generated by an infinitesimal generator V,
often represented as a vector field on a smooth manifold.
field and the flow  : R  Rd Rd be defined by,
(t, y)  y
V((u, y)) du  x.
This flow (t, y) provides the position x at time t of a
trajectory starting at y when t  0. For each fixed time t, this
flow defines a diffeomorphism : Y X by (y) : (t, y).
inverse can be computed by reversing the direction of time,
(t, x)  x
V((u, x)) du  y.
Note that this flow-based diffeomorphism (y) : (t, y)
maps the initial point y Y to the point x  (t, y) X.
assigns a tangent vector in TxX to each point x X, we can
use  to pullback f to a vector field on Y. Specifically, let
J be the Jacobian of , then the pullback of f via  is,
thereby transforming tangent vectors on X to corresponding
tangent vectors on Y .
C. Signed Distance Fields (SDFs)
Representing objects as meshes or point clouds is often
inefficient due to high memory requirements and redundant
information . Moreover, these discrete representations lack
smoothness and differentiability as they approximate surfaces
with sampled points or polygons. To overcome these lim-
representation. An SDF defined by SDF : Rd R, encodes
the objects surface through the minimum distance dmin from
a point x Rd to the surface using a smooth function .
Three regions can be identified: Free space Hf  {x Rd
SDF(x) > 0}, surface boundary Hs  {x Rd  SDF(x)
0}, and interior Hi  {x Rd  SDF(x) < 0} (see Fig. 2 for
an illustration).
Note that this approach decouples spatial resolution from
memory usage, enabling high-resolution reconstructions with
fast inference . Park et al.  propose using a Multilayer
Perceptron (MLP) to model the SDF, offering a lightweight
and efficient model. Additionally, piecewise polynomial rep-
resentations enable continuous surface modeling . Maric
et al.  extend this by employing BP basis functions which
enables smooth surfaces that can be incrementally refined.
Figure 2: Illustration of a
2D SDF: Contour lines of
an star-shaped SDF with
the distance SDF to the
obstacle surface, depicted
as a solid red line.
IV. CONTRACTION PRESERVING OBSTACLE AVOIDANCE
Here we introduce our contraction-preserving obstacle
avoidance method. First, we explain the contractive dynamical
system used in this paper. Later, we describe the contraction-
preserving obstacle avoidance method.
A. Learned Contractive Dynamical System
Consider a contractive dynamical system x  fNCDS(x),
where x represents the first-order time derivative of the system
state x. From Theorem 2, we know that if the symmetric part
of the system dynamics Jacobian JfNCDS is negative definite,
our dynamics is contractive. Beik-Mohammadi et al.  pro-
pose directly learning this Jacobian to intrinsically embed the
contraction property into fNCDS. Specifically, the Jacobian is
modeled with parameters  as,
JfNCDS(x)  (J(x)J(x)  ),
where J(x): RD RD represents the square root of the
> 0 guarantees that the eigenvalues are bounded by  .
Given the negative-definite Jacobian (9), the contractive dy-
namics is obtained via the calculus for line integrals ,
x  fNCDS(x)
c(x, t, x0)
c(x, t, x0)dt,
c(x, t, x0)  (1 t)x0  tx,
c(x, t, x0)  x x0,
and x0 is the initial system state . The velocity xt is
computed using a numerical integral solver given xt [4, 10].
When learning robot skills via NCDS, we have two options:
Learning the NCDS in joint space C or instead, encoding
the skill in task space X. In the latter case, NCDS uses Lie
groups to represent the end-effector orientation in SO(3) ,
and employs its Lie algebra so(3) to obtain skew-symmetric
matrices w so(3) . The mapping between SO(3) and
so(3) is defined via the exponential and the logarithmic map.
To train a NCDS model, the loss function minimizes the
average reconstruction error between the true next state xt1
and the predicted next state xt1  xt  xt1 ,
xt1 (xt  xt1)2.
Demonstrations
NCDS Trajectory
Figure 3:
Exemplary
NCDS model of a skill
demonstrated
trajectories
LASA dataset in black
integrated
motion over the NCDS
model in blue. The gray
represent
NCDS vector field.
Algorithm 1: NCDS Training in Joint Space
where n [1, N], t [1, Tn], and
initial parameters , initial regularizer
learned regularizer
1 while not converged do
for each demonstration n N do
for each time step t Tn do
Calculate JfNCDS of the NCDS with Eq. (9)
Define the contractive dynamics fNCDS with
Train the Jacobian network by solving:
,  argmin, (LJac  L  noiseLnoise)
In addition, a state-independent regularizer is added to opti-
mize the eigenvalue bound   [1,    , D] as follows ,
To enhance the local contraction properties of NCDS, we
propose an additional noise-injected reconstruction loss,
Lnoise  1
which acts orthogonally to the direction of motion x, with
xt N(xt, xt), representing noise injected in the di-
rections perpendicular to the movement. Our regularizer en-
courages NCDS to be robust against orthogonal perturbations,
thereby implicitly improving its local contractive behavior. The
total loss is L  LJac  L  noiseLnoise, with  and noise
being weights balancing the losses influence. NCDS training
is summarized in Algorithm 1. Additionally, Fig. 3 illustrates
a vector field learned by NCDS.
B. SDF-based Diffeomorphic Transform
Our obstacle avoidance method consists of two compo-
contraction-preserving transformation of a contractive vector
field fc. The latter can be: (1) A learned joint-space NCDS
RDF(x, q)
Figure 4: Illustration
showing the contour
lines of the robots
SDF for a Franka-
Emika Panda robot
grasping a plate. The
contours
indicate
the distance RDF to
the robots surface.
The inner gray mesh
robot surface R.
fNCDS(q); (2) A learned task-space NCDS fNCDS(x) mapped
to joint space; and (3) Any differentiable contractive dynamical
system in joint space. Next, we describe the implicit repre-
sentation of the robot surface, which provides the basis for
deriving the infinitesimal generator for obstacle avoidance.
1) Implicit Robot Representations: To achieve obstacle
the scene surface S and the robot surface R. Therefore we
start by learning an implicit representation of dmin. There are
two ways to achieve this: (1) A learned SDF of the robot
and; (2) A learned SDF of the scene. To learn a SDF for
the scene, we refer the reader to the established approaches
in [15, 45, 47]. On the other hand, the distance w.r.t the robot
surface can be defined by dmin  RDF(x, q), given a query
point x and the robot state q C [11, 30, 36]. This implicit
robot representation is called Robot Signed Distance Fields
(RDF). We follow the approach from Li et al.  and define
the RDF as,
RDF  min(r
K links in the robot base frame r. Thereby, each link is
transformed via the robots kinematic chain rTk(q) SE(3)
from the frame of the k-th link to the base frame, resulting
. Given the SDF o
(e.g., a grasped object) and its corresponding transformation
rTo(q) SE(3) to the robot base frame, we can easily extend
the RDF by adding the transformed ro to the min operation
in Equation (15). We choose BP to learn the SDF r
k of each
link k as it provides a particularly smooth surface. However,
any other SDF method can be used. An exemplary learned
RDF with a grasped plate is shown in Fig. 4.
distances rather than Euclidean point-to-surface distances,
leading to the CDF with corresponding implicit distance
function CDF. The CDF measures the distance in radians,
corresponding to the movement of joint angles towards the
zero-level configuration set q, resulting in ,
CDF(x, q)  min
CDF solves the inverse kinematics problem in a single step by
updating the current robot joint configuration along the CDF
Figure 5: Vector field
shaped SDF function
function
binv(x, q).
represent the barriers
magnitude.
solid red line shows
object and the dashed
grey line the safety
threshold tsave.
gradient toward the zero-level configuration set qvia,
q q CDF(x, q)qCDF(x, q).
CDF with an objects SDF, such as that of a grasped object, is
not as straightforward as in the RDF framework. Accomplish-
ing this would require training a new model or incorporating
additional conditioning into the existing model. In this work,
both RDF and CDF are employed and compared. In the
implicit distance function between the scene and the robot.
When referring specifically to the robots implicit distance
the implicit distance function of the scene.
2) Implicit Infinitesimal Generator: For obstacle avoidance,
the gradient qSDF determines how the robot joints should
move away from obstacles. Thus, this gradient acts as an
infinitesimal generator V. To ensure strict collision avoidance,
we use an inverse barrier function binv(x, q), similarly to .
This barrier is defined as follows,
binv(x, q)
SDF(x, q),
which is combined with the gradient, leading to the infinitesi-
mal generator V  binvqSDF. As SDF 0, then binv ,
ensuring collision avoidance. When SDF , then binv
qSDF. The introduction of this barrier function is motivated
by the fact that SDFs are often learned via the Eikonal loss,
enforcing xSDF(x, q) 1 . Thus, gradients remain
non-negligible even far away from the obstacles. Figure 5
illustrates the resulting vector field for a geometric primitive
following the aforementioned approach.
We can make the barrier function more general by adding
tunable parameters like a safety threshold tsave and a scaling
factor sgrad as follows,
binv(x, q)
SDF (x, q) tsave
at weighting movements towards and tangential to the obstacle
while ignoring those away from it, using the dot product
qNCDS  qSDF. To do so, we need to distinguish whether
the SDF of the scene S or of the robot R is used, since
the corresponding velocity fields and gradient direction may
differ. Specifically, if R is employed, then the gradient of
R and fc point in the same direction when moving towards
the obstacle and point in opposite directions when moving
away from it. If S is used, this phenomenon is the opposite.
For the implicit distance function of the robot and the scene,
swept-augmented barriers are defined as,
qNCDS  qR(x, q)
qNCDS qR(x, q)
qNCDS  qS(x, q)
qNCDS qS(x, q)
Although the foregoing barrier functions can be used inde-
barrier functions (18) and (20) or (21) by simply defining
b(x, q)  binv(x, q)bswept(x, q). Given the barrier function
b(x, q), the infinitesimal generator results in,
V(x, q)  b(x, q)qSDF(x, q).
3) Contraction-Preserving Differential Coordinate Change:
Given the infinitesimal generator V (22) obtained from the
SDF introduced in Section IV-B2, we know the joint directions
that locally maximize obstacle avoidance. Directly forcing the
robot away from the obstacle via,
q  fc(q)  fc(q) b(x, q)qSDF(x, q),
as proposed by Ravichandar and Dani , could violate
the contraction conditions of Theorem 2. This is because the
b(x, q)qSDF(x, q) term is not guaranteed to be negative
To achieve obstacle avoidance without breaking contraction
the obstacle by defining a mapping to a new obstacle-free
manifold Y that preserves contraction. To do this, we lever-
age Theorem 1, which tells us that contraction is preserved
under coordinate transformations or diffeomorphisms. Thus,
we cast the contraction-preserving obstacle avoidance problem
as finding a diffeomorphism that reshapes our contractive
dynamical system fc around the obstacle as a function of the
gradient of its implicit representation qSDF. As explained
in Section III-B, a diffeomorphism  can be designed from
a flow. If such a flow is differentiable, it is thus a valid
diffeomorphism.
We propose to leverage the flow generated by the infinites-
imal generator (22). Specifically, using the flow : Y C
as defined by Equation (6), we transform the obstacle-free
manifold y Y into the configuration space q C as follows,
Given the diffeomorphism (24), we can carry out a differ-
ential coordinate change,
using the Jacobian of the flow J. We refer to this transforma-
tion as Signed Distance Field Differential Coordinate Change
(SDDC). Based on Theorem 1, which states that contraction
is preserved under differential coordinate transformations, we
conclude that the transformed system fSDDC is contractive.
This therefore ensures that the robot can successfully avoid
obstacles while preserving the stability of the underlying skill.
4) Contraction-Preserving Diffeomorphic Transform:
Equation (26), we consider only the differential coordinate
under the diffeomorphism . However, to fully account for
geometric properties (e.g., lengths, distances, and angles), we
must consider the Riemannian metric of the obstacle-avoiding
manifold Y induced by  . By applying the diffeomor-
lently be described on the obstacle-avoiding manifold Y via,
y  fSDC(x, y)  J(y)1fc((x, y)).
where J denotes the Jacobian of . We refer to this
transformed dynamical system as Signed Distance Field
Coordinate Change (SDC). This coordinate change also
induces the Riemannian metric G
characterizes the local geometry on Y and corresponds to the
contraction metric. A proof of this equivalence is provided in
Appendix B4. To show that contraction is invariant under a
change of coordinates we can use Theorem 1. Consequently,
the proposed SDC preserves the contraction property. We
illustrate
contraction-preserving
obstacle
avoidance
methods SDDC and SDC using a toy example in Fig. 6a.
This example shows that, given an obstacle, the original
vector field fc from Fig. 3 is reshaped around the obstacle
by the SDDC and SDC, thus avoiding it successfully.
5) Enhancing Obstacle Avoidance with a Friction Term:
In the following, we introduce an extension to the proposed
obstacle avoidance methods. To avoid notational clutter, we
represent the vector field modulated by both the SDDC (26)
and SDC (27) collectively as fm. As observed in Fig. 6a,
the modulated velocity profile of fm may deviate significantly
from the original velocity profile learned by the NCDS skill.
To address this, we introduce a friction term aimed at preserv-
ing the velocity profile of the underlying contractive vector
field fc. Interestingly, this friction term can also be employed
to reduce the velocity near obstacles and to damp fluctuations
caused by discontinuities in the learned SDF. Inspired by ,
Algorithm 2: Modulated Robot Skill Execution
: Learned NCDS fNCDS,, learned SDF R,
1 while t N do
Sample point cloud {si}M
i1 S from the scene
Read robot joint and task state qt C, xt X
Find nearest point sto robot surface such that
R(s, q)  min{si}M
i1 R(si, q)
Solve the ODE from Equation (24) (x, qt)
Solve ODE from Equation (10) yNCDS,t
Modulate yNCDS,t via Equation (26) or (27) yt
Integrate modulated joint velocity yt yt1
Send yt1 to the robots joint impedance controller
our friction term is defined as,
fm(x, y)fm(x, y).
When f  1, the resulting dynamics adapts the velocity
magnitude to the underlying learned vector field fc, but keeps
the modulated direction from fm. Note that f  1 must not
be chosen for SDDC, because it just guarantees strict collision
avoidance at velocity level. If we enforce the SDDC to keep
the underlying velocity, it could potentially force the system
to penetrate the obstacle.
To slow down near obstacles, we design nf as follows,
(1  fSDF(x, y))2 ,
with hyperparameter f. The resulting vector field under
this friction term is depicted in Fig. 6c. Since
fSDC(x,y)
is strictly positive and f > 0, they induce no directional
changes. According to Theorem 1, contraction is preserved
under affine transformations, consequently the friction (28)
does not compromise the contraction guarantees.
6) Modulated Skill Execution: Finally, trajectories can be
integrated along fm, defined by the Equations (26) or (27).
avoiding space via SDC (27) or SDDC (26). Note that inte-
grating the flow (24) requires solving an Ordinary Differential
Equation (ODE), which we address using off-the-shelf solvers
(more information is provided in the Appendix in Table V).
After computing the flow, applying Equation (26) or (27)
reshapes the vector fields to avoid obstacles while preserving
global contraction guarantees. Algorithm 2 summarizes how a
robot is controlled using our approach.
V. OBSTACLE AVOIDANCE METRICS
We here introduce two novel metrics: Relative Flow Curva-
ture (RFC) and Vector Field Misalignment (VM), to quan-
titatively assess the obstacle avoidance performance of our
approach and state-of-the-art methods. In contrast to stan-
dard metrics such as the Dynamic Time Warping Distance
Demonstrations
Time in s
Amplitude
(a) Without friction
Demonstrations
Time in s
Amplitude
(b) With swept features (Eq. (21))
Demonstrations
Time in s
Amplitude
(c) With friction and f defined by Eq. (29)
Figure 6: Comparison of contraction-preserving obstacle avoidance using SDDC and SDC on an example of the LASA dataset. The vector
field modulated by the SDDC is represented by a gray flow stream while the box-shaped obstacle is depicted by the red solid line. The
bottom plots show the magnitude of the velocity profile along the trajectory.
(DTWD), that measure reconstruction errors, the proposed
metrics focus instead on changes of the learned vector field
introduced by the obstacle avoidance modulation.
A. Relative Flow Curvature
To ensure that the obstacle avoidance maneuvers do not
introduce jerky or sharp trajectories, we analyze the curvature
of the modulated vector field. This metric, termed RFC,
should ideally remain similar to the original vector fields
around obstacles. Specifically, RFC compares the maximal
curvature  along the modulated trajectory m against the
maximal curvature of the base trajectory base. The curvature
measures how sharply a trajectory  bends at a given point
relative to the tangential direction , and it is defined as,
with  denoting the cross product, (t) and (t) being
the velocity and acceleration along the trajectory. Given the
curvature (30), the RFC metric is defined as follows,
xbase(x)max
B. Vector Field Misalignment
When considering contractive stable vector fields, it is par-
ticularly important to preserve the learned vector field patterns
as much as possible in order to maintain the essence of the
skill. Therefore, we propose to compute the cosine similarity
between the learned vector field fc and the modulated vector
field fm along the rolled-out obstacle-avoiding trajectory.
Since we aim to quantify the degree of misalignment between
the two vector fields, we define this metric as,
fc(x)  fm(x)
fc(x) fm(x)
A high VM value indicates that the base vector field and the
modulated vector field significantly deviate from each other.
Therefore a low VM is desirable as this may indicate that the
learned vector field patterns are just slightly modified.
VI. EXPERIMENTS
In the following experiments, we systematically analyze
the performance, real-time feasibility, and potential edge-cases
of the proposed obstacle avoidance methods. Thereby, we
evaluate the proposed methods SDDC and SDC on the 2D
LASA dataset  and on two real-world tasks: EMPTYING
A DISHWASHER and OPENING A DISHWASHER. These experi-
ments are carried out in a kitchen environment with unknown
obstacles. For the real-world experiments, the robot surface
is learned as an SDF function while the scene is represented
by an incrementally-sampled point cloud. For the 2D LASA
dataset experiments, only implicit models of the obstacles are
learned while the robot is assumed to be a virtual point. Here,
simple geometries such as circles, rectangles, triangles or arcs
are used as obstacles, as shown in Fig. 7.
Our methods are compared against MM  as this is
the only contraction-preserving obstacle avoidance method
known to us, which was also employed in combination with
NCDS . Moreover, we compare our methods against the
relies on a natural gradient formulation and thus does not
Obstacle surface
Figure 7: Illustration
of the obstacles SDF
used in the 2D LASA
dataset experiments.
represent
distance
the obstacle surface,
depicted as a solid
simple obstacles are
preserve contraction. Additionally, we consider classical Ar-
tificial Repulsive Potential Field (ARPF) . We ablate our
methods using different SDF functions based on MLP, BP,
and simple geometric primitives. These different versions are
compared against Hilbert maps  as this method was used
in combination with DT for obstacle avoidance .
A. Evaluation Metrics
The following metrics are used to quantitatively evaluate
the obstacle avoidance performance. Firstly, we evaluate our
methods ability to preserve the underlying learned skill dur-
ing obstacle avoidance. To do so, we compare the skills
execution with and without obstacles using the DTWD .
A low DTWD indicates that the reproduced trajectory was
slightly modified by the obstacle avoidance term. Secondly,
we compute the minimum distance Dmin  minxm SDF(x)
between the robot surface and the obstacle over the course of
the skill execution. Our goal should be to keep this distance
sufficiently large to guarantee a collision-free skill execution.
or discontinuous trajectories, we use our proposed RFC met-
ric (31) to measure the curvature of the modulated vector
field. As fourth metric we analyze the trajectory jerkiness,
which measures abrupt acceleration changes possibly intro-
duced by the obstacle avoidance term. To assess this, we
compare the maximal trajectory jerkiness in both obstacle-free
... base(x) and obstacle-avoidance settings ... m(x), resulting in
the Modulation Jerk (MJ) metric. The jerk difference should
be as small as possible. Finally, we evaluate the proposed VM
metric (32), which measures the deviation between the base
vector field and the modulated vector field. Details about the
B. Implementation Details
All experiments are run on a NVIDIA RTX A2000 12GB
GPU and a 12th Gen Intel(R) Core(TM) i5-12600K CPU.
used for learning the skill models and the obstacle implicit
representations.
1) Neural Contractive Dynamical System: Our NCDS im-
plementation fundamentally follows that of Beik-Mohammadi
et al. . The NCDS Jacobian network is modeled using an
MLP with 2 hidden layers, each consisting of 100 units and
employing TANH activation functions. We define the total loss
function as a combination of Equations (12), (13) and (14),
with weighting factors   1.0  103 and noise  1.0
All models are trained for 1000 epochs with a learning rate
of 1  103 using the Adam optimizer. A decay factor of
0.1 is applied every 250 epochs to improve training stability.
interpolated such that each trajectory consists of exactly 1000
points. At inference time, a fourth-order Runge-Kutta solver
with the 38 rule is employed to solve the ODE in Equa-
tion (10) using two solver steps.
2) Signed Distance Fields: For the LASA dataset exper-
description of the simple geometric shapes, as displayed in
Fig. 7. Using this representation, we sample N  160K
points {xi}N
i0 from a grid around the obstacle surface and we
then assign each point its corresponding SDF di  SDF(xi)
and gradient values gi  xSDF(xi). Given this training set
D  {(xi, di, gi)}N
an MLP with an hourglass-shaped architecture of size (128, 64,
The loss function is a combination of a reconstruction loss
tension loss , leading to,
L()  wSDFLSDF  wgradLgrad  weikLeik  wtenLten,
where wSDF, wgrad, weik and wtension are weighting factors with
values wSDF  10.0, weik  0.01, wgrad  0.1 and wten
0.01. The models are trained for 5000 epochs using an Adam
optimizer with a learning rate of 1  103. In addition, we
learn a BP-based SDF similarly to Li et al. . We choose
a model size of 8 basis functions, which are trained for 200
epochs using the training set D.
implicit
representation of the 7-DoF Franka-Emika Panda robot.
On the one hand, we use the BP architecture proposed by Li
et al. . We choose 14 basis functions and train the model
for 200 epochs. On the other hand, we learn a CDF of
the robot based on a MLP model combined with positional
encoding and adopt the architecture of Li et al. . We
choose the same loss as described for the 2D MLP model but
with an architecture of size (1024, 512, 256, 128, 128) and
learn the model for 50000 epochs.
C. Baselines
To compare our approach with state-of-the-art methods, we
must adapt them to work with SDFs. Firstly, Huber et al.
used MM with a custom distance function M designed for
simple geometric primitives, which is not directly comparable
to our framework. Thus, we define a distance function such
that Hs  {x Rd  MSDF(x)  1}, resulting in,
MSDF(x)  (SDF(x)  1)2p .
Given this distance function MSDF, we compute the mod-
ulation matrix M according to Huber et al. . So, the
modulated vector field is,
x  M(x)fc(x).
the diffeomorphism based on Hilbert maps  by our dif-
feomorphism  from Eq. (24). This results in the modified
natural gradient system,
y  fDT(x, y)  G(y)1fc((x, y))
with the Riemannian Metric G  J
J. Finally, we adapt
the ARPF method  by defining the repulsive potential
VARPF via the SDF function, as follows,
VARPF(x)  1
SDF(x) tsafe
with safety threshold tsafe  0.1 and a positive constant
104. Given this repulsive potential, the resulting dynamics of
the adapted contractive system fc is,
x  fc xVARPF(x).
D. Validation on the LASA Dataset
The aim of these experiments is to determine the quality
and efficiency of obstacle avoidance as well as the limitation
of the proposed methods on the basis of simplified scenarios.
1) Experimental Setup: The LASA dataset  is used to
validate the proposed pipeline using a 2D dataset, consisting
of 30 2D handwritten movements. Each movement consists of
seven demonstrations. As an example, we use the Sine move-
ment from the LASA dataset for the following experiments
(see Fig. 3). In this case, we assume a virtual point-shaped
robot following the learned contractive NCDS models trained
on the Sine dataset. The task for the robot is to avoid one of
the obstacles shown in Fig. 7. In addition, in the Appendix
(see Fig. 14) multi-modal robot skills are also investigated.
The obstacle is represented by an implicit distance function.
(see Fig. 7). These are also used to generate the training data,
which serve as the ground truth. Additionally, we learn an
SDF represented by a MLP and another represented via BP.
We analyze the performance of the methods for 40 different
trajectories per obstacle, each with different obstacle positions.
2) Obstacle Avoidance Results: As an exemplary scene,
we place the box-shaped obstacle in the trajectory path and
apply our proposed method and compute both the trajectory
with and without obstacle avoidance. As shown in Fig. 6c the
learned contractive vector field is deflected around the obstacle
and thus we can successfully avoid an convex obstacle using
our proposed method. If the barrier function is additionally
extended with the swept feature, Fig. 6b shows that the vector
field away from the obstacle is less influenced and thus the
movement in this area follows more closely the dynamics
learned by NCDS.
shapes. In the following, we investigate how the methods
behave with concave surfaces. As shown in Fig. 8, when
using the SDT framework, the flow gets stuck in the concave
region. Note that the learned SDF does not provide any global
information regarding the shape of the obstacle. The curvature
can therefore only be calculated locally. Consequently, the
vector field is deflected at the edges of the obstacle profile,
regardless of the obstacle shape. Therefore, Huber et al.
suggest defining a reference point xr that specifies a clear
direction for the flow. However, this does not serve any
purpose for a SDF function, as the global information is only
implicitly represented. In addition, the reference point would
Demonstrations
Time in s
Amplitude
Figure 8:
Obstacle
avoidance
barrier on a NCDS
model trained on the
dataset.
arc-shaped
obstacle
depicted
red line. The velocity
absolute
velocity
trajectory. The vector
modulated
represented by gray
have to be adjusted continuously for dynamic objects. This
confirms our expectations that avoidance of concave obstacles
may prevent a complete execution of the trajectory, thus we
consider our method primarily relevant for convex obstacles.
3) Barrier Functions Hyperparameter: We here analyze
the influence of the hyperparameter sgrad in Eq. (19) on the
obstacle avoidance behavior, using the metrics proposed in
Section VI-A. Table I reports the metrics for three different
values of sgrad. The experiments show that higher values of
sgrad increase the minimum distance to the obstacle. This in
turn has a negative influence on the DTWD and the VM
obstacle avoidance and thus modulates a larger region of
the learned vector field. In addition, the results show that
the curvature decreases for larger values of sgrad, except for
smoothly. We therefore see a potential trade-off between a
smooth modulation with higher distance to the obstacle (i.e.,
high sgrad values), and a more accurate alignment to the
skill vector field, but with less smooth modulation (i.e., low
sgrad values). Moreover, the swept features have a significant
positive impact on the majority of the metrics, particularly
noticeable in the RFC and VM metric. This can be explained
by the fact that these swept features minimize the area of
influence of the obstacle avoidance term.
4) Comparison to State-Of-The-Art: To compare our pro-
posed SDC and SDDC methods with state-of-the-art ap-
parison. We then evaluate all approaches using three distinct
SDFs architectures. The results are summarized in Table II.
metrics such as RFC, VM and DTWD. It is noteworthy that
ARPF exhibits particularly strong performance with respect
to the MJ metric, indicating jerk-free obstacle avoidance.
Appendix B3.
Another noticeable finding is that SDDC produces relatively
large VM values, indicating weaker alignment with the original
Table I: Quantitative analysis of the influence of sgrad on the obstacle
avoidance behavior according to Eq. 19. Only obstacles based on
geometric primitives (GP) are considered. Each metric is computed
as the average over 40 trajectories.
sgrad  0.05
sgrad  0.10
sgrad  0.20
contractive vector field during obstacle avoidance. In addition,
its low Dmin and high DTWD values imply that SDDC
follows a suboptimal path. This observation is qualitatively
reinforced by Fig. 9, where SDDC takes a longer path around
the obstacle. Nevertheless, this path is characterized by a
particularly smooth trajectory, as indicated by its low RFC
The differences among the three SDF functions are notice-
the metrics. However, the MLP-based SDF tends to exhibit
higher MJ and RFC values, indicating increased irregularities.
By contrast, the BP-based SDF appears more smooth, which
aligns with the features provided by polynomial-based func-
tions. In conclusion, the foregoing results demonstrate that
our SDC and SDDC methods provide smooth and stable ob-
stacle avoidance behaviors without compromising contraction
guarantees and reconstruction accuracy. If closer alignment to
the underlying contractive vector field is preferred, SDC is
avoidance strategy.
Demonstrations
Time in s
Amplitude
Figure 9:
Obstacle
avoidance with SDC
and SDDC using a
inverse barrier on a
NCDS trained on the
trajectories
dataset.
circle-shaped
obstacle is depicted
by the red line. The
velocity profile shows
the absolute velocity
trajectory. The vector
modulated
represented by gray
Depth camera
Obstacle
Dishwasher
Figure 10: Real-world robot setup in a kitchen environment. It
consists of a Franka-Emika Panda robot manipulator with a depth
camera attached to its end-effector and a dishwasher filled with a
few plastic dishes. The left image shows the real setup, while the
right image displays the setup in a Gazebo simulation.
5) Inference Time: Our goal here is to analyze the com-
putational cost of the inference process, which is relevant
when implementing these methods in real-world settings. As
a reference, consider that NCDS without obstacle avoidance
has an inference time of 5.1ms. As shown in Table III,
MM and ARPF are the fastest obstacle avoidance methods,
with inference times 0.5ms 1.0ms faster than the proposed
SDDC and SDC. However, the influence of the chosen SDF
method becomes evident. While a geometric primitive SDF
is computationally cheap, it is only applicable to objects that
are known in advance and can be modeled mathematically. In
complex shapes, where the former provides a faster inference
(HM), the MLP architecture is slower. However, HM consists
of radial basis functions and learns an occupancy model .
and can only modulate the vector field locally, as used in the
diffeomorphic transform approach . This limitation renders
HM unsuitable for complex scenes, and it is not possible
to maintain a safe distance from obstacles. Additionally, the
gradient of HM does not provide a strict safety barrier, since
any vector field stronger than the HM gradient can potentially
lead to collisions.
We also report the computational cost when evaluating the
diffeomorphic transform for obstacle avoidance as in Eq. (27).
We distinguish between the computational time of the flow
tflow from Eq. (24) and the computational cost of the Jacobian
of Eq. (26). Table IV reports the impact of the ODE solver on
the overall inference time. While convex solvers are the fastest,
they are restricted to convex surfaces. In contrast, the Runge
Kutta solver is the slowest, with inference times approximately
five times higher than those of the convex solver. Furthermore,
Table IV shows that the largest portion of the total computation
time stems from evaluating the flow in Equation (24). This
observation underlines the importance of selecting an efficient
implicit distance function to reduce the computation time
overhead. Notably, the calculation of the Jacobian has only
a minor impact on the total inference time.
Table II: Comparison of the proposed SDC and SDDC methods against state-of-the-art baselines. Three different implicit distance functions
are considered for all methods: SDF of geometric primitive (GP) as ground truth, MLP as standard architecture for SDF [15, 47], and BP
as polynomial architecture . The methods SDC and DT use a barrier with sgrad  0.1, while SDDC uses a barrier with sgrad  0.05. An
additional safety margin of tsave  0.1 applies to all methods. Each metric was averaged over 40 trajectories.
(a) Motion sequence without extended SDF
(b) Motion sequence with extended SDF
Demonstration
NCDS Trajectory
RDFobstacle
RDFextendedsdf
(c) Comparison of task space trajectories
Figure 11: EMPTYING THE DISHWASHER task: A series of overlapped snapshots shows the PLACE PLATE skill performed by the Franka-
Emika Panda robot using an RDF with grasped plate (left and middle panel). The right plot shows a comparison of the resulting trajectories
using different methods w.r.t the provided demonstrations starting from the gray points.
Table III: Comparison of the inference time tstep in milliseconds
for a single inference step for obstacle avoidance methods based
on implicit obstacle representations. The obstacle representations
standard architecture for SDF [15, 47], BP as polynomial SDF
SDCSDDCDT
Table IV: A comparison of the inference time tflow in milliseconds
required for a single step in the diffeomorphism  (see Equation
(24)), where tJacobian represents the inference time needed to compute
the Jacobian J for the SDC, across different solver types (see
Table V in the Appendix). The following obstacle representations
method are used: SDF of geometric primitive (GP) as ground truth,
MLP as standard architecture for SDF  , BP as polynomial
SDF architecture  and a Hilbert Map (HM) .
tjacobian
E. Real Robot Experiments
Here we aim at demonstrating the applicability of the
proposed obstacle avoidance methods on real-world settings.
1) Experimental Setup: We use a 7 DoF Franka-Emika
Panda robot endowed with a depth camera. The robot
workspace is a part of a kitchen environment featuring a
and execute two real-world tasks: EMPTYING A DISHWASHER
and OPENING A DISHWASHER. In all two tasks, the robot
should safely and autonomously interact with a dishwasher,
maintaining contraction stability against external disturbances
and ensuring collision-free operation even with grasped ob-
jects. In this context, the robot must not only reach specific
target positions but also follow a defined motion trajectory
them while executing a designated motion. Moreover, multiple
the robots path.
To model the obstacle, we sample a point cloud P
i0 of the robot workspace on the fly using the depth
camera mounted at the robot end-effector. To prevent the robot
surface points from being represented in the point cloud, the
point cloud is filtered, defining a new point cloud P
{pi PR > 0}. The sampled and filtered point clouds
are merged incrementally and subsequently downsampled to
a voxel size of 2cm. Using these processed point cloud data,
an SDF function of the robots surface is used for obstacle
avoidance by means of the proposed methods SDC and SDDC.
We collect the training data for each skill using kinesthetic
teaching. The following skills were recorded: PLACE CUP,
PLACE PLATE, PLACE PLATE IN RACK, OPEN DOOR, GRASP
these skills are shown in Fig. 16 in the Appendix. To execute
a robot skill, the integrated output of the corresponding NCDS
model is sent out as a reference to the robot joint impedance
controller [46, 63], using a control frequency fjimp  5Hz.
2) Real-world Obstacle Avoidance Behavior: Given the set
of contractive skills learned via NCDS, we evaluate our obsta-
cle avoidance method in the tasks: OPEN DISHWASHER WITH
(a) Position trajectories
(b) Velocity time series: Position (left), Orientation (right)
Figure 12: Adaptation robustness test for the PLACE PLATE IN RACK
skill performed on the Frank-Emika Panda robot using CDF and
under perturbations at 10s and 21s.
STACKED CUPS and PLACE PLATE. Specifically, we test the
SDT pipeline with an RDF as distance function and the SDC
method. The robots implicit distance function is extended
to include the plates SDF that was previously learned via
Equation (15). The experiment results are shown in Fig. 11.
by closely analyzing Fig. 11a, it can be observed that if the
robot SDF is not extended with implicit representation of
the grasped object a collision can occur. Figure 11c shows
the difference among the reproduced trajectories when the
plate is attached (where the demonstrations are also plotted
as a reference). Notably, the robot avoids both the cups and
dishwasher base, through an initial path deviation.
3) Skill Modulation Robustness: We assess the skill robust-
ness using the PLACE PLATE IN RACK skill in the OPEN
DISHWASHER WITH STACKED CUPS task. The disturbances
that we introduce are: First, moving one joint of the robot
at 10s; and second, directly moving the end-effector at 21s.
The results are shown in Fig. 12, where it is possible to
observe sudden velocity changes at 10s and 21s (see Fig. 12b),
matching the aforementioned perturbations. The peak at 23s
suggests oscillatory behavior caused by the disturbance at 21s,
while the smaller peak at 10s reflects the disturbance in joint
Figure 12a shows that disturbances vanish over time. Initial
differences may stem from variations in configuration, but
the perturbed path converges to the non-disturbed trajectory,
suggesting effective contraction.
Point Cloud Size
Inference Time in ms
CDFsingle
RDFsingle
Figure 13: Comparison of the inference times for the SDC method
under three different approaches for computing the robot SDF:
(1) CDF evaluated at all points, (2) CDF evaluated at a single closest
total inference time into two components: The flow inference time and
the inference time for computing the Jacobian of the diffeomorphism.
4) Inference Time: To assess the real-time capability of the
proposed SDC method, the computation time with respect to
the point cloud size among different robot SDF functions is
reported in Fig. 13). Note that for large point clouds, it is
particularly beneficial to filter out only the nearest point from
the input point cloud and then use this point to query the
SDT. Using this strategy, the flow and Jacobian computation
times remain constant, and therefore the overall inference time
increases only marginally, mainly because the robot SDF must
handle more query points. However, this additional overhead
can be efficiently parallelized.
In contrast, when all points in the point cloud are used
for inference, the computation time becomes unaffordable
for real-time applications, particularly due to the increased
computational load of the Jacobian calculation in the diffeo-
morphism. Furthermore, the CDF exhibits significantly faster
inference times overall and is therefore preferable to the RDF.
In addition to the foregoing results, the inference time of the
robot SDF as a function of the ODE solver is provided in
Table VI in the Appendix.
VII. DISCUSSION
Next we point out the limitations of the proposed ap-
proaches and elaborate on possible further research directions.
A. Limitations
1) Concave Obstacles: The experiments have shown that
concave obstacle surfaces lead to local stability that limits
the execution of robotic skills, indicating that only convex
obstacles can be reliably avoided with the proposed meth-
ods. Although the minimal concave properties of the learned
distance function, did not show any local instability in the
2) Inference Time: To maintain the real-time capability of
the framework, one is restricted by the size of the point cloud
and the ODE solver used. This could result in less precise
obstacle avoidance, especially when resources are limited.
3) Discretization: The discretization of the system states
could lead to a corner case. Specifically, if the sampling
rate does not match the system dynamics, a collision might
occur because the integrated state at the last time step could
already lie within an obstacle. Although this issue is inherent
to dynamical systems, it can be exacerbated if sgrad in Eq. (19)
makes the barrier too steep. Furthermore, an overly steep
barrier might force the system to operate at high velocities,
potentially exceeding system safe limits.
B. Future Work
1) Concave Obstacles: In order to handle concave obsta-
convex properties using isosurface tracking and manifold mod-
ulation to handle non-convex obstacles. However, contraction
preservation remains unproven and warrants future investiga-
tion. In addition, the barrier function could be extended in
such a way that the surface curvature is taken into account
and has a stronger effect in non-convex regions in order to
prevent local stability.
2) Dynamic Obstacles: In addition to the static obstacles
examined so far, dynamic obstacles can also be considered.
In general, these have no influence on the stability of the
presented approach as long as the sampling rate is significantly
higher than the dynamic of the obstacle. Learning the dynam-
ics of the obstacle using an SDF is a substantial challenge
and would have to be fundamentally investigated beforehand.
If the dynamics qo of the obstacles in configuration space are
known or estimated, we could potentially incorporate this into
a barrier function bswept,o, analogous to the swept features in
Eqs. (20) and (21), to adapt obstacle avoidance as a function
of the relative motion of the obstacle. This function amplifies
when the contractive system moves opposite to the direction of
the obstacle, but relaxes when moving in the same direction,
qSDT  qo
qSDT qSDT
have to be investigated in future research.
3) Inference Time: To further optimize the computation
time of the method for real-time use, it is recommended to
consider only obstacles that are within the robots operating
space. Furthermore, incrementally learned SDF functions
could be leveraged to learn complex scenes as SDF and use
them for the proposed framework, which could be particularly
relevant for mobile robot use cases. In addition, it would
also be conceivable to use a model that directly predicts the
distance between two surfaces in order to achieve even more
precise obstacle avoidance and to become independent of any
point cloud; the paper by Goel and Tabib  could be used
as a inspiration.
4) Control Barrier Functions: It may also be possible to
extend our barrier function approach to include a Control
Barrier Function (CBF)  that dynamically accounts for
system inputs. The assumption is that the safe set defined by
a CBF h(x) [56, Eq. (5)]) coincides with the region outside
obstacles exactly as given by the SDF. In other words, each
obstacle boundary is defined by the zero level set SDF(x)  0
and similarly the safe-set boundary is defined by h(x)  0.
This correspondence suggests that a CBF constructed from an
SDF inherently embeds information regarding both the safe
region and the direction of the boundary. We can therefore
design a time dependent vector field guided by the gradient
of the CBF, whose flow induces a diffeomorphism that repels
the system from unsafe areas.
VIII. CONCLUSION
This paper introduces two novel contraction-preserving
whole-body obstacle avoidance methods, namely the Signed
Distance Field Differential Coordinate Change (SDDC) and
the Signed Distance Field Coordinate Change (SDC). Both
methods leverage learned implicit distance functions of the
robots surface, combining their gradients with barrier func-
tions to define a flow that maps learned contractive skills onto
an obstacle-avoiding manifold. Specifically, the SDDC relies
on a differential coordinate change, while the SDC employs a
standard coordinate transformation enabled by the constructed
flow. Both approaches are particularly relevant for contractive
robot skills or contractive dynamical systems in general, since
most existing obstacle avoidance strategies fail to preserve
the required stability properties. Furthermore, we propose
new obstacle avoidance metrics that facilitate benchmarking
and comparative evaluations across different methods. Exper-
imental results show that the proposed approaches effectively
preserve the underlying vector field and yield trajectories with
minimal curvature changes. Real-world robot experiments con-
firm the practical applicability of the methods, underscoring
the potential of the SDDC and SDC approaches for robust,
contraction-preserving obstacle avoidance.
REFERENCES
Amin Abyaneh, Mahrokh Ghoddousi Boroujeni, Hsiu-
Chin Lin, and Giancarlo Ferrari-Trecate.
Contractive
dynamical imitation policies for efficient out-of-sample
recovery. In International Conference on Learning Rep-
resentations (ICLR), 2025. URL
forum?idlILEtkWOXD. 2
Aaron D. Ames, Samuel Coogan, Magnus Egerst-
Tabuada. Control barrier functions: Theory and appli-
cations. In European Control Conference (ECC), pages
Brenna D. Argall, Sonia Chernova, Manuela Veloso,
and Brett Browning. A survey of robot learning from
demonstration.
Robotics and Autonomous Systems, 57
Hadi Beik-Mohammadi, Sren Hauberg, Georgios Ar-
Neural contractive dynamical systems.
International Conference on Learning Representations
(ICLR), 2024.
iAYIRHOYy8. 1, 2, 4, 8, 9
Hadi Beik-Mohammadi, Sren Hauberg, Georgios Ar-
neural contractive dynamical systems: On multiple tasks
and Riemannian safety regions, 2024. URL
Donald J. Berndt and James Clifford.
Using dy-
namic time warping to find patterns in time series.
In International Conference on Knowledge Discov-
ery and Data Mining (KDD), page 359370. AAAI
Aude Billard, Sylvain Calinon, Rudiger Dillmann, and
Stefan Schaal. Robot Programming by Demonstration,
pages 13711394.
Springer Berlin Heidelberg, Berlin,
Dillmann.
Learning
Springer International Publishing, Cham, 2016.
Caroline Blocher, Matteo Saveriano, and Dongheui Lee.
Learning stable dynamical systems using contraction the-
ory. In International Conference on Ubiquitous Robots
and Ambient Intelligence (URAI). IEEE, 2017.
Ricky T. Q. Chen, Yulia Rubanova, Jesse Bettencourt,
and David K Duvenaud.
Neural ordinary differential
equations.
Advances
Information
Processing
(NeurIPS),
filespaper2018
file69386f6bb1dfed68692a24c8686939b9-Paper.pdf. 4
Yiting Chen, Xiao Gao, Kunpeng Yao, Loc Nieder-
tiable robot neural distance function for adaptive grasp
synthesis on a unified robotic arm-hand system, 2023.
Charles Dawson, Sicun Gao, and Chuchu Fan.
control with learned certificates: A survey of neural
and control. IEEE Transactions on Robotics (T-RO), 39:
Christopher K. Fourie, Nadia Figueroa, and Julie A.
On-manifold strategies for reactive dynamical
system modulation with nonconvex obstacles.
Transactions on Robotics (T-RO), 40:23902409, 2024.
URL  2, 14
Kshitij Goel and Wennie Tabib. Distance and collision
probability estimation from gaussian surface models,
Amos Gropp, Lior Yariv, Niv Haim, Matan Atzmon,
and Yaron Lipman. Implicit geometric regularization for
learning shapes. In International Conference on Machine
Learning (ICML), pages 37893799. PMLR, 2020. URL
Victor Hernandez Moreno, Steffen Jansing, Mikhail Po-
stacles and opportunities for learning from demonstration
in practical industrial assembly: A systematic literature
review. Robotics and Computer-Integrated Manufactur-
Yanlong Huang, Leonel Rozo, Joao Silverio, and Dar-
win G Caldwell.
Kernelized movement primitives.
International Journal of Robotics Research (IJRR),
Lukas Huber, Aude Billard, and Jean-Jacques Slotine.
Avoidance of convex and concave obstacles with conver-
gence ensured through contraction. IEEE Robotics and
Automation Letters (RA-L), 4(2):14621469, April 2019.
Lukas Huber, Jean-Jacques Slotine, and Aude Billard.
Avoiding dense and dynamic obstacles in enclosed
tions on Robotics (T-RO), 38(5):31133132, 2022. doi:
James E. Humphreys. Introduction to Lie Algebras and
Representation Theory. Springer New York, 1972. ISBN
Auke Jan Ijspeert, Jun Nakanishi, Heiko Hoffmann,
Peter Pastor, and Stefan Schaal. Dynamical movement
Neural Computation, 25:328373, 2013.
Muhammad Zubair Irshad, Mauro Comi, Yen-Chen Lin,
Nick Heppert, Abhinav Valada, Rares Ambrus, Zsolt
A survey, 2024. URL  2
Sean Jaffe, Alexander Davydov, Deniz Lapsekili, Ambuj
In Conference on Neural Information Processing Systems
(NeurIPS), 2024. URL
YYnP3Xpv3y. 2
Bert Juttler and Alf Felis.
Least-squares fitting of
algebraic spline surfaces.
Advances in Computational
Seyed Mohammad Khansari-Zadeh and Aude Billard.
Learning stable nonlinear dynamical systems with Gaus-
sian mixture models.
IEEE Transactions on Robotics
Seyed Mohammad Khansari-Zadeh and Aude Billard.
A dynamical system approach to realtime obstacle
avoidance. Autonomous Robots, 32(4):433454, March
O. Khatib. Real-time obstacle avoidance for manipulators
and mobile robots. In IEEE International Conference on
Robotics and Automation (ICRA), volume 2, pages 500
Jin-Oh Kim and Pradeep K. Khosla. Real-time obstacle
avoidance using harmonic potential functions.
Transactions on Robotics and Automation, 8(3):338349,
Holger Klein, Noemie Jaquier, Andre Meixner, and
Tamim Asfour. On the design of region-avoiding met-
rics for collision-safe motion generation on Riemannian
manifolds.
In IEEERSJ International Conference on
Intelligent Robots and Systems (IROS), pages 23462353,
Mikhail Koptev, Nadia Figueroa, and Aude Billard.
Neural joint space implicit signed distance functions
for reactive robot manipulator control. IEEE Robotics
and Automation Letters (RA-L), 8(2):480487, February
URL  2, 3,
Maria Koskinopoulou, Stylianos Piperakis, and Panos
Trahanias.
Learning from demonstration facilitates
human-robot collaborative task execution. In ACMIEEE
International Conference on Human-Robot Interaction
(HRI), pages 5966, 2016. URL
John M. Lee.
Riemannian Manifolds.
Springer New
John M. Lee.
Introduction to Smooth Manifolds.
Springer New York, 2012. ISBN 9781441999825. doi:
A. Lemme, Y. Meirovitch, M. Khansari-Zadeh, T. Flash,
A. Billard, and J. J. Steil. Open-source benchmarking for
learned reaching motion generation in robotics. Paladyn,
Journal of Behavioral Robotics, 6(1), 2015. URL http:
Yiming Li, Xuemin Chi, Amirreza Razmjoo, and Sylvain
Calinon. Configuration space distance fields for manipu-
lation planning. In Proc. Robotics: Science and Systems
Yiming Li, Yan Zhang, Amirreza Razmjoo, and Sylvain
Calinon. Representing robot geometry as distance fields:
Applications to whole-body manipulation.
International Conference on Robotics and Automation
(ICRA), pages 1535115357, 2024. URL
Puze Liu, Kuo Zhang, Davide Tateo, Snehal Jauhri,
Jan Peters, and Georgia Chalvatzaki. Regularized deep
signed distance fields for reactive motion generation. In
IEEERSJ International Conference on Intelligent Robots
and Systems (IROS), pages 66736680, 2022.
Winfried Lohmiller and Jean-Jacques E. Slotine.
contraction analysis for non-linear systems. Automatica,
URL https:
Jonathan
Lorraine
Hossain.
Learning
functions
structured
Jacobians.
Workshop
International
Conference
Learning
accepted paperspdfsINNF 2019 paper 10.pdf. 4
Tomas Lozano-Perez. Robot programming. Proceedings
of the IEEE, 71(7):821841, 1983. doi: 10.1109PROC.
Ian R. Manchester and Jean-Jacques E. Slotine.
trol contraction metrics: Convex and intrinsic criteria
for nonlinear feedback design.
IEEE Transactions on
Automatic Control, 62(6):30463053, 2017. URL http:
Ante Maric, Yiming Li, and Sylvain Calinon.
learning of piecewise polynomial signed distance fields
for manipulation tasks, 2024. URL
Nicolas Marticorena, Tobias Fischer, Jesse Haviland, and
Niko Suenderhauf. Rmmi: Enhanced obstacle avoidance
for reactive mobile manipulation using an implicit neural
Klaus Neumann and Jochen J. Steil.
Learning robot
motions with stable dynamical systems under diffeo-
morphic transformations.
Robotics and Autonomous
Systems (RAS), 70:115, 2015. ISSN 0921-8890. URL
Joseph Ortiz, Alexander Clegg, Jing Dong, Edgar Su-
Mukadam. iSDF: Real-time neural signed distance fields
for robot perception. In Robotics: Science and Systems
(R:SS), 2022. URL
Christian Ott, Alin Albu-Schaffer, Andreas Kugi, and
Gerd Hirzinger.
On the passivity-based impedance
control of flexible joint robots. IEEE Transactions on
Robotics (T-RO), 24(2):416429, 2008. URL
Jeong Joon Park, Peter Florence, Julian Straub, Richard
continuous signed distance functions for shape represen-
tation. In IEEECVF Conference on Computer Vision and
Pattern Recognition (CVPR), pages 165174, June 2019.
URL  2, 4,
Andrew Pressley.
Elementary Differential Geometry.
Springer London, 2010.
Eduard Pujol and Antonio Chica. Adaptive approxima-
tion of signed distance fields through piecewise contin-
uous interpolation. Computers and Graphics, 114:337
j.cag.2023.06.020. URL
sciencearticlepiiS0097849323001139. 4
Fabio Ramos and Lionel Ott.
Hilbert maps: Scal-
continuous
occupancy
stochas-
tic gradient descent.
The International Journal of
Robotics Research (IJRR), 35(14):17171730, December
Muhammad Asif Rana, Anqi Li, Dieter Fox, Byron
ing flows: Diffeomorphic reduction for learning stable
dynamical systems.
In Conference on Learning for
Dynamics and Control (L4DC), pages 630639, 2020.
Harish Ravichandar and Ashwin Dani.
Learning con-
tracting nonlinear dynamics from human demonstration
for robot motion planning.
In ASME Dynamic Sys-
ciety of Mechanical Engineers, October 2015.
Harish Ravichandar, Athanasios S. Polydoros, Sonia
Recent advances in
robot learning from demonstration.
Annual Review
of Control, Robotics, and Autonomous Systems, 3(1):
annurev-control-100819-063206. URL
10.1146annurev-control-100819-063206. 1
Harish chaandar Ravichandar and Ashwin Dani. Learn-
ing position and orientation dynamics from demonstra-
tions via contraction analysis.
Autonomous Robots,
Navid Rezazadeh, Maxwell Kolarich, Solmaz S. Kia, and
Negar Mehr. Learning contraction policies from offline
data. IEEE Robotics and Automation Letters (RA-L), 7
Ivan Dario Jimenez Rodriguez, Noel Csomay-Shanklin,
Yisong Yue, and Aaron D. Ames. Neural gaits: Learning
bipedal locomotion via control barrier functions and
zero dynamics policies. In Learning for Dynamics and
Control Conference (L4DC), volume 168, pages 1060
rodriguez22a.html. 14
Leonel Rozo, Sylvain Calinon, Darwin G. Caldwell,
Pablo Jimenez, and Carme Torras. Learning physical col-
laborative robot behaviors from human demonstrations.
IEEE Transactions on Robotics (T-RO), 32(3):513527,
2016. URL
Leonel Rozo, Heni Ben Amor, Sylvain Calinon, Anca
for humanrobot collaboration.
Autonomous Robots,
Leonel Rozo, Andras G. Kupcsik, Philipp Schillinger,
Meng Guo, Robert Krug, Niels van Duijkeren, Markus
Mathias Burger, and Kai O. Arras.
The e-bike mo-
tor assembly: Towards advanced robotic manipulation
for flexible manufacturing.
Robotics and Computer-
Integrated Manufacturing, 85:102637, 2024.
articlepiiS0736584523001126. 1
Stefan Schaal. Learning from demonstration. In Neural
Information Processing Systems (NeurIPS), 1996. URL
filespaper1996
file68d13cf26c4b4f4f932e3eff990093ba-Paper.pdf. 1
John W. Simpson-Porco and Francesco Bullo.
traction theory on riemannian manifolds.
Control Letters, 65:7480, 2014. ISSN 0167-6911. URL
Sumeet Singh, Spencer M Richards, Vikas Sindhwani,
Jean-Jacques E Slotine, and Marco Pavone.
Learning
stabilizable nonlinear dynamics with contraction-based
regularization.
The International Journal of Robotics
M. W. Spong.
Modeling and control of elastic joint
robots. Journal of Dynamic Systems, Measurement, and
Hang Su, Andrea Mariani, Salih Ertug Ovur, Arianna
Toward teaching by demonstration for robot-assisted
minimally invasive surgery. IEEE Transactions on Au-
tomation Science and Engineering, 18(2):484494, 2021.
Dawei Sun, Susmit Jha, and Chuchu Fan.
Learning
certified control using contraction metric. In Conference
on Robot Learning (CoRL), pages 15191539, 2020.
Hiroyasu Tsukamoto and Soon-Jo Chung. Neural con-
traction metrics for robust estimation and control: A
convex optimization approach.
IEEE Control Systems
Hiroyasu
Jacques E. Slotine.
Contraction theory for nonlinear
stability analysis and learning-based control: A tutorial
overview. Annual Reviews in Control, 52:135169, 2021.
J. Urain, M. Ginesi, D. Tateo, and J. Peters. Imitation-
by normalizing flows.
In International Conference on
Intelligent Robots and Systems (IROS), pages 52315237.
Tim Welschehold, Christian Dornhege, and Wolfram
Burgard.
Learning manipulation actions from human
demonstrations.
In International Conference on Intel-
ligent Robots and Systems (IROS), pages 37723777,
2016. URL
Jiechao Zhang, Hadi Beik Mohammadi, and Leonel
Rozo. Learning Riemannian stable dynamical systems
via diffeomorphisms. In Conference on Robot Learning
(CoRL), 2022.
o8dLx8OVcNk. 2
Weiming Zhi, Tin Lai, Lionel Ott, and Fabio Ramos.
Diffeomorphic transforms for generalised imitation learn-
ing. In Learning for Dynamics and Control Conference
(L4DC), pages 508519, 2022. URL
mlr.pressv168zhi22a.html. 1, 2, 8, 9, 10, 11
APPENDIX
A. Signed Distance Fields
1) Loss Functions: According to Park et al. , learned
SDF methods with parameters  can be interpreted as a
decision boundary that assigns points to either the inside
Hi or outside Hf of an object, while additionally providing
the distance to the surface. To achieve these properties, an
appropriate loss function must be chosen. Park et al.
propose using an L1 reconstruction loss,
LSDF(SDF(x; ))  clamp (SDF(x; ), ) clamp(s, ) ,
where clamp(x, ) : min(, max(, x)) limits the values
within the range [, ], and s defines a boundary for the
region over which the SDF function should be defined.
Leik(SDF(x; ))  xSDF(x; )1 ,
which encourages the SDF to maintain equidistance properties
across the domain, meaning that for any point in space, the
value of the SDF corresponds to the shortest distance to the
surface Hs . In addition, Ortiz et al.  introduced a
gradient-based loss,
Lgrad(SDF(x; ), g)  1
xSDF(x; )  g
xSDF(x; )g,
which penalizes deviations of the gradient of the SDF from
the surface normal by computing the cosine distance between
the predicted gradient and the true normal vector g. Juttler and
Felis  additionally introduced the concept of tension loss,
which enhances the smoothness of the function.
Ltension(SDF(x; ))  2
xSDF(x; )2
B. Contraction-preserving Obstacle Avoidance
1) Multi-modal demonstrations: Figure 14 displays the
evaluation of the SDC on a multi-modal LASA dataset skill.
Under a high contraction rate, the green trajectory remains
in its initial modal state. Conversely, a reduced contraction
2) Flow Solver: Table V shows a overview of different
types of solvers that can be used to solve the flow in Eq. (24).
Demonstrations
Figure 14:
Obstacle
avoidance with SDC
features on an NCDS
model trained on a
multi-modal
circular obstacles are
depicted by red lines.
Table V: Overview of various ODE solvers
Description
Complexity
One-step
solution of
- Only for
surfaces
Numerical
first-order
ODE solver
Any cur-
- Very im-
Numerical
fourth-order
ODE solver
Any cur-
- Slowest
3) Reactive Obstacle Avoidance: The following is a proof
which shows that reactive obstacle avoidance as in Eq. (23)
can violate contraction stability.
scribed in Equation (23), we need to show the contraction
conditions as described in Theorem 2. Therefore, taking the
derivative of fc leads to,
q (fc(q) b(x, q)qSDF)  F HSDF(x, q),
HSDF(x, q)  2b(x, q)SDF(x, q)
is the Hessian of the SDF with the proposed barrier func-
Substituting
q into Theorem 2, we must satisfy,
Multiplying out all terms using Equation (23) leads to,
G  GF  FG  GHSDF  H
SDFG 2G.
Since fc is contractive by design, we known from Theo-
rem 2 that,
so it remains to show that,
GHSDF  H
If HSDF has positive eigenvalues, then GHSDF  H
can be positive definite, thus violating contraction. As SDF
may have any shape, we cannot avoid having positive eigen-
values in HSDF and thus violate the contraction condition.
4) Signed Distance Field Diffeomorphic Transform: In the
property and that the contraction metric is equivalent to the
Riemannian metric of the obstacle-avoiding manifold Y. The
proof is inspired by Manchester and Slotine .
Consider a contractive system,
q  fc(q),
which can be described via its differential dynamics,
q  A(q, t)q
Given the differential dynamics, a differential coordinate
change q  Jy can be introduced based on the smooth
By applying the coordinate change q  Jy to the
differential contractive system, this results in,
y  Ay(y, t)y.
Given q  Jy, y can be calculated via,
Jy  Jy  J y.
Given Equation 51 and the coordinate changes q  Jy,
Equation (53) can be transformed as follows,
Note that the contraction metric Gq of fc is given
by Gq  I, since the contractive system fc is defined
in Euclidean space. For the contraction metric Gy of
the dynamical system mapped into the obstacle-avoiding
manifold we choose,
where J is the the Jacobian of the flow .
The derivation of the metric results in,
Gy  JJ  JJ.
Given Gy, Gy, Ay, the contraction condition from Theo-
rem 2 can be shown in the following,
y Gy  GyAy  2Gy 0,
JJ  JJ  J
JJ  JJ  J
(A  A 2I)J 0.
It is known from matrix calculations that the definiteness
of a matrix A under J
AJ is preserved. Therefore, only
the term (A  A 2I) must be negative definite. This
property holds by the construction of the contractive system,
implying that the entire SDC system is also contractive.
Demonstration
NCDS Trajectory
SDCperturbed
(a) Trajectories
Time in s
Velocity in cm
Time in s
Velocity in cm
(b) Velocities Series - Position (left), Orientation (right)
Figure 15: Move Sine skill performed on the robot with external
perturbation
C. Experiments
1) Evaluation Metrics: We use the DTWD  defined as,
base(x), m(x)
jl(base(x))
il(m(x)) d
il(m(x))
jl(base(x)) d
measuring the similarity between two trajectories, which may
vary in length andor velocity . In our context, base denotes
the base trajectory of length l(base), and it is compared to
a collision-free modulated trajectory m of length l(m). A
low DTWD indicates that the original vector field was slightly
modulated by the obstacle avoidance term.
The minimum distance between the robot surface and the
obstacle over the course of the skill execution is defined as
Dmin  min
xm SDF(x).
The MJ metric is defined as,
xbase ... base(x)max
xm ... m(x)
In our context, base denotes the base trajectory, and it is
compared to a collision-free modulated trajectory m. A high
MJ indicates that the modulated vector field has a stronger
jerk than in the original skill motion profile.
2) Dishwasher Dataset: Figure 16 shows all the demon-
strated skills used for the interaction with the dishwasher. Note
that the last state in the demonstration is repeated N  20
times to ensure that the contractive model learns a dynamic
that reaches a target state at the end of the trajectory. If the
goal is to learn an oscillating motion or a motion without a
stable final state, this is not necessary.
(a) Place Plate
(b) Place Plate in Rack
(c) Place Cup
(d) Grasp Doorhandle
(e) Open Door
(f) Move Sine
Figure 16: Overview of all 6 motion sequences in the dishwasher dataset. Demonstrations are displayed as black solid trajectories, with start
and end points represented as red crosses and gray points, respectively.
(a) Motion sequence without obstacle avoidance
(b) Obstacle avoidance without plate SDF
(c) Obstacle avoidance with plate SDF
Figure 17: EMPTYING THE DISHWASHER task: A series of overlapped snapshots shows the PLACE PLATE IN RACK skill performed by the
Franka-Emika Panda robot using an CDF with grasped plate in the right panel and without the grasped plate in the middle panel. The left
plot shows the execution of the skill without obstacles.
3) Robustness Test: In the following, the contraction be-
havior and robustness of the Move Sine skill is tested by
introducing a manual perturbation during skill execution. The
result is shown in Fig. 15. The disturbances are observed with
a velocity spike (Fig. 15b), a position deflection (Fig. 15a) and
a slight orientation offset (Fig. 15b). The successful stabilized
disturbance in Fig. 15a shows the robustness and contraction
stability of the learned model.
4) Real World Skill Execution: Fig. 17a shows the robot
successfully executing the Place Plate in Rack skill.
5) Real World Obstacle Avoidance: Further experiments in
Fig. 17b and Fig. 17c demonstrate the need to extend the
robots SDF with the SDF of the grasped object.
6) Real World Inference time: Table VI shows the inference
times of ODE solvers during real-world experiments, which
approximately match the complexities O listed in Table V of
the papers appendix. Clearly, the choice of the SDF is most
critical.
Runge-Kutta
Table VI: Comparison of the in-
ference time tstep (in ms) required
for a diffeomorphism step  for
the SDC with 1000 points, across
different solvers.
