=== PDF文件: Kinodynamic Trajectory Following with STELA Simultaneous Trajectory Estimation & Local Adaptation.pdf ===
=== 时间: 2025-07-21 14:02:56.443126 ===

请从以下论文内容中，按如下JSON格式严格输出（所有字段都要有，关键词字段请只输出一个中文关键词，要中文关键词）：
{
  "论文标题": "",
  "研究主题关键词": "",
  "应用场景关键词": "",
  "主要方法关键词": "",
  "创新点关键词": "",
  "主要结论关键词": ""
}
内容：Kinodynamic Trajectory Following with STELA:
Simultaneous Trajectory Estimation  Local Adaptation
Edgar Granados, Sumanth Tangirala, Kostas E. Bekris
Dept. of Computer Science, Rutgers University, NJ, USA
{eg585, st1122, kb572}cs.rutgers.edu
Fig. 1: Middle: STELA execution on a real MuSHR robot. The middle image is a composite from 2 top-down cameras used for localization,
covering a 7.6mx2.3m workspace. The robot follows a trajectory computed by a planner with knowledge of the obstacles (rocks and boxes)
but no knowledge of the ramp, affecting execution. Top and Bottom: i) STELA estimation and plan when the robot is on the unknown ramp;
ii) the robot recovers from the ramp and avoids an obstacle; iii) STELA adapts the plan to follow the planned trajectory while avoiding
another obstacle; iv) the robot reaches the end of the plan without collisions. Rviz visualization includes obstacles, planned trajectory (green),
forward horizon (white), and history (cyan). Stars indicate corresponding states between the visualization and the real robot.
AbstractState estimation and control are often addressed
execution errors, and discrepancies between the planning model
and reality. Simultaneous control and trajectory estimation
using probabilistic graphical models has been proposed as a
unied solution to these challenges. Previous work, however,
relies heavily on appropriate Gaussian priors and is limited to
holonomic robots with linear time-varying models. The current
research extends graphical optimization methods to vehicles
with arbitrary dynamical models via Simultaneous Trajectory
Estimation and Local Adaptation (STELA). The overall approach
initializes feasible trajectories using a kinodynamic, sampling-
based motion planner. Then, it simultaneously: (i) estimates the
past trajectory based on noisy observations, and (ii) adapts the
controls to be executed to minimize deviations from the planned,
feasible trajectory, while avoiding collisions. The proposed factor
graph representation of trajectories in STELA can be applied
for any dynamical system given access to rst or second-
order state update equations, and introduces the duration of
execution between two states in the trajectory discretization as an
optimization variable. These features provide both generalization
and exibility in trajectory following. In addition to targeting
computational efciency, the proposed strategy performs incre-
mental updates of the factor graph using the iSAM algorithm
and introduces a time-window mechanism. This mechanism
allows the factor graph to be dynamically updated to operate
over a limited history and forward horizon of the planned
trajectory. This enables online updates of controls at a minimum
of 10Hz. Experiments demonstrate that STELA achieves at least
comparable performance to previous frameworks on idealized
vehicles with linear dynamics. STELA also directly applies to
and successfully solves trajectory following problems for more
complex dynamical models. Beyond generalization, simulations
assess STELAs robustness under varying levels of sensing and
execution noise, while ablation studies highlight the importance of
different components of STELA. Real-world experiments validate
STELAs practical applicability on a low-cost MuSHR robot,
which exhibits high noise and non-trivial dynamics.
I. INTRODUCTION
This paper focuses on achieving reliable simultaneous tra-
jectory estimation and following for kinodynamic systems
in static, partially modeled environments, under sensing and
actuation uncertainty as well as reality gaps for the planning
robot model. It proposes Simultaneous Trajectory Estimation
and Local Adaptation (STELA), a graphical optimization
framework that builds on top of prior methods for simul-
taneous state estimation and control based on factor graph
representations [7, 22]. It extends: (i) the efcacy of such
approaches by increasing the success rate of returning feasible,
collision-free trajectories, even under signicant noise, (ii)
their applicability to more general dynamical systems, and (iii)
achieves improved computational efciency.
for low-cost platforms, such as the MuSHR robot used in
this work and shown in Fig. 1, can be challenging due to
observation noise, high actuation errors, and a signicant re-
ality gap of the underlying models. For robots with signicant
rough approximations. This results in signicant deviations
from the planned trajectory during execution. While system
identication [16, 3, 44] can reduce the model gap, it does
not fully address it. This is often because the environment is
also partially observable. For instance, a oor map indicating
obstacles may be available, but not all aspects of the environ-
ment are modeled, such as friction coefcients and traversable
An approach to deal with the model gap is to use feedback
controllers for trajectory following, given the latest state
estimate [12, 33]. However, observation and actuation noise
can lead to errors in state estimation, where the focus is often
State estimation noise can compound to result in deviations
in trajectory following. In addition, most trajectory following
controllers ignore obstacles and are executed independently
from the state estimation process, so signicant trajectory
deviations also lead to collisions.
An alternative strategy is replanning online, e.g., with
sampling-based motion planners (SBMP) [21, 27, 23] or trajec-
tory optimization planners [36, 41, 20, 42]. SBMPs can even-
tually provide high-quality, feasible solutions, but typically it
is not possible to achieve high-frequency replanning rates for
dynamical systems (e.g., at or above 10Hz) to deal with the
model gap without a trajectory follower. Optimization-based
approaches can sometimes provide solutions fast, but due to
their local nature, they may get stuck in local minima if not
properly initialized and can be parameter sensitive.
Factor Graph Optimization: A promising direction for
addressing the above issues, which this paper builds on, is
probabilistic graphical models based on factor graphs and
corresponding optimization methods . They can simulta-
neously solve trajectory estimation and control or planning
challenges as a unied problem [22, 29]. These solutions
perform smoothing instead of ltering, i.e., they estimate the
entire most likely trajectory the robot has followed given all
the available observations. Smoothing often leads to improved
estimates relative to ltering. Smoothing solutions were tradi-
tionally slower to compute, but the progress with factor graph
optimization tools has allowed such problems to be solved
online. Furthermore, these methods are able to adapt the robot
controls simultaneously to achieve collision avoidance by
taking obstacles into account during the control optimization
(i) rely heavily on Gaussian priors regarding the underlying
probabilistic processes, which may not reect the true uncer-
tainty of the system, and (ii) are limited to holonomic robots
given linear-time varying models, reducing their applicability
on non-holonomic vehicles with signicant dynamics. Further-
frequencies to maximize robustness to disturbances.
Proposed
STELA framework rst calls an asymptotically optimal SBMP
for kinodynamic systems [23, 27] in order to acquire a feasible,
collision-free trajectory given the available planning model. A
key aspect of STELA is that it aligns the output of the SBMP
with the consecutive trajectory optimization via a common
graphical representation. Factor Graphs (FGs) are a natural
interface for this purpose. In particular, the underlying motion
graph produced by an SBMP is transformed by the proposed
approach into a FG. Then, STELA uses the extracted FG to
simultaneously perform: (a) smoothing of the past trajectory
given the latest observations, and (b) dynamically adapting the
controls to be executed so as to minimize deviations from the
SBMP trajectory, while avoiding collisions.
The proposed FG representation in STELA, illustrated in
Fig. 5, is general in nature and can be applied to any dynamical
system given access to rst or second-order state update
equations. It does not make any assumptions in terms of
Gaussian priors for the underlying processes, and it does not
require linear-time varying models, which limit applicability to
idealistic holonomic vehicles. Instead, it only uses the solution
achieved by the SBMP as a prior and employs non-linear
factors representing the systems dynamics. The proposed FG
also includes the duration of execution between two states in
the trajectory discretization as a variable to be optimized. This
allows the optimizer to stretch or contract edges depending
on the estimated state of the system. The combination of
these features provides generalization, in terms of the range of
the dynamical systems that can be modeled, as well as high
success rate in nding a collision-free path even when the
robot has deviated from the planned solution.
For increased computational efciency, the proposed strat-
egy allows for the use of incremental updates of the FG by:
(a) using the iSAM2 optimizer, and also (b) introducing a slid-
ing window mechanism. In particular, given the adopted FG
representation and seeking the Maximum a posteriori (MAP)
solution via incremental inference, the iSAM2 optimizer incor-
porates high-frequency observations, adapting the underlying
graph in a computationally efcient manner, obtaining the
most likely estimate of the robots past trajectory. The sliding
window mechanism allows the factor graph to be dynamically
updated at high frequency by operating over a limited past
history and forward horizon of the planned trajectory. The
combination of these features enables online control updates
to be generated at a minimum of 10Hz and on average at 20-
tion for different environments and different levels of observa-
tion and actuation noise both for an idealized holonomic model
used in prior work as well a second-order dynamical system
not addressable by prior FG work corresponding to a MuSHR
robot. The simulations demonstrate that STELA achieves at
least comparable, and often superior, performance to previous
frameworks on the idealized vehicle with linear dynamics.
More critically, STELA also achieves a high success rate
for the second-order dynamical system and good robustness
given different noise levels. Ablation studies highlight the
importance of different components of the approach, such as
the importance of the SBMP initialization, the introduction of
control duration as an optimization variable, and the incorpora-
tion of the sliding window approach. Real-world experiments
validate STELAs practical applicability on a low-cost MuSHR
robot that exhibits high noise and non-trivial dynamics.
II. RELATED WORK
Motion planning consists of nding a plan for a robot to
move in an environment from a starting state to a desired goal
region without collisions. Multiple classications of motion
planning algorithms have been proposed [11, 32, 2, 30]. This
paper primarily focuses on Sampling-Based Motion Planners
(SBMP) and trajectory optimization.
SBMPs build graphical representations of the underlying
robots state space and can provide guarantees, namely prob-
abilistic completeness (PC) and asymptotic optimality (AO),
for kinematic [21, 9] and kinodynamic [34, 27, 23] systems.
among different homotopic classes) and easily handle task-
specic constraints (i.e., collisions, limits), but can be nega-
tively impacted computationally as the cost of SBMP subrou-
tines increases, e.g., forward propagation, collision checking,
and nearest neighbor discovery , which is an issue when
planning for dynamical systems.
planning
cal optimization problem. Example optimization-based mo-
tion planners include Covariant Hamiltonian optimization
(CHOMP), stochastic trajectory optimization (STOMP)
, and Sequential Convex Optimization (TrajOpt) .
Starting from an initial, potentially infeasible, guess, an op-
timizer attempts to minimize an objective function subject to
Optimization methods can quickly converge to a feasible,
high-quality solution if the initial guess is in the vicinity
of one. Non-trivial environments and systems, however, can
challenge convergence and may require careful denition of
initial guess also imposes a discretization of the solution
trajectory representations via Gaussian Processes  can
minimize the discretization problem for linear time-varying
(LTV) systems that are stabilized using stochastic differential
equations (SDEs), i.e., LTV-SDE systems.
There are also integrative frameworks in the planning liter-
ature. For kinematic systems, a precomputed graph of convex
sets can be used by a mixed-integer optimizer to nd a
valid path . An approach for dynamical systems involves
the pre-computation of motion primitives, which are stitched
together by a planner [13, 32]. An interleaving approach uses
a graph to generate suggestions used by an optimizer .
Simultaneous localization and planning (SLAP)  models
the challenge as a POMDP, which is approximated ofine by a
roadmap in belief space that is updated online via observations.
In the area of state estimation, there has been a transition
from tools that explicitly estimate the probability distribution
regarding the robots state to optimization techniques, such
as those that employ Factor Graphs (FGs) . A FG is a
probabilistic graphical model that can be used to represent the
joint probability mass function of the variables that comprise
the system . FGs aim to exploit the underlying, known
structure of the problem by using sparse linear algebra tech-
niques and nd solutions via optimization algorithms, such
as Gauss-Newton. Non-linear problems require frequent re-
over the entire graph. The incremental smoothing and mapping
(iSAM2)  algorithm uses the Bayes tree  to keep
updates local, avoiding a full re-linearization of the graph.
FGs are well suited for addressing a variety of problem
(SLAM) [5, 8, 15] and simultaneous trajectory estimation and
mapping (STEAM) . Multiple initial guesses are possible
via a network of trajectories so as to initialize a FG-based
planning solution for holonomic systems .
The two closest methods to this work are also employing
FGs and integrate state estimation and planningcontrol.
They correspond to Simultaneous Trajectory Estimation And
Planning (STEAP)  and Simultaneous Control And Trajec-
tory Estimation (SCATE) . SCATE builds on top of STEAP
and also deals with dynamic obstacles. Specically, STEAP
employs Gaussian processes as dynamics, while SCATE uses
a linear time-invariant (LTI) approximation of the dynamics.
SCATE adds the LTI dynamics and dynamic obstacle factors to
the FG. The output of STEAP is a plan but does not compute
controls directly and relies on an external controller. SCATE
outputs a control to be applied to the robot. To operate at high
estimator. Neither of the two techniques is directly applicable
to systems with non-linear dynamics. Prior work also uses
naive initialization of these methods, such as a straight line
connection of the start and the goal, which can lead to local
minima due to the local nature of numerical optimization.
III. PROBLEM SETUP
Consider a robot with state space X and control space U
tasked with navigating a workspace W from initial state x0 to
a goal region XG. Obstacles divide X into collision-free Xf
and obstacle Xo subsets. The true dynamics xt  f(xt, ut)
(xt X, ut U) govern the robots motions but are not
perfectly known and may exhibit non-holonomic constraints.
In terms of its dynamics, the robot has access only to an
approximate dynamics model via a parameterized function
xt  f(xt, ut), which is dened by a set of physical parame-
ters . The approximate dynamics model f is a simplication
of the true dynamics f and does not necessarily have the same
expression as f, i.e., there may not be a choice of physical
with f. Example physical parameters for a car-like robot are
friction coefcients, steering, and throttle gains.
In addition, the approximate model f employed models the
obstacle-free workspace as a at, planar surface with uniform
friction. In reality, however, the true workspace can also
which can vary over the workspace, and (ii) an uneven surface
that can include traversable obstructions, such as a ramp.
A plan pT is a sequence of T piece-wise constant controls
{u0, . . . , uT 1)}, where each control ui is executed for a
timestep ti. When a plan pT is executed at a state xi, it
produces a trajectory f(xt, pT ), i.e., a sequence of states
{xt,    , xtT } according to a dynamics model f. Due to the
gap between the true dynamics f and the planning model f,
the executed robot trajectory f(xi, pT ) does not match the
planned trajectory
f(xi, pT ) for the same plan pT .
The robot has access to noisy sensing that provides discrete
measurements z(t), which partially inform about the robots
state x(t), such as sensing the robots pose from external
sensors. A state estimation process uses measurements z(0 : t)
to compute estimated states x(0 : t). This work assumes
perfect knowledge of obstacles poses during execution, such
as walls or obstacles that the robot should not collide with.
A controller
f) is employed to track the planned
trajectory
f given the estimated states xi and returns controls
u U. With some abuse of notation1, denote as f(xi,
the trajectory executed by the robot when the controller
executed starting at state xi.
Problem Denition: Given a: (i) start state x0 Xf, (ii)
goal region XG Xf, (iii) approximate dynamics model
f(x, u) given identied parameters , (iv) desired trajectory
f(x0, pT ) that brings the robot in XG, and (v) online
measurements z(t), the objective is to simultaneously compute
estimated robot states x(t) and execute a controller
so that the executed trajectory f(x0,
f) is collision free and
brings the robot inside XG.
Secondary objectives include minimizing the error between
estimated states x(t) and true states x(t), minimizing the error
1Trajectories above were dened for open-loop plans pT . Here the deni-
tion is adapted to receive as input the controls arising from the closed-loop
controller
Fig. 2: A typical trajectory estimation FG at time T uses state
observations zx(0 : T) and the robot model xt  f(xt, ut) to
generate state estimates
X(0 : T). The unary factors impose a
cost between observations and estimated states. The binary factors
correspond to the robots dynamics.
between the planned and the executed trajectory, as well as
minimizing the cost of the executed trajectory. In this work,
the cost corresponds to the trajectory duration.
Additional notation:
The goal region is dened by a
single conguration qG in the robots conguration space Q
so that: XG  {x Xf  d(M(x), qG) < }, or equivalently,
XG  B(qG, ), where  is a goal radius in Q according
to distance function d. The function M(x) maps states to
congurations. Estimated pastcurrent states are represented
by x(t) and future (estimated) states are represented as x(t).
The following are relevant Lie group concepts and opera-
tions; refer to  for a more in-depth explanation. Consider
qi M where M is a Lie group of dimension m and
qi Rm( TqiM) is a constant velocity (an element in the
tangent space of M at q). The function Exp : Rm M
maps vector elements to the manifold with its inverse being
dened as Between(qa, qb)  q1
qb and computes the
element that would move qa to qb. Forward integration in a
Lie group is dened as qi1  qi Exp( qiti).
IV. FOUNDATIONS: INFERENCE VIA FACTOR GRAPHS
Factor graphs (FGs) have been highly adopted for sensor
relationship between estimation and control, recent work also
explores their use in control and planning [4, 29, 30].
In probabilistic inference, the objective is to nd the set of
values  given events e. The posterior density of  is computed
via Bayes rule: p(e) p()p(e), where p() is the prior
on  and p(e) is the likelihood function. Given a prior and
a likelihood, the optimal solution is found by the maximum a
posteriori (MAP) operation:
p(e)  arg max
p()l(; e),
where the likelihood function l(; e)  p(e) species the
probability of events e given . The general likelihood function
for non-linear FGs is dened as: l(; e) exp( 1
where h is a measurement function with covariance .
two types of nodes: factors fi F and variables i . FG
edges are always between factor nodes and variable nodes.
Given an FG, its posterior distribution is:
The MAP estimate can be reduced to a non-linear least squares
problem and solved with standard solvers. Most robotic prob-
lems require the solver to operate at high frequency and incor-
porate new data on demand. Standard solvers are not enough
in robotics, as they do not take advantage of the sparsity
or the incremental nature of robotic problems. To alleviate
the FG. iSAM uses a Bayes tree to avoid re-linearization of
variables unaffected by a new measurement. Finally, a FG
implies some level of discretization, which is also present
in other estimation and trajectory optimization approaches.
The following subsections review FG representation from the
literature for estimation and planningcontrol.
A. Trajectory Estimation
Fig. 2 presents a typical FG for past trajectory estima-
tion. It computes p(T Ee) f T E
f trajf estimation
where f traj  Qt
i0 f robot
(i) is the trajectory derived from
the robots model and f estimation  Qt
i0 f estimation
are factors that incorporate the measurements. Typically, the
underlying discretization is given by the frequency of the
measurements. Discretization can be problematic for complex
dynamical systems. To avoid discretization of the dynamics,
methods often employ a Gaussian Process (GP) to model
the system, achieving continuous-time trajectories but limiting
applicability to holonomic robots with linear expressions.
Benets of Trajectory Estimation vs Filtering While
a controller only requires the latest state, methods such as
Kalmanparticle lters, which provide incremental estimates
of the latest state, solve the Bayesian ltering problem. The
latest robot state estimate, however, of an optimal solver for
the most likely trajectory problem, which STELA focuses
that of an optimal solver for ltering. Solving for the most
likely trajectory is typically computationally more expensive
than solving ltering. Given the least square approximations,
factor graph frameworks allow solving such problems online.
STELA takes advantage of this to provide high-frequency
MLE updates of the robots past trajectory. In this way,
it provides better estimates of the robots latest state, and
future controls are simultaneously co-optimized based on these
improved state predictions.
B. Trajectory Optimization as a Motion Planner
Motion planning can be seen as an optimization problem
where the cost of the trajectory cost() produced by the plan
pT is minimized subject to i) start state condition: (0)
xt  f( xt, ut) and iv) collision-free condition
smoothness on the controls, energy minimization, etc.
FGs have also been used for motion planning of holonomic
systems. In the factor graph setting, trajectories can be ob-
tained via: p(P le) f robotf obstaclef prior , where f robot
are the dynamical system factors, f obstacle the obstacle avoid-
ance factors and f prior the (xed) start and goal conditions.
Fig. 3 provides an example.
For a general dynamical system, each factor f robot corre-
sponds to solving a steering function. Dynamics linearization
Fig. 3: An FG for robot planning employs the robots model xt
f( xt, ut) on a dynamics factor to compute a trajectory of T states,
starting in x0 and ending in the goal region
XT XG. Beyond the
ternary dynamics factor, there are costs imposed for the optimization
by unary factors for obstacle avoidance (c(Xo)) over the intermediate
state variables (
XT 1), a state prior for the initial state (c(x0))
and a goal region prior for the nal state (c(XG)).
has been proposed as an alternative to solving a steering
function for certain systems [43, 10]. In practice, nding a
feasible solution depends both on the quality of the prior
and the complexity of the environment. In previous factor
graph approaches, these limitations are alleviated by using a
holonomic robot modeled via a Gaussian Process and relying
on random re-initializations.
FGs can suffer from local minima, making any solution
heavily dependent on the initial guess. For the motion planning
ically feasible solution may be in collision while a collision-
free one may not be feasible.
V. SIMULTANEOUS TRAJECTORY ESTIMATION
AND LOCAL ADAPTATION (STELA)
The STELA framework uses numerical optimization for
simultaneously solving trajectory estimation and control. It in-
troduces a general FG representation tailored for kinodynamic
trajectory following, given feasible desired plans generated
by an SBMP. Fig. 4 presents the overarching system and the
processes it involves. Ofine, a system identication process
builds a dynamics model f(xt, ut) that bridges the gap with
the target robot (see the Experiments Section for this process,
which is based on FG tools). Given the model, a kinodynamic
SBMP is called to solve a motion planning query given the
available environment map. The resulting feasible plan pT
from the planner is forwarded to the STELA module, which
also consumes from a perception system online observations
z(t) regarding the robots poses. STELA internally generates
improved estimates x(0 : t) of past robot states and forwards
controls u(t) to the robot that minimize deviation from the
planned trajectory, move the robot to the desired goal region
A. Initialization of desired trajectory via SBMP
Given the identied robot model f(xt, ut), an environment
map that identies obstacle regions Xo and a motion planning
query specifying x0 and XG, the approach calls an asymptot-
ically optimal kinodynamic Sampling-Based Motion Planner
(SBMP) [23, 27] tasked to generate a feasible, collision-free
trajectory
f(x0, pT ) that solves the query on the provided
map for the given model.
The output of the planner is treated as the desired trajectory.
It is represented via a discretized graphical representation G
Fig. 4: Asynchronous system architecture: Ofine, a system iden-
tication process generates a FG-based dynamics model of the
robot system. A motion planner receives the dynamics model, the
desired solution plan that addresses the query for the given map
and model. Upon completion, the desired plan, the model, and the
environment are sent to STELA. Online, raw data i.e., images from
external cameras are processed by a perception process to provide
robot state observations to the control module. These observations
are used by STELA to estimate the executed trajectory and generate
controls to be forwarded to the robot at a high frequency. The closed-
loop framework enables the system to adapt to noise dynamically,
execution errors, and the gap between the planning model and the
real system. In the accompanying experiments, the robot system is
either a real MuSHR robot or a simulated system, where both an
idealized LTV-SDE robot and an analytical dynamics model of a
MuSHR robot are considered.
(N, E) where a node ni N represents a reachable, collision-
free state xi  [qi, qi]T and an edge eij  {ni, nj} E
contains a control, duration pair (u, t) that drives the robot
from state ni to state nj according to f. An upper threshold
for the duration t of edges eij E of the desired trajectory
is applied (0.5sec for the LTV-SDE system and 0.1sec for
MuSHR in the accompanying experiments). If a control is
applied for longer than t in the solution SBMP trajectory,
then it is broken into multiple smaller edges in the graphical
representation of the desired trajectory so that none exceed the
duration threshold. In this way, the number of discrete states
used to initialize STELA is not xed, and it is adaptive to the
output solution of the SBMP.
B. The STELA Factor Graph
STELA builds on top of the incremental smoothing and
mapping (iSAM) framework  and is executed at a high
frequency to consume robot measurements z(t) that arrive
asynchronously. STELA is initialized by converting each edge
of the desired trajectory into a dynamics factor graph as in
Fig. 5. The proposed FG includes six different factor types.
Each factor is dened as f j() exp( 1
) for a factor-
specic error function hj(). All the FG variables qi, qi, ui and
ti are initialized according to the desired trajectory.
The integration factor operates a conguration qi, the
velocity qi, the duration ti, and the predicted next con-
guration qpred
qi Exp( qiti). The error func-
tion is then dened as hintegration(qi1, qi, qi, ti)
Log(Between(qpred
The dynamics factor explains the evolution of the velocity
given the control input. The control input ui is used to
obtain an acceleration in the local frame via a system-specic
function q  f(ui). The error function uses the predicted
velocity term qpred
i1  qi  qt to compute the error function:
hdynamics( qi1, qi, ui, ti)  qpred
i1 qi1. As q Rm, an
Euler integration scheme is sufcient.
The observation factor incorporates observations to es-
timate the executed trajectory. This work considers obser-
vations of the conguration qi
z that are generated asyn-
chronously as the robot moves. Observations have a known
(but noisy) timestamp from which the elapsed time from qi
to the observation is ti
z. The predicted observation is then
qiExp( qitz) and the error is hobservation(qi, qi)
Log(Between(qpred
, qz)). Observation factors using mea-
surements of velocities or higher-order magnitudes can be
integrated in a similar scheme.
The prior factor is a unary factor that penalizes devi-
ations of some factor graph variable v from a given con-
stant value vprior. The error is dened as: f prior(v)
Log(Between(v, vprior)). Prior factors are added to qi, qi,
and ti variables given the desired trajectory. They are not
to STELA to adapt the future trajectory given the latest state
estimates. Control variables are only initialized to the value
corresponding to the desired trajectory.
The obstacle factor introduces a notion of safety by push-
ing states away from obstacles. While the SBMP trajectory
initialization is collision-free, a robot may move dangerously
close to obstacles due to the model gap and noise. Th factor,
following the denition in , uses a distance function d()
to obstacles (from the environment map) and an  threshold:
hobstacle(qi)
d(qi)  ,
d(qi) > .
Two obstacle factors are considered: one using a precomputed
SDF and another using distance computations from a collision
for precomputation of the environment and only considers
the distance to the closest obstacle. The PQP factor can be
called online and is dened per obstacle, allowing multiple
factors to be active at the cost of increased computation.
Given a reasonable threshold distance , even in a cluttered
the error is zero in these cases, re-linearization is unnecessary.
The limits factor penalizes values that exceed a predened
value vlim. The error for an upper limit of a variable v is:
hlimit(v)
otherwise.
Lower limits can be computed similarly. Multi-value limits
are dened element-wise. Limit factors are applied to control
variables ui to guarantee a feasible solution and the duration
variables ti to keep them within a reasonable range.
Fig. 5a shows the dynamics factor graph constructed from
two SBMP-nodes and one SBMP-edge. Each SBMP-edge in-
troduces one integration factor and one dynamics factor.
Obstacle factors are added per conguration. Limit factors
constraint ti > 0 and controls as the SBMP solution must
(a) Dynamics Factor Graph
(b) Compressed Dy-
namics Factor Graph
(c) STELA Trajectory
Fig. 5: (Left) The dynamics factor graph corresponding to each edge of the desired trajectory with all associated factors. (Middle) For
visualization purposes, the dynamics factor graph is also presented in a compressed form, which is symbolized by a hollow factor. (Right)
A collision-free trajectory, consisting of a dynamic factor graph sequence, is shown.
respect physical limits. Five prior factors are included, one per
conguration q, one per velocity q, and one for the duration
ti to penalize deviations from the desired trajectory. Finally,
observation factors are added as new observations arrive.
C. Inference over a Sliding Window
A FG associated with the entire desired trajectory returned
by the SBMP planner has at least 2N  2E FG-variables
and 6N5E FG-factors. At runtime, the number of factors
can further and quickly increase due to high-frequency obser-
vations. A sliding window approach (Fig. 6) is proposed to
alleviate the resulting computational cost of the optimization.
The window is divided into a forward horizon using nfwd
future nodes of the planned trajectory relative to the current
state and a limited past history of nhist past variables.
For the past history, STELA follows similar strategies for
trajectory estimation as in the literature  (i.e., related to
Section IV-A and Figure 2), so that p(T Ee) f T E
jcurrnhist f integration
f dynamics
f observation
, where curr
is the current state. In contrast to previous approaches (Fig. 2),
STELA only estimates the past nhist states, and the forward
propagation process is modeled by the combination of the
general integration and dynamics factors of the proposed FG.
The prior, limit, and obstacle factors are not used for the
trajectory estimation component of the optimization.
For the forward horizon, STELA does not perform planning
or control from scratch given a naive initialization as in
Section IV-B and Fig. 3. Instead, STELA locally adapts the
SBMP plan. Local adaptation refers to adapting the controls
to minimize the error with the desired trajectory, respect the
of the window performs a local adaptation given: p(LAe)
Qcurrnfwd
f integration
f dynamics
f obstacle
f limits
observation factors are not used for the local adaptation
component of the optimization.
STELA simultaneously performs trajectory estimation and
local adaptation through the inference of:
p(ST ELAe) f T Ef LA
D. The STELA Algorithm
Algorithm 1 STELA
j max{curr nhist, 0}
k min{curr  nfwd, length(FG )}
for i {j, . . . , k} do
Lookahead
xi FG.estimate(i)
Si FG.covariance(i)
FG  f observation(qcurr, qcurr, znew)
Add znew
dtcurr FG.estimate(tcurr)
ucurr FG.estimate(ucurr)
Adapt control
send control(ucurr)
if (clock() - prev) > dtcurr then
prev  clock()
FG- {(qj, qj, uj, tj}
Remove history
Add to Forward Horizon
f integration(qk1, qk, qk1, tk),
f dynamics( qk1, qk, uk1, tk),
f prior(qk1), f prior( qk1), f prior(tk),
f limits(uk1), f limits(tk), f obstacle(qk1) }
Move to next state
At the beginning of the execution, the initial nfwd nodes of
the desired trajectory Tsbmp are converted into a factor graph
FG. At each iteration, while the goal has not been reached,
STELA performs the following operations: lookahead, trajec-
tory estimation, addition of observations, and local adaptation.
Fig. 6: STELA with a sliding window in action: Ofine, the SBMP generates a graphical representation from which a feasible, collision-free,
goal-reaching trajectory is obtained. At initialization, the factor graph converts forward-horizon nodes (image: nfwd  nhist  2 ) into a
dynamics factor graph and starts execution. Running at a given frequency, at each iteration, STELA updates the factor graph, incorporating
new observations and moving the window. The window update at time ti is determined by comparing the variable ti to the elapsed time
since the last window update. Window updates incorporate the next node from the planned trajectory and (if necessary) delete history nodes.
STELA seeks to exploit the incremental nature of the
iSAM2 algorithm by locally updating and querying the factor
graph as necessary. The lookahead step obtains the estimated
states of the forward horizon alongside their associated error.
New observations are added to the corresponding state, which
may change the estimation of qi,qi1,ui or ti; obtaining the
current estimate for ui and ti. When the estimated duration
of the current edge ti elapses, STELA moves to the next node
by a) deleting the history variables and associated factors to
keep nhist forward variables, b) adding the next node from
the planned trajectory and c) changing the current node.
E. STELA vs Previous Factor Graph-based Approaches
STELA can be seen as generalization of both STEAP
and SCATE  but has also unique features.
A. The formulations of STEAP and SCATE restrict their
applicability to holonomic dynamical systems. In the case of
STELAs formulation allows the use of general dynamical sys-
tems expressed via rst or second-order analytical expressions.
B. The prior approaches collapse q and qt into a single
in a better exploitation of the sparsity characteristics of FGs.
C. The sliding window mechanism keeps the number of
factors in the FG relatively constant (up to the number of ob-
servation factors). This allows for predictable, high-frequency
updates and better performance over long trajectories and
complex environments.
D. STELA utilizes Lie operations for the integration factor,
enhancing the approximation of dynamics and accelerating
performance. This also renders STELA broadly applicable to
a wide range of robotic systems.
(a) Simple Obstacle
(b) Forest
(c) Bug Trap
Fig. 7: Simulated environments used for experiments with the LTV-
SDE and MuSHR models. Letters indicate candidate starts and goals.
The Simple Obstacle environment is a basic setup. Forest evaluates
performance among many obstacles with some narrow passages. The
Bug Trap is challenging due to the long, narrow passage.
E. Planning via an optimization approach requires contin-
uously solving a Boundary Value Problem (BVP) (or access
to a steering function). This can result in solutions with local
minima or the inability to converge in systems with non-linear
dynamics. A core insight behind STELA is that this challenge
can be simplied if a feasible initiation from an SBMP is used,
where the SBMP has explored the state space for high-quality,
VI. EXPERIMENTS
A. Experimental setup
STELA is tested in simulation in the environments shown in
Fig. 7 and with a real MuSHR  robot in the environments
shown in Fig. 1 and 8. The system is tested against four levels
of state space noise in simulation: xt  f(xt, ut)N(0, Ix
and four levels of observation noise zt  h(xt)N(0, I z
where I is the identity matrix of appropriate dimension.
Simulated systems are implemented as factor graphs using the
GTSAM  library. Initial feasible trajectories are obtained
using the AO-RRT kinodynamic planner  from the ML4KP
Multiple obstacles
Movable boxes
Fig. 8: Experiments on a real MuSHR. (Top) The robot navigates between (A-B), (C-A), and (D-B), avoiding obstacles. Initial poses in
has movable obstacles. Similar to the Ramp experiment of Figure 1, this setup tests STELA under partial observability.
(a) MuSHR (real) SysId
(b) Observation Noise
Fig. 9: (Left) System Identication results for the real MuSHR.
The model closely predicts the behavior of the robot along constant
control trajectories, but a gap is still present. (Right) Observations
zt are camera estimates of the robots pose with the highest level of
observation noise (z
3) chosen to match the real-world setup.
library. Both STELA and the comparison point SCATE are im-
plemented via GTSAM with Threading Building Blocks ,
allowing parallelization for specic functions. Both algorithms
are executed in a server with 72 cores, but each experiment
is limited to 8 cores (the number of cores found in most
computers) for fair comparison.
All experiments are performed in a ROS-based system,
where STELA and the comparing approaches are implemented
as standalone nodes. All communication within nodes and the
environment (either simulated or real) is performed through
ROS messages, introducing additional unmodeled noise as
time delays or lost messages. The update functions in STELA
and SCATE are implemented as ROS timers with a given fre-
time for the algorithm or from external sources.
The robot systems considered for experiments are:
LTV-SDE adopted from  (eq. 50), q, q R2. The controls
u [0.2, 0.2]  [0.2, 0.2] represent acceleration.
MuSHR modeled as a second order system, where q
SE(2) and q R3; the control u R2 corresponds to
acceleration and steering angle.
For the real MuSHR, a system identication process to
close the model gap is rst performed. The parameters  to
be identied are the acceleration gain and the angular velocity
gain. In particular, using observed trajectories  of the system
under a known plan p(T), the parameters  are estimated
so that the predictions given by the model best match the
observations. An additional step was needed for the steering
steering angle vs the input. The system identication is solved
via least squares optimization on a factor graph using the
integration and dynamics factor. The controls correspond to
the executed plan and are imposed via a prior factor. The
steering angle in the trajectories is dened using a ve-
degree polynomial, which is t from the same data. Figure 9a
visualizes the raw data for the real platform and the prediction
for constant control trajectories of xed duration after system
identication. Asynchronous observations xi of the robots
state are used for the sys. id process where  [0, 1] and
assuming a noise distribution N(0, ), between states xi and
xi1. The initial guess is obtained by forward propagating
f0(x0, u) for the duration of the plan.
The simulated MuSHR uses the same identied model as the
real system with added noise in q. Observations zt are camera
estimates of the robots pose. The highest level of observation
3 matches the real-world setup, where ArUco mark-
ers  are positioned 1m apart on a grid (Fig. 9b). The mean
error and the standard deviation of these pose estimation were
measured given ground-truth.
Comparison Points: Table V shows the number of problems
(start-goal queries) per scene selected to test STELA against
the alternatives. Multiple repetitions per query are performed.
LTV-SDE - Simple Obstacle
Open Loop
SCATE-Nave
SCATE-SBMP
TABLE I: Success rates for the LVT-SDE on the Simple Obstacle scene for the different approaches. Columns correspond to different
techniques and different levels of actuation noise. Rows correspond to different levels of observation noise.
LTV-SDE - Forest
Open Loop
SBMP Replanning
SCATE-Nave
SCATE-SBMP
TABLE II: Success rates for the LVT-SDE on Forest for the different approaches.
LTV-SDE - Bug Trap
Open Loop
SCATE-SBMP
TABLE III: Success rates for the LVT-SDE on the Bug Trap.
SCATE-Nave fails to initialize with a feasible plan and, therefore, is
never successful.
MuSHR (sim) - Simple Obstacle
Open Loop
TABLE IV: Success rates for the sim. MuSHR on Simple Obstacle.
The baseline comparison point is open-loop execution of the
desired trajectory. SCATE was also chosen as a compari-
son point. SCATE was originally implemented in MATLAB,
and for consistency and performance purposes, it was re-
implemented in C, similar to STELA, reutilizing similar
components. Two variations of SCATE are considered. The
rst follows the original SCATE by initializing the factor graph
with a nave straight-line plan from start to goal. The second
variant is initialized with the same desired plan from the SBMP
as the proposed STELA approach.
Simple Obst.
Bug Trap
TABLE V: Number of trajectories and repetitions for each scene.
Since SCATE requires a constant dt between the states of
the factor graph, the variable control durations of this tree had
to be normalized by performing a weighted average operation
over the edges and the states. Both implementations of SCATE
use the same obstacle factor as STELA and also include a
factor to ensure that the controls are within the systems limits,
which was observed to assist their performance. The SCATE
Fig. 10: LTV-SDE Forest - Comparison of the Time to
between SCATE-Nave, SCATE-SBMP, and STELA. Trajec-
tory Error is skipped since SCATE-Nave does not have an
initial trajectory to track.
algorithm is only applicable to the LTV-SDE system but not
to MuSHR.
Ratio of experiments where the robot reached the
goal without collisions; the most critical metric for safety.
ized given the minimum duration solution per problem.
Estimation Error: Error between ground truth and estimated
trajectory; ground truth is not available for the real MuSHR.
this metric reports only the time taken by the optimizer.
(a) Simple Obstacle
(b) Forest
(c) Bug Trap
Fig. 11: STELA results for MuSHR (sim). Three normalized metrics
reported. Time to collision is the rate of a trajectory traversed before
a collision (no data if the success rate is 100). Trajectory error
(lower is better) is the L2-norm between the planned and executed
is better) is the L2-norm between the estimated trajectory and the
ground truth, normalized over the highest error. STELA exhibits a
very natural and slow degradation in performance as noise increases.
MuSHR (sim) - Forest
Open Loop
TABLE VI: Success rates for the sim. MuSHR on Forest.
MuSHR (sim) - Bug Trap
Open Loop
TABLE VII: Success rates for the sim. MuSHR on Bug Trap.
B. Simulation Results
Tables I,II, and III show the success rate of each algo-
rithm per environment for the LTV-SDE system in simulation.
Fig. 10 presents the Time to Collision, Normalized Trajectory
Experiments with zero success rates are not included in the
plots. Similarly, tables IV,VI, and VII show success rates
for the simulated MuSHR (sim) alongside Figs. 11. The
computation time per iteration for the forest environment is
shown in Fig. 13 for both STELA and SCATE.
OPEN-LOOP showcases the effects of noise on the systems
actuation noise level is introduced. No experiments were
performed for non-zero observation noise since no estimation
was performed in the case of the OPEN-LOOP baseline.
SBMP-REPLANNING is an online replanning strategy,
which uses an informed, sampling-based, kinodynamic tree
planner to generate new controls every second given the latest
Fig. 12: Aggregate results of the Normalized Trajectory Error
and Estimation Error for MuSHR (real) across scenes.
Fig. 13: The computation time per call of STELA and SCATE-
SBMP shows a signicant advantage in using the incremental
computation and sliding window approach of STELA.
observation zt and the same dynamics model as STELA. This
strategy is only tested in the forest environment for the LTV-
SDE system (Table II). This strategy degrades fast with higher
dynamics noise.
SCATE-Nave works well in the Simple Obstacle environ-
ment for the LTV-SDE system. It faces signicant challenges,
feasible paths in the Bug Trap environment, with no results
reported. Initializing SCATE with the feasible trajectory from
the SBMP allows for nearly 100 success for the lowest
actuation noise levels across all three environments for the
LTV-SDE system. As actuation noise increases, however, the
performance of SCATE degrades. In setups with high actuation
than STELA. As a reminder, the SCATE comparison point is
not directly applicable to the MuSHR system.
STELA gets a 100 success rate on the lowest noise
levels while maintaining a high success rate on the most
challenging levels across all environments. The increase in
cost on the higher noise levels can be explained by the effect
of the time variables in the factor graph optimization, which
stretches the edges as needed so as to avoid collisions and still
solve problems. The STELA exhibits very similar behavior
for the second-order, non-holonomic MuSHR car as with the
ability to work for different models of robotic systems.
C. Real Experiments
Real experiments are performed with a MuSHR  robot
in the scenes of Figures 1 and 8. The multiple obstacles en-
vironment is similar to the setups from simulated experiments,
where collisions with obstacles are considered failures. The
objective of the movable boxes and ramp environments
is to test the ability to adapt to unmodeled environmental
features. The second environment considers a set of movable
boxes that are not present during planning, and the robot
can collide online without considering a failure. The third
environment uses a ramp (not present during planning) that
the robot needs to traverse to reach the goal. A total of
21 experiments were performed, nine on multiple obstacles
(one collision), nine on movable obstacles, and three on the
ramp environment (no collisions). Fig. 8 shows qualitative
planned trajectory (trajectory error) and the estimation error.
D. STELA Ablation
An ablation study is performed for STELA given the simu-
lated MuSHR system on the Forest environment. The ablation
evaluation of the effect of the sliding window size, the use
of the duration T as a factor variable, the impact of the
obstacle factor, as well as the impact of initializing with the
SBMP trajectory versus a nave initialization. The size of the
sliding window is divided into the future horizon and the past
history. The reduction of either of these values from the default
value of 10 in STELA results in performance degradation.
This showcases the effects of performing trajectory estimation,
i.e., smoothing, instead of ltering, as well as having a longer
horizon than just computing the next control to be executed.
STELA without time as a variable also performs worse, which
shows the benet of letting the optimizer adapt the duration
of the edges so as to hit the desired states under the effects of
noise. STELA without the obstacle factor is more susceptible
to collisions, even though it still uses prior factors that push the
solution towards the desired, collision-free trajectory. The low-
cost trajectories returned from the SBMP are likely, however,
to be in close proximity to obstacles, which makes following
them susceptible to collisions without an obstacle factor.
Two versions of the obstacle factor were tested: an SDF-
based one, used by the default approach, and an obstacle
factor for multiple obstacles within the distance threshold
as computed online, given PQP distance calls. The multi-
of the SBMP trajectory initialization results in signicant
performance degradation. Frequently, no feasible solution is
achieved given the initialization of the approach, and then the
algorithm fails. The approach proceeds to work if a solution
is found around the initialization.
VII. DISCUSSION
This paper presents STELA, a novel approach that seam-
lessly integrates the output of kinodynamic sampling-based
motion planning with an integrated approach for trajectory
estimation and following through factor graph optimization.
STELAs effectiveness is highlighted by its ability to dynam-
ically adapt plans based on real-time sensor data, resulting
in improved accuracy in trajectory following and robustness
against unmodeled environmental variations and noise. The
experimental evaluations indicate that STELA enhances the
practical applicability of model-based planning and control
methods. It also signicantly outperforms alternatives in simu-
lated evaluations as noise increases, while achieving desirable
high-frequency control update rates.
VIII. LIMITATIONS
Mushr - Forest
TABLE IX: STELAs suc-
cess rates for the MuSHR(sim)
robot for high dynamics noise.
While STELA offers a sig-
increase
mance and computational ef-
tions of existing factor graph
approaches. In the presence
of extreme noise and devia-
tion from the desired trajectory,
STELA will fail to converge.
To test the effects of signicant
evaluates STELA under higher levels of dynamics noise, as
shown in Table IX, where x
the columns). The extreme noise level x
6 results mostly
in failures, where 24 of failures arise from Indeterminant
Linear System Exception, i.e., the accumulation of numerical
STELA with variable window Sizes
Time not as Variable
Obstacle Factor
Naive Initialization
10 Future - 0 Past Nodes
1 Future - 10 Past Nodes
1 Future - 0 Past Nodes
TABLE VIII: Ablation study of STELA. Comparisons are shown for (left to right): different sliding window sizes, no time factor variable,
variations in the obstacle factors, and naive initialization (discretized straight line path from start to goal) instead of the SBMP initialization.
(a) LTV: Open-loop
(b) LTV: STELA
(c) MuSHR (sim):
Fig. 14: The effects of state-space noise in collision on the Forest environment for the Open-loop baseline (left) and the
proposed STELA (middle). The top images correspond to the no-noise setup, while the bottom images correspond to the
highest observation and dynamics noise (x
3). Each image shows 100 trajectories (10 SBMP initializations with 10
repetitions each). STELA can still return collision-free solutions under signicant noise, while open-loop execution of the
desired trajectories results in collisions. (Left) For a desired trajectory (black line) of MuSHR (Sim), condence ellipses of
the only failure mode corresponds to potential collisions.
While there is degradation of performance as the noise levels
outperforms alternatives and succeeds under reasonable noise
levels as well as for the real-world setup.
Higher noise levels motivate the use of online replanning
of the desired trajectory in parallel to executing STELA. Such
replanning can be especially useful if there are solution paths
along different homotopic classes. It may also be benecial
in the context of dynamic obstacles, which is a setup that
was not tested in the current evaluation. STELAs formulation,
IX. ACKNOWLEDGEMENTS
Work by the authors in this paper was partially supported
by NSF NRT-FW-HTF award 2021628. Any opinions, nd-
ings and conclusions, or recommendations expressed in this
material are those of the authors and do not necessarily
reect the views of the NSF. Kostas Bekris holds concurrent
appointments as a Professor of Rutgers University and as
an Amazon Scholar. This paper describes work performed at
Rutgers University and is not associated with Amazon.
REFERENCES
ization and planning under uncertainty via dynamic re-
planning in belief space. IEEE Transactions on Robotics
for sampling-based kinodynamic planning. arXiv preprint
multirotor system identication. In: 2017 IEEE Interna-
tional Conference on Robotics and Automation (ICRA).
time trajectory estimation as exactly sparse gaussian
process regression. In: Robotics: Science and Systems.
vol. 10, pp. 110. Citeseer (2014)
distributed slam using constrained factor graphs. In: 2010
IEEERSJ International Conference on Intelligent Robots
and Systems. pp. 30253030. IEEE (2010)
perception. Foundations and Trends in Robotics 6(1-
preintegration on manifold for efcient visual-inertial
maximum-a-posteriori estimation. In: Robotics: Science
and Systems XI (2015)
informed trees (bit): Sampling-based optimal planning
via the heuristically guided search of implicit random
geometric graphs. In: 2015 IEEE international conference
on robotics and automation (ICRA). pp. 30673074.
IEEE (2015)
mal sampling-based planning for linear-quadratic kinody-
namic systems. In: 2013 IEEE International Conference
on Robotics and Automation. pp. 24292436. IEEE
Berlin Heidelberg, Berlin, Heidelberg (2020),
S.: Autonomous automobile trajectory tracking for off-
road driving: Controller design, experimental validation
and racing. In: 2007 American control conference. pp.
Discontinuity-bounded search for kinodynamic mobile
robot motion planning. In: 2022 IEEERSJ International
Conference on Intelligent Robots and Systems (IROS).
planning with graph-based trajectories and gaussian pro-
cess inference. In: 2017 IEEE International Conference
on Robotics and Automation (ICRA). pp. 55915598.
IEEE (2017)
F.: Probabilistic tracking with deep factors. arXiv preprint
M.: State-space system identication of robot manipula-
tor dynamics. Mechatronics 10(3), 403418 (2000)
mapping. In: Algorithmic Foundations of Robotics IX:
Selected Contributions of the Ninth International Work-
shop on the Algorithmic Foundations of Robotics. pp.
157173. Springer (2011)
J.J., Dellaert, F.: isam2: Incremental smoothing and map-
ping using the bayes tree. The International Journal of
Robotics Research 31(2), 216235 (2012)
mental smoothing and mapping. IEEE Transactions on
motion planning. In: 2011 IEEE international conference
on robotics and automation. pp. 45694574. IEEE (2011)
optimal motion planning. The international journal of
robotics research 30(7), 846894 (2011)
control and trajectory estimation for collision avoidance
of autonomous robotic spacecraft systems. In: 2022
International Conference on Robotics and Automation
(ICRA). pp. 257264. IEEE (2022)
R., Bekris, K.E., Halperin, D.: Rened analysis of
asymptotically-optimal kinodynamic planning in the
state-cost space. In: 2020 IEEE International Conference
on Robotics and Automation (ICRA). pp. 63446350.
IEEE (2020)
and the sum-product algorithm. IEEE Transactions on
Information Theory 47(2), 498519 (2001)
proximity queries with swept sphere volumes. Tech. rep.,
Technical Report TR99-018, Department of Computer
sity press (2006)
optimal kinodynamic motion planning via dominance-
informed regions. In: 2018 IEEERSJ International Con-
ference on Intelligent Robots and Systems (IROS). pp.
R.: Motion planning around obstacles with convex opti-
mization. Science robotics 8(84), eadf7843 (2023)
simultaneous trajectory estimation and planning. Au-
tonomous Robots 43, 415434 (2019)
B.: Continuous-time gaussian process motion planning
via probabilistic inference. The International Journal of
Robotics Research 37(11), 13191340 (2018)
graph search and trajectory optimization for aggressive
quadrotor ight. IEEE Robotics and Automation Letters
M., Righetti, L.: idb-rrt: Sampling-based kinodynamic
motion planning with motion primitives and trajectory
optimization. arXiv preprint arXiv:2403.10745 (2024)
E.: A survey of motion planning and control techniques
for self-driving urban vehicles. IEEE Transactions on
intelligent vehicles 1(1), 3355 (2016)
method for optimal kinodynamic motion planning. In:
Algorithmic Foundations of Robotics XII: Proceedings
of the Twelfth Workshop on the Algorithmic Foundations
of Robotics. pp. 512527. Springer (2020)
Computing Sciences in Colleges 23(4), 298298 (2008)
motion planning. In: 2009 IEEE international conference
on robotics and automation. pp. 489494. IEEE (2009)
markers. Image and vision Computing 76, 3847 (2018)
H., Abbeel, P.: Finding locally optimal, collision-free
trajectories with sequential convex optimization. In: RSS.
vol. 9, pp. 110. Berlin, Germany (2013)
ory for state estimation in robotics. arXiv preprint
M., Summers, C., Rockett, M., Scalise, R., Smith, J.R.,
search. arXiv preprint arXiv:1908.08031 (2019)
proximate inference. In: Proceedings of the 26th annual
international conference on machine learning. pp. 1049
strained motion problems. arXiv:1407.0414 (2014)
totically optimal motion planning for robots with linear
dynamics. In: 2013 IEEE international conference on
robotics and automation. pp. 50545061. IEEE (2013)
for robot system identication. In: 2012 IEEERSJ Inter-
national Conference on Intelligent Robots and Systems.
for consistent belief space planning with reachability
guarantees. IEEE Transactions on Robotics (2024)
